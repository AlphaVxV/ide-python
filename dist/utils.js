"use strict";

const cp = require("child_process");

const {
  Directory
} = require("atom");

const VIRTUAL_ENV_BIN_DIRS = ["bin", "Scripts"];
const VIRTUAL_ENV_EXECUTABLES = ["python", "python.exe"];

function detectPipEnv(path) {
  return new Promise(resolve => {
    const pipEnvProcess = cp.spawn("pipenv", ["--venv"], {
      cwd: path
    });
    pipEnvProcess.stdout.on("data", data => {
      resolve(`${data}`.trim());
    });
    pipEnvProcess.stderr.on("data", () => {
      resolve(null);
    });
    pipEnvProcess.on("error", () => {
      resolve(null);
    });
  });
}

async function detectVirtualEnv(path) {
  const entries = await new Promise(resolve => new Directory(path).getEntries((error, entries) => {
    if (error === null) {
      resolve(entries);
    } else {
      resolve(null);
    }
  }));

  if (entries) {
    for (let entry of entries) {
      if (entry.isDirectory()) {
        if (VIRTUAL_ENV_BIN_DIRS.indexOf(entry.getBaseName()) !== -1) {
          for (let executable of VIRTUAL_ENV_EXECUTABLES) {
            if (await entry.getFile(executable).exists()) {
              return path;
            }
          }
        } else {
          for (let dir_name of VIRTUAL_ENV_BIN_DIRS) {
            for (let executable of VIRTUAL_ENV_EXECUTABLES) {
              if (await entry.getSubdirectory(dir_name).getFile(executable).exists()) {
                return entry.getPath();
              }
            }
          }
        }
      }
    }
  }
}

function sanitizeConfig(config) {
  Object.entries(config).forEach(([key, value]) => {
    if (value === "null") {
      config[key] = null;
    }
  });
  return config;
}

function replacePipEnvPathVar(pythonPath, pipEnvPath) {
  if (pythonPath.indexOf("$PIPENV_PATH") !== -1 && pipEnvPath) {
    return pythonPath.replace("$PIPENV_PATH", pipEnvPath);
  }

  return pythonPath;
}

exports.detectVirtualEnv = detectVirtualEnv;
exports.sanitizeConfig = sanitizeConfig;
exports.detectPipEnv = detectPipEnv;
exports.replacePipEnvPathVar = replacePipEnvPathVar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbImNwIiwicmVxdWlyZSIsIkRpcmVjdG9yeSIsIlZJUlRVQUxfRU5WX0JJTl9ESVJTIiwiVklSVFVBTF9FTlZfRVhFQ1VUQUJMRVMiLCJkZXRlY3RQaXBFbnYiLCJwYXRoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwaXBFbnZQcm9jZXNzIiwic3Bhd24iLCJjd2QiLCJzdGRvdXQiLCJvbiIsImRhdGEiLCJ0cmltIiwic3RkZXJyIiwiZGV0ZWN0VmlydHVhbEVudiIsImVudHJpZXMiLCJnZXRFbnRyaWVzIiwiZXJyb3IiLCJlbnRyeSIsImlzRGlyZWN0b3J5IiwiaW5kZXhPZiIsImdldEJhc2VOYW1lIiwiZXhlY3V0YWJsZSIsImdldEZpbGUiLCJleGlzdHMiLCJkaXJfbmFtZSIsImdldFN1YmRpcmVjdG9yeSIsImdldFBhdGgiLCJzYW5pdGl6ZUNvbmZpZyIsImNvbmZpZyIsIk9iamVjdCIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsInJlcGxhY2VQaXBFbnZQYXRoVmFyIiwicHl0aG9uUGF0aCIsInBpcEVudlBhdGgiLCJyZXBsYWNlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxlQUFELENBQWxCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFnQkQsT0FBTyxDQUFDLE1BQUQsQ0FBN0I7O0FBRUEsTUFBTUUsb0JBQW9CLEdBQUcsQ0FBQyxLQUFELEVBQVEsU0FBUixDQUE3QjtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLENBQUMsUUFBRCxFQUFXLFlBQVgsQ0FBaEM7O0FBRUEsU0FBU0MsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEI7QUFDMUIsU0FBTyxJQUFJQyxPQUFKLENBQVlDLE9BQU8sSUFBSTtBQUM1QixVQUFNQyxhQUFhLEdBQUdULEVBQUUsQ0FBQ1UsS0FBSCxDQUFTLFFBQVQsRUFBbUIsQ0FBQyxRQUFELENBQW5CLEVBQStCO0FBQ25EQyxNQUFB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VixjQUFSLEdBQXlCQSxjQUF6QjtBQUNBVSxPQUFPLENBQUNwQyxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBb0MsT0FBTyxDQUFDSixvQkFBUixHQUErQkEsb0JBQS9CIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3AgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcclxuY29uc3QgeyBEaXJlY3RvcnkgfSA9IHJlcXVpcmUoXCJhdG9tXCIpO1xyXG5cclxuY29uc3QgVklSVFVBTF9FTlZfQklOX0RJUlMgPSBbXCJiaW5cIiwgXCJTY3JpcHRzXCJdO1xyXG5jb25zdCBWSVJUVUFMX0VOVl9FWEVDVVRBQkxFUyA9IFtcInB5dGhvblwiLCBcInB5dGhvbi5leGVcIl07XHJcblxyXG5mdW5jdGlvbiBkZXRlY3RQaXBFbnYocGF0aCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIGNvbnN0IHBpcEVudlByb2Nlc3MgPSBjcC5zcGF3bihcInBpcGVudlwiLCBbXCItLXZlbnZcIl0sIHtcclxuICAgICAgY3dkOiBwYXRoXHJcbiAgICB9KTtcclxuICAgIHBpcEVudlByb2Nlc3Muc3Rkb3V0Lm9uKFwiZGF0YVwiLCBkYXRhID0+IHtcclxuICAgICAgcmVzb2x2ZShgJHtkYXRhfWAudHJpbSgpKTtcclxuICAgIH0pO1xyXG4gICAgcGlwRW52UHJvY2Vzcy5zdGRlcnIub24oXCJkYXRhXCIsICgpID0+IHtcclxuICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgIH0pO1xyXG4gICAgcGlwRW52UHJvY2Vzcy5vbihcImVycm9yXCIsICgpID0+IHtcclxuICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBkZXRlY3RWaXJ0dWFsRW52KHBhdGgpIHtcclxuICBjb25zdCBlbnRyaWVzID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PlxyXG4gICAgbmV3IERpcmVjdG9yeShwYXRoKS5nZXRFbnRyaWVzKChlcnJvciwgZW50cmllcykgPT4ge1xyXG4gICAgICBpZiAoZXJyb3IgPT09IG51bGwpIHtcclxuICAgICAgICByZXNvbHZlKGVudHJpZXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgKTtcclxuICBpZiAoZW50cmllcykge1xyXG4gICAgZm9yIChsZXQgZW50cnkgb2YgZW50cmllcykge1xyXG4gICAgICBpZiAoZW50cnkuaXNEaXJlY3RvcnkoKSkge1xyXG4gICAgICAgIGlmIChWSVJUVUFMX0VOVl9CSU5fRElSUy5pbmRleE9mKGVudHJ5LmdldEJhc2VOYW1lKCkpICE9PSAtMSkge1xyXG4gICAgICAgICAgZm9yIChsZXQgZXhlY3V0YWJsZSBvZiBWSVJUVUFMX0VOVl9FWEVDVVRBQkxFUykge1xyXG4gICAgICAgICAgICBpZiAoYXdhaXQgZW50cnkuZ2V0RmlsZShleGVjdXRhYmxlKS5leGlzdHMoKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZvciAobGV0IGRpcl9uYW1lIG9mIFZJUlRVQUxfRU5WX0JJTl9ESVJTKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGV4ZWN1dGFibGUgb2YgVklSVFVBTF9FTlZfRVhFQ1VUQUJMRVMpIHtcclxuICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBlbnRyeVxyXG4gICAgICAgICAgICAgICAgICAuZ2V0U3ViZGlyZWN0b3J5KGRpcl9uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAuZ2V0RmlsZShleGVjdXRhYmxlKVxyXG4gICAgICAgICAgICAgICAgICAuZXhpc3RzKClcclxuICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeS5nZXRQYXRoKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzYW5pdGl6ZUNvbmZpZyhjb25maWcpIHtcclxuICBPYmplY3QuZW50cmllcyhjb25maWcpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xyXG4gICAgaWYgKHZhbHVlID09PSBcIm51bGxcIikge1xyXG4gICAgICBjb25maWdba2V5XSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGNvbmZpZztcclxufVxyXG5cclxuZnVuY3Rpb24gcmVwbGFjZVBpcEVudlBhdGhWYXIocHl0aG9uUGF0aCwgcGlwRW52UGF0aCkge1xyXG4gIGlmIChweXRob25QYXRoLmluZGV4T2YoXCIkUElQRU5WX1BBVEhcIikgIT09IC0xICYmIHBpcEVudlBhdGgpIHtcclxuICAgIHJldHVybiBweXRob25QYXRoLnJlcGxhY2UoXCIkUElQRU5WX1BBVEhcIiwgcGlwRW52UGF0aCk7XHJcbiAgfVxyXG4gIHJldHVybiBweXRob25QYXRoO1xyXG59XHJcblxyXG5leHBvcnRzLmRldGVjdFZpcnR1YWxFbnYgPSBkZXRlY3RWaXJ0dWFsRW52O1xyXG5leHBvcnRzLnNhbml0aXplQ29uZmlnID0gc2FuaXRpemVDb25maWc7XHJcbmV4cG9ydHMuZGV0ZWN0UGlwRW52ID0gZGV0ZWN0UGlwRW52O1xyXG5leHBvcnRzLnJlcGxhY2VQaXBFbnZQYXRoVmFyID0gcmVwbGFjZVBpcEVudlBhdGhWYXI7XHJcbiJdfQ==