"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activate = activate;
exports.dispose = dispose;
exports.createDebuggerProvider = createDebuggerProvider;
exports.getPythonAutoGenConfig = getPythonAutoGenConfig;
exports.NUCLIDE_PYTHON_DEBUGGER_DEX_URI = void 0;

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var React = _interopRequireWildcard(require("react"));

var _AutoGenLaunchAttachProvider = require("@atom-ide-community/nuclide-debugger-common/AutoGenLaunchAttachProvider");

var _utils = require("./utils");

var _path = _interopRequireDefault(require("path"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const NUCLIDE_PYTHON_DEBUGGER_DEX_URI = 'https://our.intern.facebook.com/intern/dex/python-and-fbcode/debugging/#nuclide';
exports.NUCLIDE_PYTHON_DEBUGGER_DEX_URI = NUCLIDE_PYTHON_DEBUGGER_DEX_URI;

_subscriptions: _UniversalDisposable.default;

function activate() {
  _subscriptions = new _UniversalDisposable.default((0, _utils.listenToRemoteDebugCommands)());
}

function dispose() {
  _subscriptions.dispose();
}

function createDebuggerProvider() {
  return {
    type: "python",
    getLaunchAttachProvider: connection => {
      return new _AutoGenLaunchAttachProvider.AutoGenLaunchAttachProvider("Python", connection, getPythonAutoGenConfig());
    }
  };
} // TODO this service does not exist
// export function consumeRpcService(rpcService: nuclide$RpcService): IDisposable {
//   return setRpcService(rpcService);
// }


function getPythonAutoGenConfig() {
  const program = {
    name: 'program',
    type: 'path',
    description: 'Absolute path to the program.',
    required: true,
    visible: true
  };
  const pythonPath = {
    name: 'pythonPath',
    type: 'path',
    description: 'Path to python executable.',
    required: true,
    visible: true
  };
  const cwd = {
    name: 'cwd',
    type: 'path',
    description: '(Optional) Absolute path to the working directory of the program being debugged. Default is the root directory of the file.',
    required: true,
    visible: true
  };
  const args = {
    name: 'args',
    type: 'array',
    itemType: 'string',
    description: 'Command line arguments passed to the program',
    defaultValue: [],
    required: false,
    visible: true
  };
  const stopOnEntry = {
    name: 'stopOnEntry',
    type: 'boolean',
    description: 'Automatically stop after launch.',
    defaultValue: false,
    required: false,
    visible: true
  };
  const debugOptions = {
    name: 'debugOptions',
    type: 'array',
    itemType: 'string',
    description: 'Advanced options, view read me for further details.',
    defaultValue: ['WaitOnAbnormalExit', 'WaitOnNormalExit', 'RedirectOutput'],
    required: false,
    visible: false
  };
  const env = {
    name: 'env',
    type: 'object',
    description: '(Optional) Environment variables (e.g. SHELL=/bin/bash PATH=/bin)',
    defaultValue: {},
    required: false,
    visible: true
  };
  const consoleEnum = {
    name: 'console',
    type: 'enum',
    enums: ['internalConsole', 'integratedTerminal'],
    description: '',
    defaultValue: 'internalConsole',
    required: true,
    visible: true
  };
  const adapterExecutable = {
    command: "node",
    args: [_path.default.resolve(_path.default.join(__dirname, "VendorLib/vs-py-debugger/out/client/debugger/debugAdapter/main.js"))]
  };

  const adapterRoot = _path.default.resolve(_path.default.join(__dirname, "VendorLib/vs-py-debugger"));

  return {
    launch: {
      launch: true,
      vsAdapterType: "python",
      adapterExecutable,
      adapterRoot,
      properties: [program, pythonPath, cwd, args, stopOnEntry, debugOptions, env, consoleEnum],
      scriptPropertyName: 'program',
      scriptExtension: '.py',
      cwdPropertyName: 'cwd',
      header: isNuclideEnvironment() ? /*#__PURE__*/React.createElement("p", null, "This is intended to debug python script files.", /*#__PURE__*/React.createElement("br", null), "To debug buck targets, you should", ' ', /*#__PURE__*/React.createElement("a", {
        href: NUCLIDE_PYTHON_DEBUGGER_DEX_URI
      }, "use the buck toolbar instead"), ".") : null,

      getProcessName(values) {
        let processName = values.program;
        const lastSlash = processName.lastIndexOf('/');

        if (lastSlash >= 0) {
          processName = processName.substring(lastSlash + 1, processName.length);
        }

        processName += ' (Python)';
        return processName;
      }

    },
    attach: null
  };
}

function isNuclideEnvironment() {
  return atom.packages.isPackageLoaded('nuclide');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,