// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const React = require("react");

class PostOffice extends React.Component {
  constructor(props) {
    super(props);

    this.handleMessages = ev => __awaiter(this, void 0, void 0, function* () {
      if (this.props) {
        const msg = ev.data;

        if (msg) {
          this.props.messageHandlers.forEach(h => {
            h.handleMessage(msg.type, msg.payload);
          });
        }
      }
    });
  }

  static canSendMessages() {
    if (PostOffice.acquireApi()) {
      return true;
    }

    return false;
  }

  static sendMessage(message) {
    if (PostOffice.canSendMessages()) {
      const api = PostOffice.acquireApi();

      if (api) {
        api.postMessage(message);
      }
    }
  }

  static acquireApi() {
    // Only do this once as it crashes if we ask more than once
    if (!PostOffice.vscodeApi && // tslint:disable-next-line:no-typeof-undefined
    typeof acquireVsCodeApi !== 'undefined') {
      PostOffice.vscodeApi = acquireVsCodeApi();
    }

    return PostOffice.vscodeApi;
  }

  componentDidMount() {
    window.addEventListener('message', this.handleMessages);
  }

  componentWillUnmount() {
    window.removeEventListener('message', this.handleMessages);
  }

  render() {
    return null;
  }

}

exports.PostOffice = PostOffice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3RPZmZpY2UuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIlJlYWN0IiwicmVxdWlyZSIsIlBvc3RPZmZpY2UiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiaGFuZGxlTWVzc2FnZXMiLCJldiIsIm1zZyIsImRhdGEiLCJtZXNzYWdlSGFuZGxlcnMiLCJmb3JFYWNoIiwiaCIsImhhbmRsZU1lc3NhZ2UiLCJ0eXBlIiwicGF5bG9hZCIsImNhblNlbmRNZXNzYWdlcyIsImFjcXVpcmVBcGkiLCJzZW5kTWVzc2FnZSIsIm1lc3NhZ2UiLCJhcGkiLCJwb3N0TWVzc2FnZSIsInZzY29kZUFwaSIsImFjcXVpcmVWc0NvZGVBcGkiLCJjb21wb25lbnREaWRNb3VudCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW5kZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNO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aUIsR0FBRztBQUNoQkMsSUFBQUEsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QixTQUF4QixFQUFtQyxLQUFLcEIsY0FBeEM7QUFDSDs7QUFDRHFCLEVBQUFBLG9CQUFvQixHQUFHO0FBQ25CRixJQUFBQSxNQUFNLENBQUNHLG1CQUFQLENBQTJCLFNBQTNCLEVBQXNDLEtBQUt0QixjQUEzQztBQUNIOztBQUNEdUIsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsV0FBTyxJQUFQO0FBQ0g7O0FBN0NvQzs7QUErQ3pDOUIsT0FBTyxDQUFDRyxVQUFSLEdBQXFCQSxVQUFyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcclxuY2xhc3MgUG9zdE9mZmljZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLmhhbmRsZU1lc3NhZ2VzID0gKGV2KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBldi5kYXRhO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMubWVzc2FnZUhhbmRsZXJzLmZvckVhY2goKGgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaC5oYW5kbGVNZXNzYWdlKG1zZy50eXBlLCBtc2cucGF5bG9hZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjYW5TZW5kTWVzc2FnZXMoKSB7XHJcbiAgICAgICAgaWYgKFBvc3RPZmZpY2UuYWNxdWlyZUFwaSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgc2VuZE1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgICAgIGlmIChQb3N0T2ZmaWNlLmNhblNlbmRNZXNzYWdlcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFwaSA9IFBvc3RPZmZpY2UuYWNxdWlyZUFwaSgpO1xyXG4gICAgICAgICAgICBpZiAoYXBpKSB7XHJcbiAgICAgICAgICAgICAgICBhcGkucG9zdE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgYWNxdWlyZUFwaSgpIHtcclxuICAgICAgICAvLyBPbmx5IGRvIHRoaXMgb25jZSBhcyBpdCBjcmFzaGVzIGlmIHdlIGFzayBtb3JlIHRoYW4gb25jZVxyXG4gICAgICAgIGlmICghUG9zdE9mZmljZS52c2NvZGVBcGkgJiZcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXR5cGVvZi11bmRlZmluZWRcclxuICAgICAgICAgICAgdHlwZW9mIGFjcXVpcmVWc0NvZGVBcGkgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIFBvc3RPZmZpY2UudnNjb2RlQXBpID0gYWNxdWlyZVZzQ29kZUFwaSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUG9zdE9mZmljZS52c2NvZGVBcGk7XHJcbiAgICB9XHJcbiAgICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMuaGFuZGxlTWVzc2FnZXMpO1xyXG4gICAgfVxyXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLmhhbmRsZU1lc3NhZ2VzKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlBvc3RPZmZpY2UgPSBQb3N0T2ZmaWNlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3N0T2ZmaWNlLmpzLm1hcCJdfQ==