/* tslint:disable */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
}); // This code is from @nteract/transforms-full except without the Vega transforms:
// https://github.com/nteract/nteract/blob/v0.12.2/packages/transforms-full/src/index.js .
// Vega transforms mess up our npm pkg install because they rely on the npm canvas module that needs
// to be built on each system.

const transform_plotly_1 = require("@nteract/transform-plotly");

const transform_geojson_1 = require("@nteract/transform-geojson");

const transform_model_debug_1 = require("@nteract/transform-model-debug");

const transform_dataresource_1 = require("@nteract/transform-dataresource"); // import { VegaLite1, VegaLite2, Vega2, Vega3 } from "@nteract/transform-vega";


const transforms_1 = require("@nteract/transforms");

exports.registerTransform = transforms_1.registerTransform;
exports.richestMimetype = transforms_1.richestMimetype;
const additionalTransforms = [transform_dataresource_1.default, transform_model_debug_1.default, transform_plotly_1.PlotlyNullTransform, transform_plotly_1.default, transform_geojson_1.default];
const {
  transforms,
  displayOrder
} = additionalTransforms.reduce(transforms_1.registerTransform, {
  transforms: transforms_1.standardTransforms,
  displayOrder: transforms_1.standardDisplayOrder
});
exports.transforms = transforms;
exports.displayOrder = displayOrder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybXMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0cmFuc2Zvcm1fcGxvdGx5XzEiLCJyZXF1aXJlIiwidHJhbnNmb3JtX2dlb2pzb25fMSIsInRyYW5zZm9ybV9tb2RlbF9kZWJ1Z18xIiwidHJhbnNmb3JtX2RhdGFyZXNvdXJjZV8xIiwidHJhbnNmb3Jtc18xIiwicmVnaXN0ZXJUcmFuc2Zvcm0iLCJyaWNoZXN0TWltZXR5cGUiLCJhZGRpdGlvbmFsVHJhbnNmb3JtcyIsImRlZmF1bHQiLCJQbG90bHlOdWxsVHJhbnNmb3JtIiwidHJhbnNmb3JtcyIsImRpc3BsYXlPcmRlciIsInJlZHVjZSIsInN0YW5kYXJkVHJhbnNmb3JtcyIsInN0YW5kYXJkRGlzcGxheU9yZGVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDLEUsQ0FDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR0MsT0FBTyxDQUFDLDJCQUFELENBQWxDOztBQUNBLE1BQU1DLG1CQUFtQixHQUFHRCxPQUFPLENBQUMsNEJBQUQsQ0FBbkM7O0FBQ0EsTUFBTUUsdUJBQXVCLEdBQUdGLE9BQU8sQ0FBQyxnQ0FBRCxDQUF2Qzs7QUFDQSxNQUFNRyx3QkFBd0IsR0FBR0gsT0FBTyxDQUFDLGlDQUFELENBQXhDLEMsQ0FDQTs7O0FBQ0EsTUFBTUksWUFBWSxHQUFHSixPQUFPLENBQUMscUJBQUQsQ0FBNUI7O0FBQ0FILE9BQU8sQ0FBQ1EsaUJBQVIsR0FBNEJELFlBQVksQ0FBQ0MsaUJBQXpDO0FBQ0FSLE9BQU8sQ0FBQ1MsZUFBUixHQUEwQkYsWUFBWSxDQUFDRSxlQUF2QztBQUNBLE1BQU1DLG9CQUFvQixHQUFHLENBQ3pCSix3QkFBd0IsQ0FBQ0ssT0FEQSxFQUV6Qk4sdUJBQXVCLENBQUNNLE9BRkMsRUFHekJULGtCQUFrQixDQUFDVSxtQkFITSxFQUl6QlYsa0JBQWtCLENBQUNTLE9BSk0sRUFLekJQLG1CQUFtQixDQUFDTyxPQUxLLENBQTdCO0FBT0EsTUFBTTtBQUFFRSxFQUFBQSxVQUFGO0FBQWNDLEVBQUFBO0FBQWQsSUFBK0JKLG9CQUFvQixDQUFDSyxNQUFyQixDQUE0QlIsWUFBWSxDQUFDQyxpQkFBekMsRUFBNEQ7QUFDN0ZLLEVBQUFBLFVBQVUsRUFBRU4sWUFBWSxDQUFDUyxrQkFEb0U7QUFFN0ZGLEVBQUFBLFlBQVksRUFBRVAsWUFBWSxDQUFDVTtBQUZrRSxDQUE1RCxDQUFyQztBQUlBakIsT0FBTyxDQUFDYSxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBYixPQUFPLENBQUNjLFlBQVIsR0FBdUJBLFlBQXZCIiwic291cmNlc0NvbnRlbnQiOlsiLyogdHNsaW50OmRpc2FibGUgKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIFRoaXMgY29kZSBpcyBmcm9tIEBudGVyYWN0L3RyYW5zZm9ybXMtZnVsbCBleGNlcHQgd2l0aG91dCB0aGUgVmVnYSB0cmFuc2Zvcm1zOlxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbnRlcmFjdC9udGVyYWN0L2Jsb2IvdjAuMTIuMi9wYWNrYWdlcy90cmFuc2Zvcm1zLWZ1bGwvc3JjL2luZGV4LmpzIC5cclxuLy8gVmVnYSB0cmFuc2Zvcm1zIG1lc3MgdXAgb3VyIG5wbSBwa2cgaW5zdGFsbCBiZWNhdXNlIHRoZXkgcmVseSBvbiB0aGUgbnBtIGNhbnZhcyBtb2R1bGUgdGhhdCBuZWVkc1xyXG4vLyB0byBiZSBidWlsdCBvbiBlYWNoIHN5c3RlbS5cclxuY29uc3QgdHJhbnNmb3JtX3Bsb3RseV8xID0gcmVxdWlyZShcIkBudGVyYWN0L3RyYW5zZm9ybS1wbG90bHlcIik7XHJcbmNvbnN0IHRyYW5zZm9ybV9nZW9qc29uXzEgPSByZXF1aXJlKFwiQG50ZXJhY3QvdHJhbnNmb3JtLWdlb2pzb25cIik7XHJcbmNvbnN0IHRyYW5zZm9ybV9tb2RlbF9kZWJ1Z18xID0gcmVxdWlyZShcIkBudGVyYWN0L3RyYW5zZm9ybS1tb2RlbC1kZWJ1Z1wiKTtcclxuY29uc3QgdHJhbnNmb3JtX2RhdGFyZXNvdXJjZV8xID0gcmVxdWlyZShcIkBudGVyYWN0L3RyYW5zZm9ybS1kYXRhcmVzb3VyY2VcIik7XHJcbi8vIGltcG9ydCB7IFZlZ2FMaXRlMSwgVmVnYUxpdGUyLCBWZWdhMiwgVmVnYTMgfSBmcm9tIFwiQG50ZXJhY3QvdHJhbnNmb3JtLXZlZ2FcIjtcclxuY29uc3QgdHJhbnNmb3Jtc18xID0gcmVxdWlyZShcIkBudGVyYWN0L3RyYW5zZm9ybXNcIik7XHJcbmV4cG9ydHMucmVnaXN0ZXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1zXzEucmVnaXN0ZXJUcmFuc2Zvcm07XHJcbmV4cG9ydHMucmljaGVzdE1pbWV0eXBlID0gdHJhbnNmb3Jtc18xLnJpY2hlc3RNaW1ldHlwZTtcclxuY29uc3QgYWRkaXRpb25hbFRyYW5zZm9ybXMgPSBbXHJcbiAgICB0cmFuc2Zvcm1fZGF0YXJlc291cmNlXzEuZGVmYXVsdCxcclxuICAgIHRyYW5zZm9ybV9tb2RlbF9kZWJ1Z18xLmRlZmF1bHQsXHJcbiAgICB0cmFuc2Zvcm1fcGxvdGx5XzEuUGxvdGx5TnVsbFRyYW5zZm9ybSxcclxuICAgIHRyYW5zZm9ybV9wbG90bHlfMS5kZWZhdWx0LFxyXG4gICAgdHJhbnNmb3JtX2dlb2pzb25fMS5kZWZhdWx0LFxyXG5dO1xyXG5jb25zdCB7IHRyYW5zZm9ybXMsIGRpc3BsYXlPcmRlciB9ID0gYWRkaXRpb25hbFRyYW5zZm9ybXMucmVkdWNlKHRyYW5zZm9ybXNfMS5yZWdpc3RlclRyYW5zZm9ybSwge1xyXG4gICAgdHJhbnNmb3JtczogdHJhbnNmb3Jtc18xLnN0YW5kYXJkVHJhbnNmb3JtcyxcclxuICAgIGRpc3BsYXlPcmRlcjogdHJhbnNmb3Jtc18xLnN0YW5kYXJkRGlzcGxheU9yZGVyXHJcbn0pO1xyXG5leHBvcnRzLnRyYW5zZm9ybXMgPSB0cmFuc2Zvcm1zO1xyXG5leHBvcnRzLmRpc3BsYXlPcmRlciA9IGRpc3BsYXlPcmRlcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNmb3Jtcy5qcy5tYXAiXX0=