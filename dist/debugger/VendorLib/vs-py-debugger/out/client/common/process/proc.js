"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-any

const child_process_1 = require("child_process");

const Observable_1 = require("rxjs/Observable");

const async_1 = require("../utils/async");

const constants_1 = require("./constants");

const types_1 = require("./types");

class ProcessService {
  constructor(decoder, env) {
    this.decoder = decoder;
    this.env = env;
  }

  static isAlive(pid) {
    try {
      process.kill(pid, 0);
      return true;
    } catch (_a) {
      return false;
    }
  }

  static kill(pid) {
    // tslint:disable-next-line:no-require-imports
    const killProcessTree = require('tree-kill');

    try {
      killProcessTree(pid);
    } catch (_a) {// Ignore.
    }
  }

  execObservable(file, args, options = {}) {
    const encoding = options.encoding = typeof options.encoding === 'string' && options.encoding.length > 0 ? options.encoding : constants_1.DEFAULT_ENCODING;
    delete options.encoding;
    const spawnOptions = Object.assign({}, options);

    if (!spawnOptions.env || Object.keys(spawnOptions).length === 0) {
      const env = this.env ? this.env : process.env;
      spawnOptions.env = Object.assign({}, env);
    } // Always ensure we have unbuffered output.


    spawnOptions.env.PYTHONUNBUFFERED = '1';

    if (!spawnOptions.env.PYTHONIOENCODING) {
      spawnOptions.env.PYTHONIOENCODING = 'utf-8';
    }

    const proc = child_process_1.spawn(file, args, spawnOptions);
    let procExited = false;
    const output = new Observable_1.Observable(subscriber => {
      const disposables = [];

      const on = (ee, name, fn) => {
        ee.on(name, fn);
        disposables.push({
          dispose: () => ee.removeListener(name, fn)
        });
      };

      if (options.token) {
        disposables.push(options.token.onCancellationRequested(() => {
          if (!procExited && !proc.killed) {
            proc.kill();
            procExited = true;
          }
        }));
      }

      const sendOutput = (source, data) => {
        const out = this.decoder.decode([data], encoding);

        if (source === 'stderr' && options.throwOnStdErr) {
          subscriber.error(new types_1.StdErrError(out));
        } else {
          subscriber.next({
            source,
            out: out
          });
        }
      };

      on(proc.stdout, 'data', data => sendOutput('stdout', data));
      on(proc.stderr, 'data', data => sendOutput('stderr', data));
      proc.once('close', () => {
        procExited = true;
        subscriber.complete();
        disposables.forEach(disposable => disposable.dispose());
      });
      proc.once('error', ex => {
        procExited = true;
        subscriber.error(ex);
        disposables.forEach(disposable => disposable.dispose());
      });
    });
    return {
      proc,
      out: output
    };
  }

  exec(file, args, options = {}) {
    const encoding = options.encoding = typeof options.encoding === 'string' && options.encoding.length > 0 ? options.encoding : constants_1.DEFAULT_ENCODING;
    delete options.encoding;
    const spawnOptions = Object.assign({}, options);

    if (!spawnOptions.env || Object.keys(spawnOptions).length === 0) {
      const env = this.env ? this.env : process.env;
      spawnOptions.env = Object.assign({}, env);
    } // Always ensure we have unbuffered output.


    spawnOptions.env.PYTHONUNBUFFERED = '1';

    if (!spawnOptions.env.PYTHONIOENCODING) {
      spawnOptions.env.PYTHONIOENCODING = 'utf-8';
    }

    const proc = child_process_1.spawn(file, args, spawnOptions);
    const deferred = async_1.createDeferred();
    const disposables = [];

    const on = (ee, name, fn) => {
      ee.on(name, fn);
      disposables.push({
        dispose: () => ee.removeListener(name, fn)
      });
    };

    if (options.token) {
      disposables.push(options.token.onCancellationRequested(() => {
        if (!proc.killed && !deferred.completed) {
          proc.kill();
        }
      }));
    }

    const stdoutBuffers = [];
    on(proc.stdout, 'data', data => stdoutBuffers.push(data));
    const stderrBuffers = [];
    on(proc.stderr, 'data', data => {
      if (options.mergeStdOutErr) {
        stdoutBuffers.push(data);
        stderrBuffers.push(data);
      } else {
        stderrBuffers.push(data);
      }
    });
    proc.once('close', () => {
      if (deferred.completed) {
        return;
      }

      const stderr = stderrBuffers.length === 0 ? undefined : this.decoder.decode(stderrBuffers, encoding);

      if (stderr && stderr.length > 0 && options.throwOnStdErr) {
        deferred.reject(new types_1.StdErrError(stderr));
      } else {
        const stdout = this.decoder.decode(stdoutBuffers, encoding);
        deferred.resolve({
          stdout,
          stderr
        });
      }

      disposables.forEach(disposable => disposable.dispose());
    });
    proc.once('error', ex => {
      deferred.reject(ex);
      disposables.forEach(disposable => disposable.dispose());
    });
    return deferred.promise;
  }

}

exports.ProcessService = ProcessService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2MuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjaGlsZF9wcm9jZXNzXzEiLCJyZXF1aXJlIiwiT2JzZXJ2YWJsZV8xIiwiYXN5bmNfMSIsImNvbnN0YW50c18xIiwidHlwZXNfMSIsIlByb2Nlc3NTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJkZWNvZGVyIiwiZW52IiwiaXNBbGl2ZSIsInBpZCIsInByb2Nlc3MiLCJraWxsIiwiX2EiLCJraWxsUHJvY2Vzc1RyZWUiLCJleGVjT2JzZXJ2YWJsZSIsImZpbGUiLCJhcmdzIiwib3B0aW9ucyIsImVuY29kaW5nIiwibGVuZ3RoIiwiREVGQVVMVF9FTkNPRElORyIsInNwYXduT3B0aW9ucyIsImFzc2lnbiIsImtleXMiLCJQWVRIT05VTkJVRkZFUkVEIiwiUFlUSE9OSU9FTkNPRElORyIsInByb2MiLCJzcGF3biIsInByb2NFeGl0ZWQiLCJvdXRwdXQiLCJPYnNlcnZhYmxlIiwic3Vic2NyaWJlciIsImRpc3Bvc2FibGVzIiwib24iLCJlZSIsIm5hbWUiLCJmbiIsInB1c2giLCJkaXNwb3NlIiwicmVtb3ZlTGlzdGVuZXIiLCJ0b2tlbiIsIm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkIiwia2lsbGVkIiwic2VuZE91dHB1dCIsInNvdXJjZSIsImRhdGEiLCJvdXQiLCJkZWNvZGUiLCJ0aHJvd09uU3RkRXJyIiwiZXJyb3IiLCJTdGRFcnJFcnJvciIsIm5leHQiLCJzdGRvdXQiLCJzdGRlcnIiLCJvbmNlIiwiY29tcGxldGUiLCJmb3JFYWNoIiwiZGlzcG9zYWJsZSIsImV4IiwiZXhlYyIsImRlZmVycmVkIiwiY3JlYXRlRGVmZXJyZWQiLCJjb21wbGV0ZWQiLCJzdGRvdXRCdWZmZXJzIiwic3RkZXJyQnVmZmVycyIsIm1lcmdlU3RkT3V0RXJyIiwidW5kZWZpbmVkIiwicmVqZWN0IiwicmVzb2x2ZSIsInByb21pc2UiXSwibWFwcGluZ3MiOiJBQUFB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T0FBTCxDQUFheUMsTUFBYixDQUFvQmlCLGFBQXBCLEVBQW1DOUMsUUFBbkMsQ0FBeEQ7O0FBQ0EsVUFBSW1DLE1BQU0sSUFBSUEsTUFBTSxDQUFDbEMsTUFBUCxHQUFnQixDQUExQixJQUErQkYsT0FBTyxDQUFDK0IsYUFBM0MsRUFBMEQ7QUFDdERZLFFBQUFBLFFBQVEsQ0FBQ08sTUFBVCxDQUFnQixJQUFJaEUsT0FBTyxDQUFDK0MsV0FBWixDQUF3QkcsTUFBeEIsQ0FBaEI7QUFDSCxPQUZELE1BR0s7QUFDRCxjQUFNRCxNQUFNLEdBQUcsS0FBSzlDLE9BQUwsQ0FBYXlDLE1BQWIsQ0FBb0JnQixhQUFwQixFQUFtQzdDLFFBQW5DLENBQWY7QUFDQTBDLFFBQUFBLFFBQVEsQ0FBQ1EsT0FBVCxDQUFpQjtBQUFFaEIsVUFBQUEsTUFBRjtBQUFVQyxVQUFBQTtBQUFWLFNBQWpCO0FBQ0g7O0FBQ0RyQixNQUFBQSxXQUFXLENBQUN3QixPQUFaLENBQW9CQyxVQUFVLElBQUlBLFVBQVUsQ0FBQ25CLE9BQVgsRUFBbEM7QUFDSCxLQWJEO0FBY0FaLElBQUFBLElBQUksQ0FBQzRCLElBQUwsQ0FBVSxPQUFWLEVBQW1CSSxFQUFFLElBQUk7QUFDckJFLE1BQUFBLFFBQVEsQ0FBQ08sTUFBVCxDQUFnQlQsRUFBaEI7QUFDQTFCLE1BQUFBLFdBQVcsQ0FBQ3dCLE9BQVosQ0FBb0JDLFVBQVUsSUFBSUEsVUFBVSxDQUFDbkIsT0FBWCxFQUFsQztBQUNILEtBSEQ7QUFJQSxXQUFPc0IsUUFBUSxDQUFDUyxPQUFoQjtBQUNIOztBQXZJZ0I7O0FBeUlyQnpFLE9BQU8sQ0FBQ1EsY0FBUixHQUF5QkEsY0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1hbnlcclxuY29uc3QgY2hpbGRfcHJvY2Vzc18xID0gcmVxdWlyZShcImNoaWxkX3Byb2Nlc3NcIik7XHJcbmNvbnN0IE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCJyeGpzL09ic2VydmFibGVcIik7XHJcbmNvbnN0IGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvYXN5bmNcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XHJcbmNsYXNzIFByb2Nlc3NTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGRlY29kZXIsIGVudikge1xyXG4gICAgICAgIHRoaXMuZGVjb2RlciA9IGRlY29kZXI7XHJcbiAgICAgICAgdGhpcy5lbnYgPSBlbnY7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgaXNBbGl2ZShwaWQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBwcm9jZXNzLmtpbGwocGlkLCAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3RhdGljIGtpbGwocGlkKSB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXJlcXVpcmUtaW1wb3J0c1xyXG4gICAgICAgIGNvbnN0IGtpbGxQcm9jZXNzVHJlZSA9IHJlcXVpcmUoJ3RyZWUta2lsbCcpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGtpbGxQcm9jZXNzVHJlZShwaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgLy8gSWdub3JlLlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGV4ZWNPYnNlcnZhYmxlKGZpbGUsIGFyZ3MsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IGVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZyA9IHR5cGVvZiBvcHRpb25zLmVuY29kaW5nID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmVuY29kaW5nLmxlbmd0aCA+IDAgPyBvcHRpb25zLmVuY29kaW5nIDogY29uc3RhbnRzXzEuREVGQVVMVF9FTkNPRElORztcclxuICAgICAgICBkZWxldGUgb3B0aW9ucy5lbmNvZGluZztcclxuICAgICAgICBjb25zdCBzcGF3bk9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcclxuICAgICAgICBpZiAoIXNwYXduT3B0aW9ucy5lbnYgfHwgT2JqZWN0LmtleXMoc3Bhd25PcHRpb25zKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY29uc3QgZW52ID0gdGhpcy5lbnYgPyB0aGlzLmVudiA6IHByb2Nlc3MuZW52O1xyXG4gICAgICAgICAgICBzcGF3bk9wdGlvbnMuZW52ID0gT2JqZWN0LmFzc2lnbih7fSwgZW52KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWx3YXlzIGVuc3VyZSB3ZSBoYXZlIHVuYnVmZmVyZWQgb3V0cHV0LlxyXG4gICAgICAgIHNwYXduT3B0aW9ucy5lbnYuUFlUSE9OVU5CVUZGRVJFRCA9ICcxJztcclxuICAgICAgICBpZiAoIXNwYXduT3B0aW9ucy5lbnYuUFlUSE9OSU9FTkNPRElORykge1xyXG4gICAgICAgICAgICBzcGF3bk9wdGlvbnMuZW52LlBZVEhPTklPRU5DT0RJTkcgPSAndXRmLTgnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwcm9jID0gY2hpbGRfcHJvY2Vzc18xLnNwYXduKGZpbGUsIGFyZ3MsIHNwYXduT3B0aW9ucyk7XHJcbiAgICAgICAgbGV0IHByb2NFeGl0ZWQgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoc3Vic2NyaWJlciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2FibGVzID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IG9uID0gKGVlLCBuYW1lLCBmbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgZWUub24obmFtZSwgZm4pO1xyXG4gICAgICAgICAgICAgICAgZGlzcG9zYWJsZXMucHVzaCh7IGRpc3Bvc2U6ICgpID0+IGVlLnJlbW92ZUxpc3RlbmVyKG5hbWUsIGZuKSB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLnB1c2gob3B0aW9ucy50b2tlbi5vbkNhbmNlbGxhdGlvblJlcXVlc3RlZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9jRXhpdGVkICYmICFwcm9jLmtpbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jLmtpbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY0V4aXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbmRPdXRwdXQgPSAoc291cmNlLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdXQgPSB0aGlzLmRlY29kZXIuZGVjb2RlKFtkYXRhXSwgZW5jb2RpbmcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZSA9PT0gJ3N0ZGVycicgJiYgb3B0aW9ucy50aHJvd09uU3RkRXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihuZXcgdHlwZXNfMS5TdGRFcnJFcnJvcihvdXQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh7IHNvdXJjZSwgb3V0OiBvdXQgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIG9uKHByb2Muc3Rkb3V0LCAnZGF0YScsIChkYXRhKSA9PiBzZW5kT3V0cHV0KCdzdGRvdXQnLCBkYXRhKSk7XHJcbiAgICAgICAgICAgIG9uKHByb2Muc3RkZXJyLCAnZGF0YScsIChkYXRhKSA9PiBzZW5kT3V0cHV0KCdzdGRlcnInLCBkYXRhKSk7XHJcbiAgICAgICAgICAgIHByb2Mub25jZSgnY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcm9jRXhpdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLmZvckVhY2goZGlzcG9zYWJsZSA9PiBkaXNwb3NhYmxlLmRpc3Bvc2UoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBwcm9jLm9uY2UoJ2Vycm9yJywgZXggPT4ge1xyXG4gICAgICAgICAgICAgICAgcHJvY0V4aXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGV4KTtcclxuICAgICAgICAgICAgICAgIGRpc3Bvc2FibGVzLmZvckVhY2goZGlzcG9zYWJsZSA9PiBkaXNwb3NhYmxlLmRpc3Bvc2UoKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB7IHByb2MsIG91dDogb3V0cHV0IH07XHJcbiAgICB9XHJcbiAgICBleGVjKGZpbGUsIGFyZ3MsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IGVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZyA9IHR5cGVvZiBvcHRpb25zLmVuY29kaW5nID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmVuY29kaW5nLmxlbmd0aCA+IDAgPyBvcHRpb25zLmVuY29kaW5nIDogY29uc3RhbnRzXzEuREVGQVVMVF9FTkNPRElORztcclxuICAgICAgICBkZWxldGUgb3B0aW9ucy5lbmNvZGluZztcclxuICAgICAgICBjb25zdCBzcGF3bk9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcclxuICAgICAgICBpZiAoIXNwYXduT3B0aW9ucy5lbnYgfHwgT2JqZWN0LmtleXMoc3Bhd25PcHRpb25zKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY29uc3QgZW52ID0gdGhpcy5lbnYgPyB0aGlzLmVudiA6IHByb2Nlc3MuZW52O1xyXG4gICAgICAgICAgICBzcGF3bk9wdGlvbnMuZW52ID0gT2JqZWN0LmFzc2lnbih7fSwgZW52KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWx3YXlzIGVuc3VyZSB3ZSBoYXZlIHVuYnVmZmVyZWQgb3V0cHV0LlxyXG4gICAgICAgIHNwYXduT3B0aW9ucy5lbnYuUFlUSE9OVU5CVUZGRVJFRCA9ICcxJztcclxuICAgICAgICBpZiAoIXNwYXduT3B0aW9ucy5lbnYuUFlUSE9OSU9FTkNPRElORykge1xyXG4gICAgICAgICAgICBzcGF3bk9wdGlvbnMuZW52LlBZVEhPTklPRU5DT0RJTkcgPSAndXRmLTgnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwcm9jID0gY2hpbGRfcHJvY2Vzc18xLnNwYXduKGZpbGUsIGFyZ3MsIHNwYXduT3B0aW9ucyk7XHJcbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBhc3luY18xLmNyZWF0ZURlZmVycmVkKCk7XHJcbiAgICAgICAgY29uc3QgZGlzcG9zYWJsZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBvbiA9IChlZSwgbmFtZSwgZm4pID0+IHtcclxuICAgICAgICAgICAgZWUub24obmFtZSwgZm4pO1xyXG4gICAgICAgICAgICBkaXNwb3NhYmxlcy5wdXNoKHsgZGlzcG9zZTogKCkgPT4gZWUucmVtb3ZlTGlzdGVuZXIobmFtZSwgZm4pIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudG9rZW4pIHtcclxuICAgICAgICAgICAgZGlzcG9zYWJsZXMucHVzaChvcHRpb25zLnRva2VuLm9uQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvYy5raWxsZWQgJiYgIWRlZmVycmVkLmNvbXBsZXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2Mua2lsbCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHN0ZG91dEJ1ZmZlcnMgPSBbXTtcclxuICAgICAgICBvbihwcm9jLnN0ZG91dCwgJ2RhdGEnLCAoZGF0YSkgPT4gc3Rkb3V0QnVmZmVycy5wdXNoKGRhdGEpKTtcclxuICAgICAgICBjb25zdCBzdGRlcnJCdWZmZXJzID0gW107XHJcbiAgICAgICAgb24ocHJvYy5zdGRlcnIsICdkYXRhJywgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWVyZ2VTdGRPdXRFcnIpIHtcclxuICAgICAgICAgICAgICAgIHN0ZG91dEJ1ZmZlcnMucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgICAgIHN0ZGVyckJ1ZmZlcnMucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN0ZGVyckJ1ZmZlcnMucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHByb2Mub25jZSgnY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkZWZlcnJlZC5jb21wbGV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBzdGRlcnIgPSBzdGRlcnJCdWZmZXJzLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHRoaXMuZGVjb2Rlci5kZWNvZGUoc3RkZXJyQnVmZmVycywgZW5jb2RpbmcpO1xyXG4gICAgICAgICAgICBpZiAoc3RkZXJyICYmIHN0ZGVyci5sZW5ndGggPiAwICYmIG9wdGlvbnMudGhyb3dPblN0ZEVycikge1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KG5ldyB0eXBlc18xLlN0ZEVyckVycm9yKHN0ZGVycikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3Rkb3V0ID0gdGhpcy5kZWNvZGVyLmRlY29kZShzdGRvdXRCdWZmZXJzLCBlbmNvZGluZyk7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHsgc3Rkb3V0LCBzdGRlcnIgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGlzcG9zYWJsZXMuZm9yRWFjaChkaXNwb3NhYmxlID0+IGRpc3Bvc2FibGUuZGlzcG9zZSgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBwcm9jLm9uY2UoJ2Vycm9yJywgZXggPT4ge1xyXG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXgpO1xyXG4gICAgICAgICAgICBkaXNwb3NhYmxlcy5mb3JFYWNoKGRpc3Bvc2FibGUgPT4gZGlzcG9zYWJsZS5kaXNwb3NlKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuUHJvY2Vzc1NlcnZpY2UgPSBQcm9jZXNzU2VydmljZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvYy5qcy5tYXAiXX0=