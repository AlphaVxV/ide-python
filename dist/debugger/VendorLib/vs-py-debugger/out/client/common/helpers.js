// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const constants_1 = require("./constants");

const moduleNotInstalledError_1 = require("./errors/moduleNotInstalledError");

function isNotInstalledError(error) {
  const isError = typeof error === 'object' && error !== null; // tslint:disable-next-line:no-any

  const errorObj = error;

  if (!isError) {
    return false;
  }

  if (error instanceof moduleNotInstalledError_1.ModuleNotInstalledError) {
    return true;
  }

  const isModuleNoInstalledError = error.message.indexOf('No module named') >= 0;
  return errorObj.code === 'ENOENT' || errorObj.code === 127 || isModuleNoInstalledError;
}

exports.isNotInstalledError = isNotInstalledError;

function skipIfTest(isAsyncFunction) {
  // tslint:disable-next-line:no-function-expression no-any
  return function (_, __, descriptor) {
    const originalMethod = descriptor.value; // tslint:disable-next-line:no-function-expression no-any

    descriptor.value = function (...args) {
      if (constants_1.isTestExecution()) {
        return isAsyncFunction ? Promise.resolve() : undefined;
      } // tslint:disable-next-line:no-invalid-this no-use-before-declare no-unsafe-any


      return originalMethod.apply(this, args);
    };

    return descriptor;
  };
}

exports.skipIfTest = skipIfTest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjb25zdGFudHNfMSIsInJlcXVpcmUiLCJtb2R1bGVOb3RJbnN0YWxsZWRFcnJvcl8xIiwiaXNOb3RJbnN0YWxsZWRFcnJvciIsImVycm9yIiwiaXNFcnJvciIsImVycm9yT2JqIiwiTW9kdWxlTm90SW5zdGFsbGVkRXJyb3IiLCJpc01vZHVsZU5vSW5zdGFsbGVkRXJyb3IiLCJtZXNzYWdlIiwiaW5kZXhPZiIsImNvZGUiLCJza2lwSWZUZXN0IiwiaXNBc3luY0Z1bmN0aW9uIiwiXyIsIl9fIiwiZGVzY3JpcHRvciIsIm9yaWdpbmFsTWV0aG9kIiwiYXJncyIsImlzVGVzdEV4ZWN1dGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidW5kZWZpbmVkIiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxXQUFXLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQTNCOztBQUNBLE1BQU1DLHlCQUF5QixHQUFHRCxPQUFPLENBQUMsa0NBQUQsQ0FBekM7O0FBQ0EsU0FBU0UsbUJBQVQsQ0FBNkJDLEtBQTdCLEVBQW9DO0FBQ2hDLFFBQU1DLE9BQU8sR0FBRyxPQUFRRCxLQUFSLEtBQW1CLFFBQW5CLElBQStCQSxLQUFLLEtBQUssSUFBekQsQ0FEZ0MsQ0FFaEM7O0FBQ0EsUUFBTUUsUUFBUSxHQUFHRixLQUFqQjs7QUFDQSxNQUFJLENBQUNDLE9BQUwsRUFBYztBQUNWLFdBQU8sS0FBUDtBQUNIOztBQUNELE1BQUlELEtBQUssWUFBWUYseUJBQXlCLENBQUNLLHVCQUEvQyxFQUF3RTtBQUNwRSxXQUFPLElBQVA7QUFDSDs7QUFDRCxRQUFNQyx3QkFBd0IsR0FBR0osS0FBSyxDQUFDSyxPQUFOLENBQWNDLE9BQWQsQ0FBc0IsaUJBQXRCLEtBQTRDLENBQTdFO0FBQ0EsU0FBT0osUUFBUSxDQUFDSyxJQUFULEtBQWtCLFFBQWxCLElBQThCTCxRQUFRLENBQUNLLElBQVQsS0FBa0IsR0FBaEQsSUFBdURILHdCQUE5RDtBQUNIOztBQUNEVixPQUFPLENBQUNLLG1CQUFSLEdBQThCQSxtQkFBOUI7O0FBQ0EsU0FBU1MsVUFBVCxDQUFvQkMsZUFBcEIsRUFBcUM7QUFDakM7QUFDQSxTQUFPLFVBQVVDLENBQVYsRUFBYUMsRUFBYixFQUFpQkMsVUFBakIsRUFBNkI7QUFDaEMsVUFBTUMsY0FBYyxHQUFHRCxVQUFVLENBQUNqQixLQUFsQyxDQURnQyxDQUVoQzs7QUFDQWlCLElBQUFBLFVBQVUsQ0FBQ2pCLEtBQVgsR0FBbUIsVUFBVSxHQUFHbUIsSUFBYixFQUFtQjtBQUNsQyxVQUFJbEIsV0FBVyxDQUFDbUIsZUFBWixFQUFKLEVBQW1DO0FBQy9CLGVBQU9OLGVBQWUsR0FBR08sT0FBTyxDQUFDQyxPQUFSLEVBQUgsR0FBdUJDLFNBQTdDO0FBQ0gsT0FIaUMsQ0FJbEM7OztBQUNBLGFBQU9MLGNBQWMsQ0FBQ00sS0FBZixDQUFxQixJQUFyQixFQUEyQkwsSUFBM0IsQ0FBUDtBQUNILEtBTkQ7O0FBT0EsV0FBT0YsVUFBUDtBQUNILEdBWEQ7QUFZSDs7QUFDRGxCLE9BQU8sQ0FBQ2MsVUFBUixHQUFxQkEsVUFBckIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XHJcbmNvbnN0IG1vZHVsZU5vdEluc3RhbGxlZEVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvcnMvbW9kdWxlTm90SW5zdGFsbGVkRXJyb3JcIik7XHJcbmZ1bmN0aW9uIGlzTm90SW5zdGFsbGVkRXJyb3IoZXJyb3IpIHtcclxuICAgIGNvbnN0IGlzRXJyb3IgPSB0eXBlb2YgKGVycm9yKSA9PT0gJ29iamVjdCcgJiYgZXJyb3IgIT09IG51bGw7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICBjb25zdCBlcnJvck9iaiA9IGVycm9yO1xyXG4gICAgaWYgKCFpc0Vycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgbW9kdWxlTm90SW5zdGFsbGVkRXJyb3JfMS5Nb2R1bGVOb3RJbnN0YWxsZWRFcnJvcikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaXNNb2R1bGVOb0luc3RhbGxlZEVycm9yID0gZXJyb3IubWVzc2FnZS5pbmRleE9mKCdObyBtb2R1bGUgbmFtZWQnKSA+PSAwO1xyXG4gICAgcmV0dXJuIGVycm9yT2JqLmNvZGUgPT09ICdFTk9FTlQnIHx8IGVycm9yT2JqLmNvZGUgPT09IDEyNyB8fCBpc01vZHVsZU5vSW5zdGFsbGVkRXJyb3I7XHJcbn1cclxuZXhwb3J0cy5pc05vdEluc3RhbGxlZEVycm9yID0gaXNOb3RJbnN0YWxsZWRFcnJvcjtcclxuZnVuY3Rpb24gc2tpcElmVGVzdChpc0FzeW5jRnVuY3Rpb24pIHtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1mdW5jdGlvbi1leHByZXNzaW9uIG5vLWFueVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfLCBfXywgZGVzY3JpcHRvcikge1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gZGVzY3JpcHRvci52YWx1ZTtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZnVuY3Rpb24tZXhwcmVzc2lvbiBuby1hbnlcclxuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnN0YW50c18xLmlzVGVzdEV4ZWN1dGlvbigpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNBc3luY0Z1bmN0aW9uID8gUHJvbWlzZS5yZXNvbHZlKCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWludmFsaWQtdGhpcyBuby11c2UtYmVmb3JlLWRlY2xhcmUgbm8tdW5zYWZlLWFueVxyXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxNZXRob2QuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcclxuICAgIH07XHJcbn1cclxuZXhwb3J0cy5za2lwSWZUZXN0ID0gc2tpcElmVGVzdDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiXX0=