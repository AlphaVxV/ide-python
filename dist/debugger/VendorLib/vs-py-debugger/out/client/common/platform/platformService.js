// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const platform = require("../utils/platform");

const osinfo = require("./osinfo");

let PlatformService = class PlatformService {
  get info() {
    if (!this.cached) {
      this.cached = platform.getInfo();
    }

    return this.cached;
  }

  get pathVariableName() {
    return osinfo.getPathVariableName(this.info);
  }

  get virtualEnvBinName() {
    return osinfo.getVirtualEnvBinName(this.info);
  } // convenience methods


  get isWindows() {
    return platform.isWindows(this.info);
  }

  get isMac() {
    return platform.isMac(this.info);
  }

  get isLinux() {
    return platform.isLinux(this.info);
  }

  get is64bit() {
    return platform.is64bit(this.info);
  }

};
PlatformService = __decorate([inversify_1.injectable()], PlatformService);
exports.PlatformService = PlatformService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsYXRmb3JtU2VydmljZS5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJwbGF0Zm9ybSIsIm9zaW5mbyIsIlBsYXRmb3JtU2VydmljZSIsImluZm8iLCJjYWNoZWQiLCJnZXRJbmZvIiwicGF0aFZhcmlhYmxlTmFtZSIsImdldFBhdGhWYXJpYWJsZU5hbWUiLCJ2aXJ0dWFsRW52QmluTmFtZSIsImdldFZpcnR1YWxFbnZCaW5OYW1lIiwiaXNXaW5kb3dzIiwiaXNNYWMiLCJpc0xpbnV4IiwiaXM2NGJpdCIsImluamVjdGFibGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxVQUFVLEdBQUksVUFBUSxTQUFLQSxVQUFkLElBQTZCLFVBQVVDLFVBQVYsRUFBc0JDLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0MsSUFBbkMsRUFBeUM7QUFDbkYsTUFBSUMsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQWxCO0FBQUEsTUFBMEJDLENBQUMsR0FBR0gsQ0FBQyxHQUFHLENBQUosR0FBUUgsTUFBUixHQUFpQkUsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQUksR0FBR0ssTUFBTSxDQUFDQyx3QkFBUCxDQUFnQ1IsTUFBaEMsRUFBd0NDLEdBQXhDLENBQXZCLEdBQXNFQyxJQUFySDtBQUFBLE1BQTJITyxDQUEzSDtBQUNBLE1BQUksT0FBT0MsT0FBUCxLQUFtQixRQUFuQixJQUErQixPQUFPQSxPQUFPLENBQUNDLFFBQWYsS0FBNEIsVUFBL0QsRUFBMkVMLENBQUMsR0FBR0ksT0FBTyxDQUFDQyxRQUFSLENBQWlCWixVQUFqQixFQUE2QkMsTUFBN0IsRUFBcUNDLEdBQXJDLEVBQTBDQyxJQUExQyxDQUFKLENBQTNFLEtBQ0ssS0FBSyxJQUFJVSxDQUFDLEdBQUdiLFVBQVUsQ0FBQ00sTUFBWCxHQUFvQixDQUFqQyxFQUFvQ08sQ0FBQyxJQUFJLENBQXpDLEVBQTRDQSxDQUFDLEVBQTdDLEVBQWlELElBQUlILENBQUMsR0FBR1YsVUFBVSxDQUFDYSxDQUFELENBQWxCLEVBQXVCTixDQUFDLEdBQUcsQ0FBQ0gsQ0FBQyxHQUFHLENBQUosR0FBUU0sQ0FBQyxDQUFDSCxDQUFELENBQVQsR0FBZUgsQ0FBQyxHQUFHLENBQUosR0FBUU0sQ0FBQyxDQUFDVCxNQUFELEVBQVNDLEdBQVQsRUFBY0ssQ0FBZCxDQUFULEdBQTRCRyxDQUFDLENBQUNULE1BQUQsRUFBU0MsR0FBVCxDQUE3QyxLQUErREssQ0FBbkU7QUFDN0UsU0FBT0gsQ0FBQyxHQUFHLENBQUosSUFBU0csQ0FBVCxJQUFjQyxNQUFNLENBQUNNLGNBQVAsQ0FBc0JiLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0ssQ0FBbkMsQ0FBZCxFQUFxREEsQ0FBNUQ7QUFDSCxDQUxEOztBQU1BQyxNQUFNLENBQUNNLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLFdBQVcsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBM0I7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsbUJBQUQsQ0FBeEI7O0FBQ0EsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxJQUFJRyxlQUFlLEdBQUcsTUFBTUEsZUFBTixDQUFzQjtBQUN4QyxNQUFJQyxJQUFKLEdBQVc7QUFDUCxRQUFJLENBQUMsS0FBS0MsTUFBVixFQUFrQjtBQUNkLFdBQUtBLE1BQUwsR0FBY0osUUFBUSxDQUFDSyxPQUFULEVBQWQ7QUFDSDs7QUFDRCxXQUFPLEtBQUtELE1BQVo7QUFDSDs7QUFDRCxNQUFJRSxnQkFBSixHQUF1QjtBQUNuQixXQUFPTCxNQUFNLENBQUNNLG1CQUFQLENBQTJCLEtBQUtKLElBQWhDLENBQVA7QUFDSDs7QUFDRCxNQUFJSyxpQkFBSixHQUF3QjtBQUNwQixXQUFPUCxNQUFNLENBQUNRLG9CQUFQLENBQTRCLEtBQUtOLElBQWpDLENBQVA7QUFDSCxHQVp1QyxDQWF4Qzs7O0FBQ0EsTUFBSU8sU0FBSixHQUFnQjtBQUNaLFdBQU9WLFFBQVEsQ0FBQ1UsU0FBVCxDQUFtQixLQUFLUCxJQUF4QixDQUFQO0FBQ0g7O0FBQ0QsTUFBSVEsS0FBSixHQUFZO0FBQ1IsV0FBT1gsUUFBUSxDQUFDVyxLQUFULENBQWUsS0FBS1IsSUFBcEIsQ0FBUDtBQUNIOztBQUNELE1BQUlTLE9BQUosR0FBYztBQUNWLFdBQU9aLFFBQVEsQ0FBQ1ksT0FBVCxDQUFpQixLQUFLVCxJQUF0QixDQUFQO0FBQ0g7O0FBQ0QsTUFBSVUsT0FBSixHQUFjO0FBQ1YsV0FBT2IsUUFBUSxDQUFDYSxPQUFULENBQWlCLEtBQUtWLElBQXRCLENBQVA7QUFDSDs7QUF6QnVDLENBQTVDO0FBMkJBRCxlQUFlLEdBQUd0QixVQUFVLENBQUMsQ0FDekJrQixXQUFXLENBQUNnQixVQUFaLEVBRHlCLENBQUQsRUFFekJaLGVBRnlCLENBQTVCO0FBR0FOLE9BQU8sQ0FBQ00sZUFBUixHQUEwQkEsZUFBMUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaW52ZXJzaWZ5XzEgPSByZXF1aXJlKFwiaW52ZXJzaWZ5XCIpO1xyXG5jb25zdCBwbGF0Zm9ybSA9IHJlcXVpcmUoXCIuLi91dGlscy9wbGF0Zm9ybVwiKTtcclxuY29uc3Qgb3NpbmZvID0gcmVxdWlyZShcIi4vb3NpbmZvXCIpO1xyXG5sZXQgUGxhdGZvcm1TZXJ2aWNlID0gY2xhc3MgUGxhdGZvcm1TZXJ2aWNlIHtcclxuICAgIGdldCBpbmZvKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jYWNoZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jYWNoZWQgPSBwbGF0Zm9ybS5nZXRJbmZvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlZDtcclxuICAgIH1cclxuICAgIGdldCBwYXRoVmFyaWFibGVOYW1lKCkge1xyXG4gICAgICAgIHJldHVybiBvc2luZm8uZ2V0UGF0aFZhcmlhYmxlTmFtZSh0aGlzLmluZm8pO1xyXG4gICAgfVxyXG4gICAgZ2V0IHZpcnR1YWxFbnZCaW5OYW1lKCkge1xyXG4gICAgICAgIHJldHVybiBvc2luZm8uZ2V0VmlydHVhbEVudkJpbk5hbWUodGhpcy5pbmZvKTtcclxuICAgIH1cclxuICAgIC8vIGNvbnZlbmllbmNlIG1ldGhvZHNcclxuICAgIGdldCBpc1dpbmRvd3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHBsYXRmb3JtLmlzV2luZG93cyh0aGlzLmluZm8pO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzTWFjKCkge1xyXG4gICAgICAgIHJldHVybiBwbGF0Zm9ybS5pc01hYyh0aGlzLmluZm8pO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzTGludXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHBsYXRmb3JtLmlzTGludXgodGhpcy5pbmZvKTtcclxuICAgIH1cclxuICAgIGdldCBpczY0Yml0KCkge1xyXG4gICAgICAgIHJldHVybiBwbGF0Zm9ybS5pczY0Yml0KHRoaXMuaW5mbyk7XHJcbiAgICB9XHJcbn07XHJcblBsYXRmb3JtU2VydmljZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpXHJcbl0sIFBsYXRmb3JtU2VydmljZSk7XHJcbmV4cG9ydHMuUGxhdGZvcm1TZXJ2aWNlID0gUGxhdGZvcm1TZXJ2aWNlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGF0Zm9ybVNlcnZpY2UuanMubWFwIl19