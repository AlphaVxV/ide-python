// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

function sleep(timeout) {
  return __awaiter(this, void 0, void 0, function* () {
    return new Promise(resolve => {
      setTimeout(resolve, timeout);
    });
  });
}

exports.sleep = sleep;

class DeferredImpl {
  // tslint:disable-next-line:no-any
  constructor(scope = null) {
    this.scope = scope;
    this._resolved = false;
    this._rejected = false; // tslint:disable-next-line:promise-must-complete

    this._promise = new Promise((res, rej) => {
      this._resolve = res;
      this._reject = rej;
    });
  }

  resolve(value) {
    this._resolve.apply(this.scope ? this.scope : this, arguments);

    this._resolved = true;
  } // tslint:disable-next-line:no-any


  reject(reason) {
    this._reject.apply(this.scope ? this.scope : this, arguments);

    this._rejected = true;
  }

  get promise() {
    return this._promise;
  }

  get resolved() {
    return this._resolved;
  }

  get rejected() {
    return this._rejected;
  }

  get completed() {
    return this._rejected || this._resolved;
  }

} // tslint:disable-next-line:no-any


function createDeferred(scope = null) {
  return new DeferredImpl(scope);
}

exports.createDeferred = createDeferred;

function createDeferredFrom(...promises) {
  const deferred = createDeferred();
  Promise.all(promises).then(deferred.resolve.bind(deferred)).catch(deferred.reject.bind(deferred));
  return deferred;
}

exports.createDeferredFrom = createDeferredFrom;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jLmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJzbGVlcCIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiRGVmZXJyZWRJbXBsIiwiY29uc3RydWN0b3IiLCJzY29wZSIsIl9yZXNvbHZlZCIsIl9yZWplY3RlZCIsIl9wcm9taXNlIiwicmVzIiwicmVqIiwiX3Jlc29sdmUiLCJfcmVqZWN0IiwiYXJndW1lbnRzIiwicmVhc29uIiwicHJvbWlzZSIsInJlc29sdmVkIiwiY29tcGxldGVkIiwiY3JlYXRlRGVmZXJyZWQiLCJjcmVhdGVEZWZlcnJlZEZyb20iLCJwcm9taXNlcyIsImRlZmVycmVkIiwiYWxsIiwiYmluZCIsImNhdGNoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFBeUI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDLE9BQUQsQ0FBVCxDQUFtQkssS0FBbkIsQ0FBRCxDQUFKO0FBQWtDLE9BQXhDLENBQXlDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZO0FBQUU7O0FBQzlGLGFBQVNGLElBQVQsQ0FBY0ksTUFBZCxFQUFzQjtBQUFFQSxNQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY1QsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBckIsR0FBc0MsSUFBSU4sQ0FBSixDQUFNLFVBQVVHLE9BQVYsRUFBbUI7QUFBRUEsUUFBQUEsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBUDtBQUF3QixPQUFuRCxFQUFxRE8sSUFBckQsQ0FBMERSLFNBQTFELEVBQXFFSyxRQUFyRSxDQUF0QztBQUF1SDs7QUFDL0lILElBQUFBLElBQUksQ0FBQyxDQUFDTixTQUFTLEdBQUdBLFNBQVMsQ0FBQ2EsS0FBVixDQUFnQmhCLE9BQWhCLEVBQXlCQyxVQUFVLElBQUksRUFBdkMsQ0FBYixFQUF5RFMsSUFBekQsRUFBRCxDQUFKO0FBQ0gsR0FMTSxDQUFQO0FBTUgsQ0FQRDs7QUFRQU8sTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFWCxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxTQUFTWSxLQUFULENBQWVDLE9BQWYsRUFBd0I7QUFDcEIsU0FBT3RCLFNBQVMsQ0FBQyxJQUFELEVBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ2hELFdBQU8sSUFBSUssT0FBSixDQUFhQyxPQUFELElBQWE7QUFDNUJpQixNQUFBQSxVQUFVLENBQUNqQixPQUFELEVBQVVnQixPQUFWLENBQVY7QUFDSCxLQUZNLENBQVA7QUFHSCxHQUplLENBQWhCO0FBS0g7O0FBQ0RGLE9BQU8sQ0FBQ0MsS0FBUixHQUFnQkEsS0FBaEI7O0FBQ0EsTUFBTUcsWUFBTixDQUFtQjtBQUNmO0FBQ0FDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBSyxHQUFHLElBQVQsRUFBZTtBQUN0QixTQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxTQUFMLEdBQWlCLEtBQWpCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixLQUFqQixDQUhzQixDQUl0Qjs7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLElBQUl4QixPQUFKLENBQVksQ0FBQ3lCLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3RDLFdBQUtDLFFBQUwsR0FBZ0JGLEdBQWhCO0FBQ0EsV0FBS0csT0FBTCxHQUFlRixHQUFmO0FBQ0gsS0FIZSxDQUFoQjtBQUlIOztBQUNEekIsRUFBQUEsT0FBTyxDQUFDRyxLQUFELEVBQVE7QUFDWCxTQUFLdUIsUUFBTCxDQUFjZixLQUFkLENBQW9CLEtBQUtTLEtBQUwsR0FBYSxLQUFLQSxLQUFsQixHQUEwQixJQUE5QyxFQUFvRFEsU0FBcEQ7O0FBQ0EsU0FBS1AsU0FBTCxHQUFpQixJQUFqQjtBQUNILEdBZmMsQ0FnQmY7OztBQUNBcEIsRUFBQUEsTUFBTSxDQUFDNEIsTUFBRCxFQUFTO0FBQ1gsU0FBS0YsT0FBTCxDQUFhaEIsS0FBYixDQUFtQixLQUFLUyxLQUFMLEdBQWEsS0FBS0EsS0FBbEIsR0FBMEIsSUFBN0MsRUFBbURRLFNBQW5EOztBQUNBLFNBQUtOLFNBQUwsR0FBaUIsSUFBakI7QUFDSDs7QUFDRCxNQUFJUSxPQUFKLEdBQWM7QUFDVixXQUFPLEtBQUtQLFFBQVo7QUFDSDs7QUFDRCxNQUFJUSxRQUFKLEdBQWU7QUFDWCxXQUFPLEtBQUtWLFNBQVo7QUFDSDs7QUFDRCxNQUFJZCxRQUFKLEdBQWU7QUFDWCxXQUFPLEtBQUtlLFNBQVo7QUFDSDs7QUFDRCxNQUFJVSxTQUFKLEdBQWdCO0FBQ1osV0FBTyxLQUFLVixTQUFMLElBQWtCLEtBQUtELFNBQTlCO0FBQ0g7O0FBaENjLEMsQ0FrQ25COzs7QUFDQSxTQUFTWSxjQUFULENBQXdCYixLQUFLLEdBQUcsSUFBaEMsRUFBc0M7QUFDbEMsU0FBTyxJQUFJRixZQUFKLENBQWlCRSxLQUFqQixDQUFQO0FBQ0g7O0FBQ0ROLE9BQU8sQ0FBQ21CLGNBQVIsR0FBeUJBLGNBQXpCOztBQUNBLFNBQVNDLGtCQUFULENBQTRCLEdBQUdDLFFBQS9CLEVBQXlDO0FBQ3JDLFFBQU1DLFFBQVEsR0FBR0gsY0FBYyxFQUEvQjtBQUNBbEMsRUFBQUEsT0FBTyxDQUFDc0MsR0FBUixDQUFZRixRQUFaLEVBQ0t6QixJQURMLENBQ1UwQixRQUFRLENBQUNwQyxPQUFULENBQWlCc0MsSUFBakIsQ0FBc0JGLFFBQXRCLENBRFYsRUFFS0csS0FGTCxDQUVXSCxRQUFRLENBQUNuQyxNQUFULENBQWdCcUMsSUFBaEIsQ0FBcUJGLFFBQXJCLENBRlg7QUFHQSxTQUFPQSxRQUFQO0FBQ0g7O0FBQ0R0QixPQUFPLENBQUNvQixrQkFBUixHQUE2QkEsa0JBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmZ1bmN0aW9uIHNsZWVwKHRpbWVvdXQpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnRzLnNsZWVwID0gc2xlZXA7XHJcbmNsYXNzIERlZmVycmVkSW1wbCB7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICBjb25zdHJ1Y3RvcihzY29wZSA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XHJcbiAgICAgICAgdGhpcy5fcmVzb2x2ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9yZWplY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcm9taXNlLW11c3QtY29tcGxldGVcclxuICAgICAgICB0aGlzLl9wcm9taXNlID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXM7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlajtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJlc29sdmUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlLmFwcGx5KHRoaXMuc2NvcGUgPyB0aGlzLnNjb3BlIDogdGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLl9yZXNvbHZlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICByZWplY3QocmVhc29uKSB7XHJcbiAgICAgICAgdGhpcy5fcmVqZWN0LmFwcGx5KHRoaXMuc2NvcGUgPyB0aGlzLnNjb3BlIDogdGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLl9yZWplY3RlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBnZXQgcHJvbWlzZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcclxuICAgIH1cclxuICAgIGdldCByZXNvbHZlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZWQ7XHJcbiAgICB9XHJcbiAgICBnZXQgcmVqZWN0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlamVjdGVkO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbXBsZXRlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0ZWQgfHwgdGhpcy5fcmVzb2x2ZWQ7XHJcbiAgICB9XHJcbn1cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG5mdW5jdGlvbiBjcmVhdGVEZWZlcnJlZChzY29wZSA9IG51bGwpIHtcclxuICAgIHJldHVybiBuZXcgRGVmZXJyZWRJbXBsKHNjb3BlKTtcclxufVxyXG5leHBvcnRzLmNyZWF0ZURlZmVycmVkID0gY3JlYXRlRGVmZXJyZWQ7XHJcbmZ1bmN0aW9uIGNyZWF0ZURlZmVycmVkRnJvbSguLi5wcm9taXNlcykge1xyXG4gICAgY29uc3QgZGVmZXJyZWQgPSBjcmVhdGVEZWZlcnJlZCgpO1xyXG4gICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpXHJcbiAgICAgICAgLnRoZW4oZGVmZXJyZWQucmVzb2x2ZS5iaW5kKGRlZmVycmVkKSlcclxuICAgICAgICAuY2F0Y2goZGVmZXJyZWQucmVqZWN0LmJpbmQoZGVmZXJyZWQpKTtcclxuICAgIHJldHVybiBkZWZlcnJlZDtcclxufVxyXG5leHBvcnRzLmNyZWF0ZURlZmVycmVkRnJvbSA9IGNyZWF0ZURlZmVycmVkRnJvbTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIl19