// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const fs = require("fs");

const path = require("path");

const tmp = require("tmp");

function fsExistsAsync(filePath) {
  return new Promise(resolve => {
    fs.exists(filePath, exists => {
      return resolve(exists);
    });
  });
}

exports.fsExistsAsync = fsExistsAsync;

function fsReaddirAsync(root) {
  return new Promise(resolve => {
    // Now look for Interpreters in this directory
    fs.readdir(root, (err, subDirs) => {
      if (err) {
        return resolve([]);
      }

      resolve(subDirs.map(subDir => path.join(root, subDir)));
    });
  });
}

exports.fsReaddirAsync = fsReaddirAsync;

function getSubDirectories(rootDir) {
  return new Promise(resolve => {
    fs.readdir(rootDir, (error, files) => {
      if (error) {
        return resolve([]);
      }

      const subDirs = [];
      files.forEach(name => {
        const fullPath = path.join(rootDir, name);

        try {
          if (fs.statSync(fullPath).isDirectory()) {
            subDirs.push(fullPath);
          }
        } // tslint:disable-next-line:no-empty one-line
        catch (ex) {}
      });
      resolve(subDirs);
    });
  });
}

exports.getSubDirectories = getSubDirectories;

function createTemporaryFile(extension, temporaryDirectory) {
  // tslint:disable-next-line:no-any
  const options = {
    postfix: extension
  };

  if (temporaryDirectory) {
    options.dir = temporaryDirectory;
  }

  return new Promise((resolve, reject) => {
    tmp.file(options, (err, tmpFile, fd, cleanupCallback) => {
      if (err) {
        return reject(err);
      }

      resolve({
        filePath: tmpFile,
        cleanupCallback: cleanupCallback
      });
    });
  });
}

exports.createTemporaryFile = createTemporaryFile;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnMiLCJyZXF1aXJlIiwicGF0aCIsInRtcCIsImZzRXhpc3RzQXN5bmMiLCJmaWxlUGF0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZXhpc3RzIiwiZnNSZWFkZGlyQXN5bmMiLCJyb290IiwicmVhZGRpciIsImVyciIsInN1YkRpcnMiLCJtYXAiLCJzdWJEaXIiLCJqb2luIiwiZ2V0U3ViRGlyZWN0b3JpZXMiLCJyb290RGlyIiwiZXJyb3IiLCJmaWxlcyIsImZvckVhY2giLCJuYW1lIiwiZnVsbFBhdGgiLCJzdGF0U3luYyIsImlzRGlyZWN0b3J5IiwicHVzaCIsImV4IiwiY3JlYXRlVGVtcG9yYXJ5RmlsZSIsImV4dGVuc2lvbiIsInRlbXBvcmFyeURpcmVjdG9yeSIsIm9wdGlvbnMiLCJwb3N0Zml4IiwiZGlyIiwicmVqZWN0IiwiZmlsZSIsInRtcEZpbGUiLCJmZCIsImNsZWFudXBDYWxsYmFjayJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxLQUFELENBQW5COztBQUNBLFNBQVNHLGFBQVQsQ0FBdUJDLFFBQXZCLEVBQWlDO0FBQzdCLFNBQU8sSUFBSUMsT0FBSixDQUFZQyxPQUFPLElBQUk7QUFDMUJQLElBQUFBLEVBQUUsQ0FBQ1EsTUFBSCxDQUFVSCxRQUFWLEVBQW9CRyxNQUFNLElBQUk7QUFDMUIsYUFBT0QsT0FBTyxDQUFDQyxNQUFELENBQWQ7QUFDSCxLQUZEO0FBR0gsR0FKTSxDQUFQO0FBS0g7O0FBQ0RWLE9BQU8sQ0FBQ00sYUFBUixHQUF3QkEsYUFBeEI7O0FBQ0EsU0FBU0ssY0FBVCxDQUF3QkMsSUFBeEIsRUFBOEI7QUFDMUIsU0FBTyxJQUFJSixPQUFKLENBQVlDLE9BQU8sSUFBSTtBQUMxQjtBQUNBUCxJQUFBQSxFQUFFLENBQUNXLE9BQUgsQ0FBV0QsSUFBWCxFQUFpQixDQUFDRSxHQUFELEVBQU1DLE9BQU4sS0FBa0I7QUFDL0IsVUFBSUQsR0FBSixFQUFTO0FBQ0wsZUFBT0wsT0FBTyxDQUFDLEVBQUQsQ0FBZDtBQUNIOztBQUNEQSxNQUFBQSxPQUFPLENBQUNNLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxNQUFNLElBQUliLElBQUksQ0FBQ2MsSUFBTCxDQUFVTixJQUFWLEVBQWdCSyxNQUFoQixDQUF0QixDQUFELENBQVA7QUFDSCxLQUxEO0FBTUgsR0FSTSxDQUFQO0FBU0g7O0FBQ0RqQixPQUFPLENBQUNXLGNBQVIsR0FBeUJBLGNBQXpCOztBQUNBLFNBQVNRLGlCQUFULENBQTJCQyxPQUEzQixFQUFvQztBQUNoQyxTQUFPLElBQUlaLE9BQUosQ0FBWUMsT0FBTyxJQUFJO0FBQzFCUCxJQUFBQSxFQUFFLENBQUNXLE9BQUgsQ0FBV08sT0FBWCxFQUFvQixDQUFDQyxLQUFELEVBQVFDLEtBQVIsS0FBa0I7QUFDbEMsVUFBSUQsS0FBSixFQUFXO0FBQ1AsZUFBT1osT0FBTyxDQUFDLEVBQUQsQ0FBZDtBQUNIOztBQUNELFlBQU1NLE9BQU8sR0FBRyxFQUFoQjtBQUNBTyxNQUFBQSxLQUFLLENBQUNDLE9BQU4sQ0FBY0MsSUFBSSxJQUFJO0FBQ2xCLGNBQU1DLFFBQVEsR0FBR3JCLElBQUksQ0FBQ2MsSUFBTCxDQUFVRSxPQUFWLEVBQW1CSSxJQUFuQixDQUFqQjs7QUFDQSxZQUFJO0FBQ0EsY0FBSXRCLEVBQUUsQ0FBQ3dCLFFBQUgsQ0FBWUQsUUFBWixFQUFzQkUsV0FBdEIsRUFBSixFQUF5QztBQUNyQ1osWUFBQUEsT0FBTyxDQUFDYSxJQUFSLENBQWFILFFBQWI7QUFDSDtBQUNKLFNBSkQsQ0FLQTtBQUNBLGVBQU9JLEVBQVAsRUFBVyxDQUFHO0FBQ2pCLE9BVEQ7QUFVQXBCLE1BQUFBLE9BQU8sQ0FBQ00sT0FBRCxDQUFQO0FBQ0gsS0FoQkQ7QUFpQkgsR0FsQk0sQ0FBUDtBQW1CSDs7QUFDRGYsT0FBTyxDQUFDbUIsaUJBQVIsR0FBNEJBLGlCQUE1Qjs7QUFDQSxTQUFTVyxtQkFBVCxDQUE2QkMsU0FBN0IsRUFBd0NDLGtCQUF4QyxFQUE0RDtBQUN4RDtBQUNBLFFBQU1DLE9BQU8sR0FBRztBQUFFQyxJQUFBQSxPQUFPLEVBQUVIO0FBQVgsR0FBaEI7O0FBQ0EsTUFBSUMsa0JBQUosRUFBd0I7QUFDcEJDLElBQUFBLE9BQU8sQ0FBQ0UsR0FBUixHQUFjSCxrQkFBZDtBQUNIOztBQUNELFNBQU8sSUFBSXhCLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVUyQixNQUFWLEtBQXFCO0FBQ3BDL0IsSUFBQUEsR0FBRyxDQUFDZ0MsSUFBSixDQUFTSixPQUFULEVBQWtCLENBQUNuQixHQUFELEVBQU13QixPQUFOLEVBQWVDLEVBQWYsRUFBbUJDLGVBQW5CLEtBQXVDO0FBQ3JELFVBQUkxQixHQUFKLEVBQVM7QUFDTCxlQUFPc0IsTUFBTSxDQUFDdEIsR0FBRCxDQUFiO0FBQ0g7O0FBQ0RMLE1BQUFBLE9BQU8sQ0FBQztBQUFFRixRQUFBQSxRQUFRLEVBQUUrQixPQUFaO0FBQXFCRSxRQUFBQSxlQUFlLEVBQUVBO0FBQXRDLE9BQUQsQ0FBUDtBQUNILEtBTEQ7QUFNSCxHQVBNLENBQVA7QUFRSDs7QUFDRHhDLE9BQU8sQ0FBQzhCLG1CQUFSLEdBQThCQSxtQkFBOUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgdG1wID0gcmVxdWlyZShcInRtcFwiKTtcclxuZnVuY3Rpb24gZnNFeGlzdHNBc3luYyhmaWxlUGF0aCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIGZzLmV4aXN0cyhmaWxlUGF0aCwgZXhpc3RzID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZXhpc3RzKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuZnNFeGlzdHNBc3luYyA9IGZzRXhpc3RzQXN5bmM7XHJcbmZ1bmN0aW9uIGZzUmVhZGRpckFzeW5jKHJvb3QpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAvLyBOb3cgbG9vayBmb3IgSW50ZXJwcmV0ZXJzIGluIHRoaXMgZGlyZWN0b3J5XHJcbiAgICAgICAgZnMucmVhZGRpcihyb290LCAoZXJyLCBzdWJEaXJzKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvbHZlKHN1YkRpcnMubWFwKHN1YkRpciA9PiBwYXRoLmpvaW4ocm9vdCwgc3ViRGlyKSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5mc1JlYWRkaXJBc3luYyA9IGZzUmVhZGRpckFzeW5jO1xyXG5mdW5jdGlvbiBnZXRTdWJEaXJlY3Rvcmllcyhyb290RGlyKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgZnMucmVhZGRpcihyb290RGlyLCAoZXJyb3IsIGZpbGVzKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHN1YkRpcnMgPSBbXTtcclxuICAgICAgICAgICAgZmlsZXMuZm9yRWFjaChuYW1lID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aC5qb2luKHJvb3REaXIsIG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnMuc3RhdFN5bmMoZnVsbFBhdGgpLmlzRGlyZWN0b3J5KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViRGlycy5wdXNoKGZ1bGxQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHkgb25lLWxpbmVcclxuICAgICAgICAgICAgICAgIGNhdGNoIChleCkgeyB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXNvbHZlKHN1YkRpcnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0cy5nZXRTdWJEaXJlY3RvcmllcyA9IGdldFN1YkRpcmVjdG9yaWVzO1xyXG5mdW5jdGlvbiBjcmVhdGVUZW1wb3JhcnlGaWxlKGV4dGVuc2lvbiwgdGVtcG9yYXJ5RGlyZWN0b3J5KSB7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICBjb25zdCBvcHRpb25zID0geyBwb3N0Zml4OiBleHRlbnNpb24gfTtcclxuICAgIGlmICh0ZW1wb3JhcnlEaXJlY3RvcnkpIHtcclxuICAgICAgICBvcHRpb25zLmRpciA9IHRlbXBvcmFyeURpcmVjdG9yeTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgdG1wLmZpbGUob3B0aW9ucywgKGVyciwgdG1wRmlsZSwgZmQsIGNsZWFudXBDYWxsYmFjaykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzb2x2ZSh7IGZpbGVQYXRoOiB0bXBGaWxlLCBjbGVhbnVwQ2FsbGJhY2s6IGNsZWFudXBDYWxsYmFjayB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuY3JlYXRlVGVtcG9yYXJ5RmlsZSA9IGNyZWF0ZVRlbXBvcmFyeUZpbGU7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZzLmpzLm1hcCJdfQ==