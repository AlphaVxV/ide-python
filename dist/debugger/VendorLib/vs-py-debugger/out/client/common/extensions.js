"use strict";

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

/**
 * Split a string using the cr and lf characters and return them as an array.
 * By default lines are trimmed and empty lines are removed.
 * @param {SplitLinesOptions=} splitOptions - Options used for splitting the string.
 */
String.prototype.splitLines = function (splitOptions = {
  removeEmptyEntries: true,
  trim: true
}) {
  let lines = this.split(/\r?\n/g);

  if (splitOptions && splitOptions.trim) {
    lines = lines.map(line => line.trim());
  }

  if (splitOptions && splitOptions.removeEmptyEntries) {
    lines = lines.filter(line => line.length > 0);
  }

  return lines;
};
/**
 * Appropriately formats a string so it can be used as an argument for a command in a shell.
 * E.g. if an argument contains a space, then it will be enclosed within double quotes.
 * @param {String} value.
 */


String.prototype.toCommandArgument = function () {
  if (!this) {
    return this;
  }

  return this.indexOf(' ') >= 0 && !this.startsWith('"') && !this.endsWith('"') ? `"${this}"` : this.toString();
};
/**
 * Appropriately formats a a file path so it can be used as an argument for a command in a shell.
 * E.g. if an argument contains a space, then it will be enclosed within double quotes.
 */


String.prototype.fileToCommandArgument = function () {
  if (!this) {
    return this;
  }

  return this.toCommandArgument().replace(/\\/g, '/');
};
/**
 * Explicitly tells that promise should be run asynchonously.
 */


Promise.prototype.ignoreErrors = function () {
  // tslint:disable-next-line:no-empty
  this.catch(() => {});
};

if (!String.prototype.format) {
  String.prototype.format = function () {
    const args = arguments;
    return this.replace(/{(\d+)}/g, (match, number) => args[number] === undefined ? match : args[number]);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4dGVuc2lvbnMuanMiXSwibmFtZXMiOlsiU3RyaW5nIiwicHJvdG90eXBlIiwic3BsaXRMaW5lcyIsInNwbGl0T3B0aW9ucyIsInJlbW92ZUVtcHR5RW50cmllcyIsInRyaW0iLCJsaW5lcyIsInNwbGl0IiwibWFwIiwibGluZSIsImZpbHRlciIsImxlbmd0aCIsInRvQ29tbWFuZEFyZ3VtZW50IiwiaW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsInRvU3RyaW5nIiwiZmlsZVRvQ29tbWFuZEFyZ3VtZW50IiwicmVwbGFjZSIsIlByb21pc2UiLCJpZ25vcmVFcnJvcnMiLCJjYXRjaCIsImZvcm1hdCIsImFyZ3MiLCJhcmd1bWVudHMiLCJtYXRjaCIsIm51bWJlciIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxVQUFqQixHQUE4QixVQUFVQyxZQUFZLEdBQUc7QUFBRUMsRUFBQUEsa0JBQWtCLEVBQUUsSUFBdEI7QUFBNEJDLEVBQUFBLElBQUksRUFBRTtBQUFsQyxDQUF6QixFQUFtRTtBQUM3RixNQUFJQyxLQUFLLEdBQUcsS0FBS0MsS0FBTCxDQUFXLFFBQVgsQ0FBWjs7QUFDQSxNQUFJSixZQUFZLElBQUlBLFlBQVksQ0FBQ0UsSUFBakMsRUFBdUM7QUFDbkNDLElBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDRSxHQUFOLENBQVVDLElBQUksSUFBSUEsSUFBSSxDQUFDSixJQUFMLEVBQWxCLENBQVI7QUFDSDs7QUFDRCxNQUFJRixZQUFZLElBQUlBLFlBQVksQ0FBQ0Msa0JBQWpDLEVBQXFEO0FBQ2pERSxJQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0ksTUFBTixDQUFhRCxJQUFJLElBQUlBLElBQUksQ0FBQ0UsTUFBTCxHQUFjLENBQW5DLENBQVI7QUFDSDs7QUFDRCxTQUFPTCxLQUFQO0FBQ0gsQ0FURDtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBTixNQUFNLENBQUNDLFNBQVAsQ0FBaUJXLGlCQUFqQixHQUFxQyxZQUFZO0FBQzdDLE1BQUksQ0FBQyxJQUFMLEVBQVc7QUFDUCxXQUFPLElBQVA7QUFDSDs7QUFDRCxTQUFRLEtBQUtDLE9BQUwsQ0FBYSxHQUFiLEtBQXFCLENBQXJCLElBQTBCLENBQUMsS0FBS0MsVUFBTCxDQUFnQixHQUFoQixDQUEzQixJQUFtRCxDQUFDLEtBQUtDLFFBQUwsQ0FBYyxHQUFkLENBQXJELEdBQTRFLElBQUcsSUFBSyxHQUFwRixHQUF5RixLQUFLQyxRQUFMLEVBQWhHO0FBQ0gsQ0FMRDtBQU1BO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQWhCLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQmdCLHFCQUFqQixHQUF5QyxZQUFZO0FBQ2pELE1BQUksQ0FBQyxJQUFMLEVBQVc7QUFDUCxXQUFPLElBQVA7QUFDSDs7QUFDRCxTQUFPLEtBQUtMLGlCQUFMLEdBQXlCTSxPQUF6QixDQUFpQyxLQUFqQyxFQUF3QyxHQUF4QyxDQUFQO0FBQ0gsQ0FMRDtBQU1BO0FBQ0E7QUFDQTs7O0FBQ0FDLE9BQU8sQ0FBQ2xCLFNBQVIsQ0FBa0JtQixZQUFsQixHQUFpQyxZQUFZO0FBQ3pDO0FBQ0EsT0FBS0MsS0FBTCxDQUFXLE1BQU0sQ0FBRyxDQUFwQjtBQUNILENBSEQ7O0FBSUEsSUFBSSxDQUFDckIsTUFBTSxDQUFDQyxTQUFQLENBQWlCcUIsTUFBdEIsRUFBOEI7QUFDMUJ0QixFQUFBQSxNQUFNLENBQUNDLFNBQVAsQ0FBaUJxQixNQUFqQixHQUEwQixZQUFZO0FBQ2xDLFVBQU1DLElBQUksR0FBR0MsU0FBYjtBQUNBLFdBQU8sS0FBS04sT0FBTCxDQUFhLFVBQWIsRUFBeUIsQ0FBQ08sS0FBRCxFQUFRQyxNQUFSLEtBQW1CSCxJQUFJLENBQUNHLE1BQUQsQ0FBSixLQUFpQkMsU0FBakIsR0FBNkJGLEtBQTdCLEdBQXFDRixJQUFJLENBQUNHLE1BQUQsQ0FBckYsQ0FBUDtBQUNILEdBSEQ7QUFJSCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbi8qKlxyXG4gKiBTcGxpdCBhIHN0cmluZyB1c2luZyB0aGUgY3IgYW5kIGxmIGNoYXJhY3RlcnMgYW5kIHJldHVybiB0aGVtIGFzIGFuIGFycmF5LlxyXG4gKiBCeSBkZWZhdWx0IGxpbmVzIGFyZSB0cmltbWVkIGFuZCBlbXB0eSBsaW5lcyBhcmUgcmVtb3ZlZC5cclxuICogQHBhcmFtIHtTcGxpdExpbmVzT3B0aW9ucz19IHNwbGl0T3B0aW9ucyAtIE9wdGlvbnMgdXNlZCBmb3Igc3BsaXR0aW5nIHRoZSBzdHJpbmcuXHJcbiAqL1xyXG5TdHJpbmcucHJvdG90eXBlLnNwbGl0TGluZXMgPSBmdW5jdGlvbiAoc3BsaXRPcHRpb25zID0geyByZW1vdmVFbXB0eUVudHJpZXM6IHRydWUsIHRyaW06IHRydWUgfSkge1xyXG4gICAgbGV0IGxpbmVzID0gdGhpcy5zcGxpdCgvXFxyP1xcbi9nKTtcclxuICAgIGlmIChzcGxpdE9wdGlvbnMgJiYgc3BsaXRPcHRpb25zLnRyaW0pIHtcclxuICAgICAgICBsaW5lcyA9IGxpbmVzLm1hcChsaW5lID0+IGxpbmUudHJpbSgpKTtcclxuICAgIH1cclxuICAgIGlmIChzcGxpdE9wdGlvbnMgJiYgc3BsaXRPcHRpb25zLnJlbW92ZUVtcHR5RW50cmllcykge1xyXG4gICAgICAgIGxpbmVzID0gbGluZXMuZmlsdGVyKGxpbmUgPT4gbGluZS5sZW5ndGggPiAwKTtcclxuICAgIH1cclxuICAgIHJldHVybiBsaW5lcztcclxufTtcclxuLyoqXHJcbiAqIEFwcHJvcHJpYXRlbHkgZm9ybWF0cyBhIHN0cmluZyBzbyBpdCBjYW4gYmUgdXNlZCBhcyBhbiBhcmd1bWVudCBmb3IgYSBjb21tYW5kIGluIGEgc2hlbGwuXHJcbiAqIEUuZy4gaWYgYW4gYXJndW1lbnQgY29udGFpbnMgYSBzcGFjZSwgdGhlbiBpdCB3aWxsIGJlIGVuY2xvc2VkIHdpdGhpbiBkb3VibGUgcXVvdGVzLlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWUuXHJcbiAqL1xyXG5TdHJpbmcucHJvdG90eXBlLnRvQ29tbWFuZEFyZ3VtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCF0aGlzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKHRoaXMuaW5kZXhPZignICcpID49IDAgJiYgIXRoaXMuc3RhcnRzV2l0aCgnXCInKSAmJiAhdGhpcy5lbmRzV2l0aCgnXCInKSkgPyBgXCIke3RoaXN9XCJgIDogdGhpcy50b1N0cmluZygpO1xyXG59O1xyXG4vKipcclxuICogQXBwcm9wcmlhdGVseSBmb3JtYXRzIGEgYSBmaWxlIHBhdGggc28gaXQgY2FuIGJlIHVzZWQgYXMgYW4gYXJndW1lbnQgZm9yIGEgY29tbWFuZCBpbiBhIHNoZWxsLlxyXG4gKiBFLmcuIGlmIGFuIGFyZ3VtZW50IGNvbnRhaW5zIGEgc3BhY2UsIHRoZW4gaXQgd2lsbCBiZSBlbmNsb3NlZCB3aXRoaW4gZG91YmxlIHF1b3Rlcy5cclxuICovXHJcblN0cmluZy5wcm90b3R5cGUuZmlsZVRvQ29tbWFuZEFyZ3VtZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCF0aGlzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy50b0NvbW1hbmRBcmd1bWVudCgpLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcclxufTtcclxuLyoqXHJcbiAqIEV4cGxpY2l0bHkgdGVsbHMgdGhhdCBwcm9taXNlIHNob3VsZCBiZSBydW4gYXN5bmNob25vdXNseS5cclxuICovXHJcblByb21pc2UucHJvdG90eXBlLmlnbm9yZUVycm9ycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eVxyXG4gICAgdGhpcy5jYXRjaCgoKSA9PiB7IH0pO1xyXG59O1xyXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuZm9ybWF0KSB7XHJcbiAgICBTdHJpbmcucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL3soXFxkKyl9L2csIChtYXRjaCwgbnVtYmVyKSA9PiBhcmdzW251bWJlcl0gPT09IHVuZGVmaW5lZCA/IG1hdGNoIDogYXJnc1tudW1iZXJdKTtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0ZW5zaW9ucy5qcy5tYXAiXX0=