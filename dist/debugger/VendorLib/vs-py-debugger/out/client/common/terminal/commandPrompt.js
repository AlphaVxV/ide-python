// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const path = require("path");

const vscode_1 = require("vscode");

function getCommandPromptLocation(currentProcess) {
  // https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/terminal/electron-browser/terminalService.ts#L218
  // Determine the correct System32 path. We want to point to Sysnative
  // when the 32-bit version of VS Code is running on a 64-bit machine.
  // The reason for this is because PowerShell's important PSReadline
  // module doesn't work if this is not the case. See #27915.
  const is32ProcessOn64Windows = currentProcess.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');
  const system32Path = path.join(currentProcess.env.windir, is32ProcessOn64Windows ? 'Sysnative' : 'System32');
  return path.join(system32Path, 'cmd.exe');
}

exports.getCommandPromptLocation = getCommandPromptLocation;

function useCommandPromptAsDefaultShell(currentProcess, configService) {
  return __awaiter(this, void 0, void 0, function* () {
    const cmdPromptLocation = getCommandPromptLocation(currentProcess);
    yield configService.updateSectionSetting('terminal', 'integrated.shell.windows', cmdPromptLocation, undefined, vscode_1.ConfigurationTarget.Global);
  });
}

exports.useCommandPromptAsDefaultShell = useCommandPromptAsDefaultShell;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1hbmRQcm9tcHQuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInBhdGgiLCJyZXF1aXJlIiwidnNjb2RlXzEiLCJnZXRDb21tYW5kUHJvbXB0TG9jYXRpb24iLCJjdXJyZW50UHJvY2VzcyIsImlzMzJQcm9jZXNzT242NFdpbmRvd3MiLCJlbnYiLCJoYXNPd25Qcm9wZXJ0eSIsInN5c3RlbTMyUGF0aCIsImpvaW4iLCJ3aW5kaXIiLCJ1c2VDb21tYW5kUHJvbXB0QXNEZWZhdWx0U2hlbGwiLCJjb25maWdTZXJ2aWNlIiwiY21kUHJvbXB0TG9jYXRpb24iLCJ1cGRhdGVTZWN0aW9uU2V0dGluZyIsInVuZGVmaW5lZCIsIkNvbmZpZ3VyYXRpb25UYXJnZXQiLCJHbG9iYWwiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDOUYsYUFBU0YsSUFBVCxDQUFjSSxNQUFkLEVBQXNCO0FBQUVBLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjVCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFyQixHQUFzQyxJQUFJTixDQUFKLENBQU0sVUFBVUcsT0FBVixFQUFtQjtBQUFFQSxRQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFQO0FBQXdCLE9BQW5ELEVBQXFETyxJQUFyRCxDQUEwRFIsU0FBMUQsRUFBcUVLLFFBQXJFLENBQXRDO0FBQXVIOztBQUMvSUgsSUFBQUEsSUFBSSxDQUFDLENBQUNOLFNBQVMsR0FBR0EsU0FBUyxDQUFDYSxLQUFWLENBQWdCaEIsT0FBaEIsRUFBeUJDLFVBQVUsSUFBSSxFQUF2QyxDQUFiLEVBQXlEUyxJQUF6RCxFQUFELENBQUo7QUFDSCxHQUxNLENBQVA7QUFNSCxDQVBEOztBQVFBTyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVYLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1ZLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUF4Qjs7QUFDQSxTQUFTRSx3QkFBVCxDQUFrQ0MsY0FBbEMsRUFBa0Q7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU1DLHNCQUFzQixHQUFHRCxjQUFjLENBQUNFLEdBQWYsQ0FBbUJDLGNBQW5CLENBQWtDLHdCQUFsQyxDQUEvQjtBQUNBLFFBQU1DLFlBQVksR0FBR1IsSUFBSSxDQUFDUyxJQUFMLENBQVVMLGNBQWMsQ0FBQ0UsR0FBZixDQUFtQkksTUFBN0IsRUFBcUNMLHNCQUFzQixHQUFHLFdBQUgsR0FBaUIsVUFBNUUsQ0FBckI7QUFDQSxTQUFPTCxJQUFJLENBQUNTLElBQUwsQ0FBVUQsWUFBVixFQUF3QixTQUF4QixDQUFQO0FBQ0g7O0FBQ0RULE9BQU8sQ0FBQ0ksd0JBQVIsR0FBbUNBLHdCQUFuQzs7QUFDQSxTQUFTUSw4QkFBVCxDQUF3Q1AsY0FBeEMsRUFBd0RRLGFBQXhELEVBQXVFO0FBQ25FLFNBQU9qQyxTQUFTLENBQUMsSUFBRCxFQUFPLEtBQUssQ0FBWixFQUFlLEtBQUssQ0FBcEIsRUFBdUIsYUFBYTtBQUNoRCxVQUFNa0MsaUJBQWlCLEdBQUdWLHdCQUF3QixDQUFDQyxjQUFELENBQWxEO0FBQ0EsVUFBTVEsYUFBYSxDQUFDRSxvQkFBZCxDQUFtQyxVQUFuQyxFQUErQywwQkFBL0MsRUFBMkVELGlCQUEzRSxFQUE4RkUsU0FBOUYsRUFBeUdiLFFBQVEsQ0FBQ2MsbUJBQVQsQ0FBNkJDLE1BQXRJLENBQU47QUFDSCxHQUhlLENBQWhCO0FBSUg7O0FBQ0RsQixPQUFPLENBQUNZLDhCQUFSLEdBQXlDQSw4QkFBekMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCB2c2NvZGVfMSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmZ1bmN0aW9uIGdldENvbW1hbmRQcm9tcHRMb2NhdGlvbihjdXJyZW50UHJvY2Vzcykge1xyXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC92c2NvZGUvYmxvYi9tYXN0ZXIvc3JjL3ZzL3dvcmtiZW5jaC9wYXJ0cy90ZXJtaW5hbC9lbGVjdHJvbi1icm93c2VyL3Rlcm1pbmFsU2VydmljZS50cyNMMjE4XHJcbiAgICAvLyBEZXRlcm1pbmUgdGhlIGNvcnJlY3QgU3lzdGVtMzIgcGF0aC4gV2Ugd2FudCB0byBwb2ludCB0byBTeXNuYXRpdmVcclxuICAgIC8vIHdoZW4gdGhlIDMyLWJpdCB2ZXJzaW9uIG9mIFZTIENvZGUgaXMgcnVubmluZyBvbiBhIDY0LWJpdCBtYWNoaW5lLlxyXG4gICAgLy8gVGhlIHJlYXNvbiBmb3IgdGhpcyBpcyBiZWNhdXNlIFBvd2VyU2hlbGwncyBpbXBvcnRhbnQgUFNSZWFkbGluZVxyXG4gICAgLy8gbW9kdWxlIGRvZXNuJ3Qgd29yayBpZiB0aGlzIGlzIG5vdCB0aGUgY2FzZS4gU2VlICMyNzkxNS5cclxuICAgIGNvbnN0IGlzMzJQcm9jZXNzT242NFdpbmRvd3MgPSBjdXJyZW50UHJvY2Vzcy5lbnYuaGFzT3duUHJvcGVydHkoJ1BST0NFU1NPUl9BUkNISVRFVzY0MzInKTtcclxuICAgIGNvbnN0IHN5c3RlbTMyUGF0aCA9IHBhdGguam9pbihjdXJyZW50UHJvY2Vzcy5lbnYud2luZGlyLCBpczMyUHJvY2Vzc09uNjRXaW5kb3dzID8gJ1N5c25hdGl2ZScgOiAnU3lzdGVtMzInKTtcclxuICAgIHJldHVybiBwYXRoLmpvaW4oc3lzdGVtMzJQYXRoLCAnY21kLmV4ZScpO1xyXG59XHJcbmV4cG9ydHMuZ2V0Q29tbWFuZFByb21wdExvY2F0aW9uID0gZ2V0Q29tbWFuZFByb21wdExvY2F0aW9uO1xyXG5mdW5jdGlvbiB1c2VDb21tYW5kUHJvbXB0QXNEZWZhdWx0U2hlbGwoY3VycmVudFByb2Nlc3MsIGNvbmZpZ1NlcnZpY2UpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgY21kUHJvbXB0TG9jYXRpb24gPSBnZXRDb21tYW5kUHJvbXB0TG9jYXRpb24oY3VycmVudFByb2Nlc3MpO1xyXG4gICAgICAgIHlpZWxkIGNvbmZpZ1NlcnZpY2UudXBkYXRlU2VjdGlvblNldHRpbmcoJ3Rlcm1pbmFsJywgJ2ludGVncmF0ZWQuc2hlbGwud2luZG93cycsIGNtZFByb21wdExvY2F0aW9uLCB1bmRlZmluZWQsIHZzY29kZV8xLkNvbmZpZ3VyYXRpb25UYXJnZXQuR2xvYmFsKTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMudXNlQ29tbWFuZFByb21wdEFzRGVmYXVsdFNoZWxsID0gdXNlQ29tbWFuZFByb21wdEFzRGVmYXVsdFNoZWxsO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tYW5kUHJvbXB0LmpzLm1hcCJdfQ==