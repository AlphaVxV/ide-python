'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const childProcess = require("child_process");

function open(opts) {
  // opts = objectAssign({wait: true}, opts);
  if (!opts.hasOwnProperty("wait")) {
    opts.wait = true;
  }

  var cmd;
  var appArgs = [];
  var args = [];
  var cpOpts = {};

  if (opts.cwd && typeof opts.cwd === 'string' && opts.cwd.length > 0) {
    cpOpts.cwd = opts.cwd;
  }

  if (opts.env && Object.keys(opts.env).length > 0) {
    cpOpts.env = opts.env;
  }

  if (Array.isArray(opts.app)) {
    appArgs = opts.app.slice(1);
    opts.app = opts.app[0];
  }

  if (process.platform === 'darwin') {
    const sudoPrefix = opts.sudo === true ? 'sudo ' : '';
    cmd = 'osascript';
    args = ['-e', 'tell application "terminal"', '-e', 'activate', '-e', 'do script "' + sudoPrefix + [opts.app].concat(appArgs).join(" ") + '"', '-e', 'end tell'];
  } else if (process.platform === 'win32') {
    cmd = 'cmd';
    args.push('/c', 'start');

    if (opts.wait) {
      args.push('/wait');
    }

    if (opts.app) {
      args.push(opts.app);
    }

    if (appArgs.length > 0) {
      args = args.concat(appArgs);
    }
  } else {
    cmd = 'gnome-terminal';
    const sudoPrefix = opts.sudo === true ? 'sudo ' : '';
    args = ['-x', 'sh', '-c', `"${sudoPrefix}${opts.app}" ${appArgs.join(" ")}`];
  }

  var cp = childProcess.spawn(cmd, args, cpOpts);

  if (opts.wait) {
    return new Promise(function (resolve, reject) {
      cp.once('error', reject);
      cp.once('close', function (code) {
        if (code > 0) {
          reject(new Error('Exited with code ' + code));
          return;
        }

        resolve(cp);
      });
    });
  }

  cp.unref();
  return Promise.resolve(cp);
}

exports.open = open;
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9wZW4uanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjaGlsZFByb2Nlc3MiLCJyZXF1aXJlIiwib3BlbiIsIm9wdHMiLCJoYXNPd25Qcm9wZXJ0eSIsIndhaXQiLCJjbWQiLCJhcHBBcmdzIiwiYXJncyIsImNwT3B0cyIsImN3ZCIsImxlbmd0aCIsImVudiIsImtleXMiLCJBcnJheSIsImlzQXJyYXkiLCJhcHAiLCJzbGljZSIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsInN1ZG9QcmVmaXgiLCJzdWRvIiwiY29uY2F0Iiwiam9pbiIsInB1c2giLCJjcCIsInNwYXduIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbmNlIiwiY29kZSIsIkVycm9yIiwidW5yZWYiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLFlBQVksR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBNUI7O0FBQ0EsU0FBU0MsSUFBVCxDQUFjQyxJQUFkLEVBQW9CO0FBQ2hCO0FBQ0EsTUFBSSxDQUFDQSxJQUFJLENBQUNDLGNBQUwsQ0FBb0IsTUFBcEIsQ0FBTCxFQUFrQztBQUM5QkQsSUFBQUEsSUFBSSxDQUFDRSxJQUFMLEdBQVksSUFBWjtBQUNIOztBQUNELE1BQUlDLEdBQUo7QUFDQSxNQUFJQyxPQUFPLEdBQUcsRUFBZDtBQUNBLE1BQUlDLElBQUksR0FBRyxFQUFYO0FBQ0EsTUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsTUFBSU4sSUFBSSxDQUFDTyxHQUFMLElBQVksT0FBT1AsSUFBSSxDQUFDTyxHQUFaLEtBQW9CLFFBQWhDLElBQTRDUCxJQUFJLENBQUNPLEdBQUwsQ0FBU0MsTUFBVCxHQUFrQixDQUFsRSxFQUFxRTtBQUNqRUYsSUFBQUEsTUFBTSxD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RCxJQUFoQyxDQUFELENBQU47QUFDQTtBQUNIOztBQUNESCxRQUFBQSxPQUFPLENBQUNILEVBQUQsQ0FBUDtBQUNILE9BTkQ7QUFPSCxLQVRNLENBQVA7QUFVSDs7QUFDREEsRUFBQUEsRUFBRSxDQUFDUSxLQUFIO0FBQ0EsU0FBT04sT0FBTyxDQUFDQyxPQUFSLENBQWdCSCxFQUFoQixDQUFQO0FBQ0g7O0FBQ0QzQixPQUFPLENBQUNJLElBQVIsR0FBZUEsSUFBZjtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGNoaWxkUHJvY2VzcyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xyXG5mdW5jdGlvbiBvcGVuKG9wdHMpIHtcclxuICAgIC8vIG9wdHMgPSBvYmplY3RBc3NpZ24oe3dhaXQ6IHRydWV9LCBvcHRzKTtcclxuICAgIGlmICghb3B0cy5oYXNPd25Qcm9wZXJ0eShcIndhaXRcIikpIHtcclxuICAgICAgICBvcHRzLndhaXQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgdmFyIGNtZDtcclxuICAgIHZhciBhcHBBcmdzID0gW107XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgdmFyIGNwT3B0cyA9IHt9O1xyXG4gICAgaWYgKG9wdHMuY3dkICYmIHR5cGVvZiBvcHRzLmN3ZCA9PT0gJ3N0cmluZycgJiYgb3B0cy5jd2QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNwT3B0cy5jd2QgPSBvcHRzLmN3ZDtcclxuICAgIH1cclxuICAgIGlmIChvcHRzLmVudiAmJiBPYmplY3Qua2V5cyhvcHRzLmVudikubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNwT3B0cy5lbnYgPSBvcHRzLmVudjtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KG9wdHMuYXBwKSkge1xyXG4gICAgICAgIGFwcEFyZ3MgPSBvcHRzLmFwcC5zbGljZSgxKTtcclxuICAgICAgICBvcHRzLmFwcCA9IG9wdHMuYXBwWzBdO1xyXG4gICAgfVxyXG4gICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gPT09ICdkYXJ3aW4nKSB7XHJcbiAgICAgICAgY29uc3Qgc3Vkb1ByZWZpeCA9IG9wdHMuc3VkbyA9PT0gdHJ1ZSA/ICdzdWRvICcgOiAnJztcclxuICAgICAgICBjbWQgPSAnb3Nhc2NyaXB0JztcclxuICAgICAgICBhcmdzID0gWyctZScsICd0ZWxsIGFwcGxpY2F0aW9uIFwidGVybWluYWxcIicsXHJcbiAgICAgICAgICAgICctZScsICdhY3RpdmF0ZScsXHJcbiAgICAgICAgICAgICctZScsICdkbyBzY3JpcHQgXCInICsgc3Vkb1ByZWZpeCArIFtvcHRzLmFwcF0uY29uY2F0KGFwcEFyZ3MpLmpvaW4oXCIgXCIpICsgJ1wiJyxcclxuICAgICAgICAgICAgJy1lJywgJ2VuZCB0ZWxsJ107XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XHJcbiAgICAgICAgY21kID0gJ2NtZCc7XHJcbiAgICAgICAgYXJncy5wdXNoKCcvYycsICdzdGFydCcpO1xyXG4gICAgICAgIGlmIChvcHRzLndhaXQpIHtcclxuICAgICAgICAgICAgYXJncy5wdXNoKCcvd2FpdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0cy5hcHApIHtcclxuICAgICAgICAgICAgYXJncy5wdXNoKG9wdHMuYXBwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwcEFyZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBhcmdzID0gYXJncy5jb25jYXQoYXBwQXJncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY21kID0gJ2dub21lLXRlcm1pbmFsJztcclxuICAgICAgICBjb25zdCBzdWRvUHJlZml4ID0gb3B0cy5zdWRvID09PSB0cnVlID8gJ3N1ZG8gJyA6ICcnO1xyXG4gICAgICAgIGFyZ3MgPSBbJy14JywgJ3NoJywgJy1jJywgYFwiJHtzdWRvUHJlZml4fSR7b3B0cy5hcHB9XCIgJHthcHBBcmdzLmpvaW4oXCIgXCIpfWBdO1xyXG4gICAgfVxyXG4gICAgdmFyIGNwID0gY2hpbGRQcm9jZXNzLnNwYXduKGNtZCwgYXJncywgY3BPcHRzKTtcclxuICAgIGlmIChvcHRzLndhaXQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBjcC5vbmNlKCdlcnJvcicsIHJlamVjdCk7XHJcbiAgICAgICAgICAgIGNwLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb2RlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ0V4aXRlZCB3aXRoIGNvZGUgJyArIGNvZGUpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGNwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjcC51bnJlZigpO1xyXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjcCk7XHJcbn1cclxuZXhwb3J0cy5vcGVuID0gb3BlbjtcclxuO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuLmpzLm1hcCJdfQ==