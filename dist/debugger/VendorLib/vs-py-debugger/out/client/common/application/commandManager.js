"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-any

const inversify_1 = require("inversify");

const vscode_1 = require("vscode");

let CommandManager = class CommandManager {
  /**
   * Registers a command that can be invoked via a keyboard shortcut,
   * a menu item, an action, or directly.
   *
   * Registering a command with an existing command identifier twice
   * will cause an error.
   *
   * @param command A unique identifier for the command.
   * @param callback A command handler function.
   * @param thisArg The `this` context used when invoking the handler function.
   * @return Disposable which unregisters this command on disposal.
   */
  registerCommand(command, callback, thisArg) {
    return vscode_1.commands.registerCommand(command, callback, thisArg);
  }
  /**
   * Registers a text editor command that can be invoked via a keyboard shortcut,
   * a menu item, an action, or directly.
   *
   * Text editor commands are different from ordinary [commands](#commands.registerCommand) as
   * they only execute when there is an active editor when the command is called. Also, the
   * command handler of an editor command has access to the active editor and to an
   * [edit](#TextEditorEdit)-builder.
   *
   * @param command A unique identifier for the command.
   * @param callback A command handler function with access to an [editor](#TextEditor) and an [edit](#TextEditorEdit).
   * @param thisArg The `this` context used when invoking the handler function.
   * @return Disposable which unregisters this command on disposal.
   */


  registerTextEditorCommand(command, callback, thisArg) {
    return vscode_1.commands.registerTextEditorCommand(command, callback, thisArg);
  }
  /**
   * Executes the command denoted by the given command identifier.
   *
   * * *Note 1:* When executing an editor command not all types are allowed to
   * be passed as arguments. Allowed are the primitive types `string`, `boolean`,
   * `number`, `undefined`, and `null`, as well as [`Position`](#Position), [`Range`](#Range), [`Uri`](#Uri) and [`Location`](#Location).
   * * *Note 2:* There are no restrictions when executing commands that have been contributed
   * by extensions.
   *
   * @param command Identifier of the command to execute.
   * @param rest Parameters passed to the command function.
   * @return A thenable that resolves to the returned value of the given command. `undefined` when
   * the command handler function doesn't return anything.
   */


  executeCommand(command, ...rest) {
    return vscode_1.commands.executeCommand(command, ...rest);
  }
  /**
   * Retrieve the list of all available commands. Commands starting an underscore are
   * treated as internal commands.
   *
   * @param filterInternal Set `true` to not see internal commands (starting with an underscore)
   * @return Thenable that resolves to a list of command ids.
   */


  getCommands(filterInternal) {
    return vscode_1.commands.getCommands(filterInternal);
  }

};
CommandManager = __decorate([inversify_1.injectable()], CommandManager);
exports.CommandManager = CommandManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,