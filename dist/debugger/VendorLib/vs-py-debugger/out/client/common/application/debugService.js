"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
var DebugService_1;
'use strict';

const inversify_1 = require("inversify");

const vscode_1 = require("vscode");

let DebugService = DebugService_1 = class DebugService {
  get activeDebugConsole() {
    return vscode_1.debug.activeDebugConsole;
  }

  get activeDebugSession() {
    return vscode_1.debug.activeDebugSession;
  }

  get breakpoints() {
    return vscode_1.debug.breakpoints;
  }

  get onDidChangeActiveDebugSession() {
    return vscode_1.debug.onDidChangeActiveDebugSession;
  }

  get onDidStartDebugSession() {
    return vscode_1.debug.onDidStartDebugSession;
  }

  get onDidReceiveDebugSessionCustomEvent() {
    return vscode_1.debug.onDidReceiveDebugSessionCustomEvent;
  }

  get onDidTerminateDebugSession() {
    return vscode_1.debug.onDidTerminateDebugSession;
  }

  get onDidChangeBreakpoints() {
    return vscode_1.debug.onDidChangeBreakpoints;
  } // tslint:disable-next-line:no-any


  registerDebugConfigurationProvider(debugType, provider) {
    return vscode_1.debug.registerDebugConfigurationProvider(debugType, provider);
  }

  startDebugging(folder, nameOrConfiguration) {
    return vscode_1.debug.startDebugging(folder, nameOrConfiguration);
  }

  addBreakpoints(breakpoints) {
    vscode_1.debug.addBreakpoints(breakpoints);
  }

  removeBreakpoints(breakpoints) {
    vscode_1.debug.removeBreakpoints(breakpoints);
  }

};
DebugService.instance = new DebugService_1();
DebugService = DebugService_1 = __decorate([inversify_1.injectable()], DebugService);
exports.DebugService = DebugService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlYnVnU2VydmljZS5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJEZWJ1Z1NlcnZpY2VfMSIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsInZzY29kZV8xIiwiRGVidWdTZXJ2aWNlIiwiYWN0aXZlRGVidWdDb25zb2xlIiwiZGVidWciLCJhY3RpdmVEZWJ1Z1Nlc3Npb24iLCJicmVha3BvaW50cyIsIm9uRGlkQ2hhbmdlQWN0aXZlRGVidWdTZXNzaW9uIiwib25EaWRTdGFydERlYnVnU2Vzc2lvbiIsIm9uRGlkUmVjZWl2ZURlYnVnU2Vzc2lvbkN1c3RvbUV2ZW50Iiwib25EaWRUZXJtaW5hdGVEZWJ1Z1Nlc3Npb24iLCJvbkRpZENoYW5nZUJyZWFrcG9pbnRzIiwicmVnaXN0ZXJEZWJ1Z0NvbmZpZ3VyYXRpb25Qcm92aWRlciIsImRlYnVnVHlwZSIsInByb3ZpZGVyIiwic3RhcnREZWJ1Z2dpbmciLCJmb2xkZXIiLCJuYW1lT3JDb25maWd1cmF0aW9uIiwiYWRkQnJlYWtwb2ludHMiLCJyZW1vdmVCcmVha3BvaW50cyIsImluc3RhbmNlIiwiaW5qZWN0YWJsZSJdLCJtYXBwaW5ncyI6IkFBQUEsYSxDQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsVUFBVSxHQUFJLFVBQVEsU0FBS0EsVUFBZCxJQUE2QixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ25GLE1BQUlDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFsQjtBQUFBLE1BQTBCQyxDQUFDLEdBQUdILENBQUMsR0FBRyxDQUFKLEdBQVFILE1BQVIsR0FB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QUFQO0FBQ0g7O0FBQ0RDLEVBQUFBLGNBQWMsQ0FBQ1osV0FBRCxFQUFjO0FBQ3hCTCxJQUFBQSxRQUFRLENBQUNHLEtBQVQsQ0FBZWMsY0FBZixDQUE4QlosV0FBOUI7QUFDSDs7QUFDRGEsRUFBQUEsaUJBQWlCLENBQUNiLFdBQUQsRUFBYztBQUMzQkwsSUFBQUEsUUFBUSxDQUFDRyxLQUFULENBQWVlLGlCQUFmLENBQWlDYixXQUFqQztBQUNIOztBQXJDa0QsQ0FBdkQ7QUF1Q0FKLFlBQVksQ0FBQ2tCLFFBQWIsR0FBd0IsSUFBSXRCLGNBQUosRUFBeEI7QUFDQUksWUFBWSxHQUFHSixjQUFjLEdBQUdsQixVQUFVLENBQUMsQ0FDdkNtQixXQUFXLENBQUNzQixVQUFaLEVBRHVDLENBQUQsRUFFdkNuQixZQUZ1QyxDQUExQztBQUdBTixPQUFPLENBQUNNLFlBQVIsR0FBdUJBLFlBQXZCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxudmFyIERlYnVnU2VydmljZV8xO1xyXG4ndXNlIHN0cmljdCc7XHJcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5sZXQgRGVidWdTZXJ2aWNlID0gRGVidWdTZXJ2aWNlXzEgPSBjbGFzcyBEZWJ1Z1NlcnZpY2Uge1xyXG4gICAgZ2V0IGFjdGl2ZURlYnVnQ29uc29sZSgpIHtcclxuICAgICAgICByZXR1cm4gdnNjb2RlXzEuZGVidWcuYWN0aXZlRGVidWdDb25zb2xlO1xyXG4gICAgfVxyXG4gICAgZ2V0IGFjdGl2ZURlYnVnU2Vzc2lvbigpIHtcclxuICAgICAgICByZXR1cm4gdnNjb2RlXzEuZGVidWcuYWN0aXZlRGVidWdTZXNzaW9uO1xyXG4gICAgfVxyXG4gICAgZ2V0IGJyZWFrcG9pbnRzKCkge1xyXG4gICAgICAgIHJldHVybiB2c2NvZGVfMS5kZWJ1Zy5icmVha3BvaW50cztcclxuICAgIH1cclxuICAgIGdldCBvbkRpZENoYW5nZUFjdGl2ZURlYnVnU2Vzc2lvbigpIHtcclxuICAgICAgICByZXR1cm4gdnNjb2RlXzEuZGVidWcub25EaWRDaGFuZ2VBY3RpdmVEZWJ1Z1Nlc3Npb247XHJcbiAgICB9XHJcbiAgICBnZXQgb25EaWRTdGFydERlYnVnU2Vzc2lvbigpIHtcclxuICAgICAgICByZXR1cm4gdnNjb2RlXzEuZGVidWcub25EaWRTdGFydERlYnVnU2Vzc2lvbjtcclxuICAgIH1cclxuICAgIGdldCBvbkRpZFJlY2VpdmVEZWJ1Z1Nlc3Npb25DdXN0b21FdmVudCgpIHtcclxuICAgICAgICByZXR1cm4gdnNjb2RlXzEuZGVidWcub25EaWRSZWNlaXZlRGVidWdTZXNzaW9uQ3VzdG9tRXZlbnQ7XHJcbiAgICB9XHJcbiAgICBnZXQgb25EaWRUZXJtaW5hdGVEZWJ1Z1Nlc3Npb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHZzY29kZV8xLmRlYnVnLm9uRGlkVGVybWluYXRlRGVidWdTZXNzaW9uO1xyXG4gICAgfVxyXG4gICAgZ2V0IG9uRGlkQ2hhbmdlQnJlYWtwb2ludHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHZzY29kZV8xLmRlYnVnLm9uRGlkQ2hhbmdlQnJlYWtwb2ludHM7XHJcbiAgICB9XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICByZWdpc3RlckRlYnVnQ29uZmlndXJhdGlvblByb3ZpZGVyKGRlYnVnVHlwZSwgcHJvdmlkZXIpIHtcclxuICAgICAgICByZXR1cm4gdnNjb2RlXzEuZGVidWcucmVnaXN0ZXJEZWJ1Z0NvbmZpZ3VyYXRpb25Qcm92aWRlcihkZWJ1Z1R5cGUsIHByb3ZpZGVyKTtcclxuICAgIH1cclxuICAgIHN0YXJ0RGVidWdnaW5nKGZvbGRlciwgbmFtZU9yQ29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIHJldHVybiB2c2NvZGVfMS5kZWJ1Zy5zdGFydERlYnVnZ2luZyhmb2xkZXIsIG5hbWVPckNvbmZpZ3VyYXRpb24pO1xyXG4gICAgfVxyXG4gICAgYWRkQnJlYWtwb2ludHMoYnJlYWtwb2ludHMpIHtcclxuICAgICAgICB2c2NvZGVfMS5kZWJ1Zy5hZGRCcmVha3BvaW50cyhicmVha3BvaW50cyk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVCcmVha3BvaW50cyhicmVha3BvaW50cykge1xyXG4gICAgICAgIHZzY29kZV8xLmRlYnVnLnJlbW92ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKTtcclxuICAgIH1cclxufTtcclxuRGVidWdTZXJ2aWNlLmluc3RhbmNlID0gbmV3IERlYnVnU2VydmljZV8xKCk7XHJcbkRlYnVnU2VydmljZSA9IERlYnVnU2VydmljZV8xID0gX19kZWNvcmF0ZShbXHJcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKClcclxuXSwgRGVidWdTZXJ2aWNlKTtcclxuZXhwb3J0cy5EZWJ1Z1NlcnZpY2UgPSBEZWJ1Z1NlcnZpY2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnU2VydmljZS5qcy5tYXAiXX0=