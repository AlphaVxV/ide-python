"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("../activation/types");

const applicationEnvironment_1 = require("./application/applicationEnvironment");

const applicationShell_1 = require("./application/applicationShell");

const commandManager_1 = require("./application/commandManager");

const debugService_1 = require("./application/debugService");

const documentManager_1 = require("./application/documentManager");

const extensions_1 = require("./application/extensions");

const terminalManager_1 = require("./application/terminalManager");

const types_2 = require("./application/types");

const workspace_1 = require("./application/workspace");

const service_1 = require("./configuration/service");

const editor_1 = require("./editor");

const featureDeprecationManager_1 = require("./featureDeprecationManager");

const productInstaller_1 = require("./installer/productInstaller");

const logger_1 = require("./logger");

const browser_1 = require("./net/browser");

const httpClient_1 = require("./net/httpClient");

const nugetService_1 = require("./nuget/nugetService");

const types_3 = require("./nuget/types");

const persistentState_1 = require("./persistentState");

const constants_1 = require("./platform/constants");

const pathUtils_1 = require("./platform/pathUtils");

const currentProcess_1 = require("./process/currentProcess");

const activator_1 = require("./terminal/activator");

const powershellFailedHandler_1 = require("./terminal/activator/powershellFailedHandler");

const bash_1 = require("./terminal/environmentActivationProviders/bash");

const commandPrompt_1 = require("./terminal/environmentActivationProviders/commandPrompt");

const pyenvActivationProvider_1 = require("./terminal/environmentActivationProviders/pyenvActivationProvider");

const factory_1 = require("./terminal/factory");

const helper_1 = require("./terminal/helper");

const types_4 = require("./terminal/types");

const types_5 = require("./types");

const random_1 = require("./utils/random");

function registerTypes(serviceManager) {
  serviceManager.addSingletonInstance(types_5.IsWindows, constants_1.IS_WINDOWS);
  serviceManager.addSingletonInstance(types_5.Is64Bit, constants_1.IS_64_BIT);
  serviceManager.addSingleton(types_5.IExtensions, extensions_1.Extensions);
  serviceManager.addSingleton(types_5.IRandom, random_1.Random);
  serviceManager.addSingleton(types_5.IPersistentStateFactory, persistentState_1.PersistentStateFactory);
  serviceManager.addSingleton(types_5.ILogger, logger_1.Logger);
  serviceManager.addSingleton(types_4.ITerminalServiceFactory, factory_1.TerminalServiceFactory);
  serviceManager.addSingleton(types_5.IPathUtils, pathUtils_1.PathUtils);
  serviceManager.addSingleton(types_2.IApplicationShell, applicationShell_1.ApplicationShell);
  serviceManager.addSingleton(types_5.ICurrentProcess, currentProcess_1.CurrentProcess);
  serviceManager.addSingleton(types_5.IInstaller, productInstaller_1.ProductInstaller);
  serviceManager.addSingleton(types_2.ICommandManager, commandManager_1.CommandManager);
  serviceManager.addSingleton(types_5.IConfigurationService, service_1.ConfigurationService);
  serviceManager.addSingleton(types_2.IWorkspaceService, workspace_1.WorkspaceService);
  serviceManager.addSingleton(types_2.IDocumentManager, documentManager_1.DocumentManager);
  serviceManager.addSingleton(types_2.ITerminalManager, terminalManager_1.TerminalManager);
  serviceManager.addSingleton(types_2.IDebugService, debugService_1.DebugService);
  serviceManager.addSingleton(types_2.IApplicationEnvironment, applicationEnvironment_1.ApplicationEnvironment);
  serviceManager.addSingleton(types_5.IBrowserService, browser_1.BrowserService);
  serviceManager.addSingleton(types_1.IHttpClient, httpClient_1.HttpClient);
  serviceManager.addSingleton(types_5.IEditorUtils, editor_1.EditorUtils);
  serviceManager.addSingleton(types_3.INugetService, nugetService_1.NugetService);
  serviceManager.addSingleton(types_4.ITerminalActivator, activator_1.TerminalActivator);
  serviceManager.addSingleton(types_4.ITerminalActivationHandler, powershellFailedHandler_1.PowershellTerminalActivationFailedHandler);
  serviceManager.addSingleton(types_4.ITerminalHelper, helper_1.TerminalHelper);
  serviceManager.addSingleton(types_4.ITerminalActivationCommandProvider, bash_1.Bash, 'bashCShellFish');
  serviceManager.addSingleton(types_4.ITerminalActivationCommandProvider, commandPrompt_1.CommandPromptAndPowerShell, 'commandPromptAndPowerShell');
  serviceManager.addSingleton(types_4.ITerminalActivationCommandProvider, pyenvActivationProvider_1.PyEnvActivationCommandProvider, 'pyenv');
  serviceManager.addSingleton(types_5.IFeatureDeprecationManager, featureDeprecationManager_1.FeatureDeprecationManager);
}

exports.registerTypes = registerTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,