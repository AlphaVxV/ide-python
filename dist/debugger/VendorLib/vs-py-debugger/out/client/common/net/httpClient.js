// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const request = require("request");

const types_1 = require("../../ioc/types");

const types_2 = require("../application/types");

let HttpClient = class HttpClient {
  constructor(serviceContainer) {
    const workspaceService = serviceContainer.get(types_2.IWorkspaceService);
    this.requestOptions = {
      proxy: workspaceService.getConfiguration('http').get('proxy', '')
    };
  }

  downloadFile(uri) {
    return request(uri, this.requestOptions);
  }

  getJSON(uri) {
    return new Promise((resolve, reject) => {
      request(uri, this.requestOptions, (ex, response, body) => {
        if (ex) {
          return reject(ex);
        }

        if (response.statusCode !== 200) {
          return reject(new Error(`Failed with status ${response.statusCode}, ${response.statusMessage}, Uri ${uri}`));
        }

        resolve(JSON.parse(body));
      });
    });
  }

};
HttpClient = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.IServiceContainer))], HttpClient);
exports.HttpClient = HttpClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBDbGllbnQuanMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJyZXF1ZXN0IiwidHlwZXNfMSIsInR5cGVzXzIiLCJIdHRwQ2xpZW50IiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlQ29udGFpbmVyIiwid29ya3NwYWNlU2VydmljZSIsImdldCIsIklXb3Jrc3BhY2VTZXJ2aWNlIiwicmVxdWVzdE9wdGlvbnMiLCJwcm94eSIsImdldENvbmZpZ3VyYXRpb24iLCJkb3dubG9hZEZpbGUiLCJ1cmkiLCJnZXRKU09OIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJleCIsInJlc3BvbnNlIiwiYm9keSIsInN0YXR1c0NvZGUiLCJFcnJvciIsInN0YXR1c01lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJpbmplY3RhYmxlIiwiaW5qZWN0IiwiSVNlcnZpY2VDb250YWluZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxVQUFVLEdBQUksVUFBUSxTQUFLQSxVQUFkLElBQTZCLFVBQVVDLFVBQVYsRUFBc0JDLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0MsSUFBbkMsRUFBeUM7QUFDbkYsTUFBSUMsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQWxCO0FBQUEsTUFBMEJDLENBQUMsR0FBR0gsQ0FBQyxHQUFHLENBQUosR0FBUUgsTUFBUixHQUFpQkUsSUFBSSxLQUFLLElBQVQsR0FBZ0JBLElBQUksR0FBR0ssTUFBTSxDQUFDQyx3QkFBUCxDQUFnQ1IsTUFBaEMsRUFBd0NDLEdBQXhDLENBQXZCLEdBQXNFQyxJQUFySDtBQUFBLE1BQTJITyxDQUEzSDtBQUNBLE1BQUksT0FBT0MsT0FBUCxLQUFtQixRQUFuQixJQUErQixPQUFPQSxPQUFPLENBQUNDLFFBQWYsS0FBNEIsVUFBL0QsRUFBMkVMLENBQUMsR0FBR0ksT0FBTyxDQUFDQyxRQUFSLENBQWlCWixVQUFqQixFQUE2QkMsTUFBN0IsRUFBcUNDLEdBQXJDLEVBQTBDQyxJQUExQyxDQUFKLENBQTNFLEtBQ0ssS0FBSyxJQUFJVSxDQUFDLEdBQUdiLFVBQVUsQ0FBQ00sTUFBWCxHQUFvQixDQUFqQyxFQUFvQ08sQ0FBQyxJQUFJLENBQXpDLEVBQTRDQSxDQUFDLEVBQTdDLEVBQWlELElBQUlILENBQUMsR0FBR1YsVUFBVSxDQUFDYSxDQUFELENBQWxCLEVBQXVCTixDQUFDLEdBQUcsQ0FBQ0gsQ0FBQyxHQUFHLENBQUosR0FBUU0sQ0FBQyxDQUFDSCxDQUFELENBQVQsR0FBZUgsQ0FBQyxHQUFHLENBQUosR0FBUU0sQ0FBQyxDQUFDVCxNQUFELEVBQVNDLEdBQVQsRUFBY0ssQ0FBZCxDQUFULEdBQTRCRyxDQUFDLENBQUNULE1BQUQsRUFBU0MsR0FBVCxDQUE3QyxLQUErREssQ0FBbkU7QUFDN0UsU0FBT0gsQ0FBQyxHQUFHLENBQUosSUFBU0csQ0FBVCxJQUFjQyxNQUFNLENBQUNNLGNBQVAsQ0FBc0JiLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0ssQ0FBbkMsQ0FBZCxFQUFxREEsQ0FBNUQ7QUFDSCxDQUxEOztBQU1BLElBQUlRLE9BQU8sR0FBSSxVQUFRLFNBQUtBLE9BQWQsSUFBMEIsVUFBVUMsVUFBVixFQUFzQkMsU0FBdEIsRUFBaUM7QUFDckUsU0FBTyxVQUFVaEIsTUFBVixFQUFrQkMsR0FBbEIsRUFBdUI7QUFBRWUsSUFBQUEsU0FBUyxDQUFDaEIsTUFBRCxFQUFTQyxHQUFULEVBQWNjLFVBQWQsQ0FBVDtBQUFxQyxHQUFyRTtBQUNILENBRkQ7O0FBR0FSLE1BQU0sQ0FBQ00sY0FBUCxDQUFzQkksT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUEzQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFDLHNCQUFELENBQXZCOztBQUNBLElBQUlJLFVBQVUsR0FBRyxNQUFNQSxVQUFOLENBQWlCO0FBQzlCQyxFQUFBQSxXQUFXLENBQUNDLGdCQUFELEVBQW1CO0FBQzFCLFVBQU1DLGdCQUFnQixHQUFHRCxnQkFBZ0IsQ0FBQ0UsR0FBakIsQ0FBcUJMLE9BQU8sQ0FBQ00saUJBQTdCLENBQXpCO0FBQ0EsU0FBS0MsY0FBTCxHQUFzQjtBQUFFQyxNQUFBQSxLQUFLLEVBQUVKLGdCQUFnQixDQUFDSyxnQkFBakIsQ0FBa0MsTUFBbEMsRUFBMENKLEdBQTFDLENBQThDLE9BQTlDLEVBQXVELEVBQXZEO0FBQVQsS0FBdEI7QUFDSDs7QUFDREssRUFBQUEsWUFBWSxDQUFDQyxHQUFELEVBQU07QUFDZCxXQUFPYixPQUFPLENBQUNhLEdBQUQsRUFBTSxLQUFLSixjQUFYLENBQWQ7QUFDSDs7QUFDREssRUFBQUEsT0FBTyxDQUFDRCxHQUFELEVBQU07QUFDVCxXQUFPLElBQUlFLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDcENqQixNQUFBQSxPQUFPLENBQUNhLEdBQUQsRUFBTSxLQUFLSixjQUFYLEVBQTJCLENBQUNTLEVBQUQsRUFBS0MsUUFBTCxFQUFlQyxJQUFmLEtBQXdCO0FBQ3RELFlBQUlGLEVBQUosRUFBUTtBQUNKLGlCQUFPRCxNQUFNLENBQUNDLEVBQUQsQ0FBYjtBQUNIOztBQUNELFlBQUlDLFFBQVEsQ0FBQ0UsVUFBVCxLQUF3QixHQUE1QixFQUFpQztBQUM3QixpQkFBT0osTUFBTSxDQUFDLElBQUlLLEtBQUosQ0FBVyxzQkFBcUJILFFBQVEsQ0FBQ0UsVUFBVyxLQUFJRixRQUFRLENBQUNJLGFBQWMsU0FBUVYsR0FBSSxFQUEzRixDQUFELENBQWI7QUFDSDs7QUFDREcsUUFBQUEsT0FBTyxDQUFDUSxJQUFJLENBQUNDLEtBQUwsQ0FBV0wsSUFBWCxDQUFELENBQVA7QUFDSCxPQVJNLENBQVA7QUFTSCxLQVZNLENBQVA7QUFXSDs7QUFwQjZCLENBQWxDO0FBc0JBakIsVUFBVSxHQUFHMUIsVUFBVSxDQUFDLENBQ3BCcUIsV0FBVyxDQUFDNEIsVUFBWixFQURvQixFQUVwQmpDLE9BQU8sQ0FBQyxDQUFELEVBQUlLLFdBQVcsQ0FBQzZCLE1BQVosQ0FBbUIxQixPQUFPLENBQUMyQixpQkFBM0IsQ0FBSixDQUZhLENBQUQsRUFHcEJ6QixVQUhvQixDQUF2QjtBQUlBUCxPQUFPLENBQUNPLFVBQVIsR0FBcUJBLFVBQXJCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaW52ZXJzaWZ5XzEgPSByZXF1aXJlKFwiaW52ZXJzaWZ5XCIpO1xyXG5jb25zdCByZXF1ZXN0ID0gcmVxdWlyZShcInJlcXVlc3RcIik7XHJcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vaW9jL3R5cGVzXCIpO1xyXG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4uL2FwcGxpY2F0aW9uL3R5cGVzXCIpO1xyXG5sZXQgSHR0cENsaWVudCA9IGNsYXNzIEh0dHBDbGllbnQge1xyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZUNvbnRhaW5lcikge1xyXG4gICAgICAgIGNvbnN0IHdvcmtzcGFjZVNlcnZpY2UgPSBzZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18yLklXb3Jrc3BhY2VTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLnJlcXVlc3RPcHRpb25zID0geyBwcm94eTogd29ya3NwYWNlU2VydmljZS5nZXRDb25maWd1cmF0aW9uKCdodHRwJykuZ2V0KCdwcm94eScsICcnKSB9O1xyXG4gICAgfVxyXG4gICAgZG93bmxvYWRGaWxlKHVyaSkge1xyXG4gICAgICAgIHJldHVybiByZXF1ZXN0KHVyaSwgdGhpcy5yZXF1ZXN0T3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgICBnZXRKU09OKHVyaSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHJlcXVlc3QodXJpLCB0aGlzLnJlcXVlc3RPcHRpb25zLCAoZXgsIHJlc3BvbnNlLCBib2R5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHdpdGggc3RhdHVzICR7cmVzcG9uc2Uuc3RhdHVzQ29kZX0sICR7cmVzcG9uc2Uuc3RhdHVzTWVzc2FnZX0sIFVyaSAke3VyaX1gKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UoYm9keSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufTtcclxuSHR0cENsaWVudCA9IF9fZGVjb3JhdGUoW1xyXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpLFxyXG4gICAgX19wYXJhbSgwLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMS5JU2VydmljZUNvbnRhaW5lcikpXHJcbl0sIEh0dHBDbGllbnQpO1xyXG5leHBvcnRzLkh0dHBDbGllbnQgPSBIdHRwQ2xpZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwQ2xpZW50LmpzLm1hcCJdfQ==