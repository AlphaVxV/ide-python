// tslint:disable:quotemark ordered-imports member-ordering one-line prefer-const
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const events_1 = require("events");

const SocketStream_1 = require("./SocketStream");

class SocketCallbackHandler extends events_1.EventEmitter {
  constructor(socketServer) {
    super();
    this.commandHandlers = new Map();
    socketServer.on('data', this.onData.bind(this));
  }

  dispose() {
    this.disposed = true;
    this.commandHandlers.clear();
  }

  onData(socketClient, data) {
    if (this.disposed) {
      return;
    }

    this.HandleIncomingData(data, socketClient);
  }

  get stream() {
    return this._stream;
  }

  SendRawCommand(commandId) {
    this.stream.Write(commandId);
  }

  registerCommandHandler(commandId, handler) {
    this.commandHandlers.set(commandId, handler);
  }

  HandleIncomingData(buffer, socket) {
    if (!this._stream) {
      this._stream = new SocketStream_1.SocketStream(socket, buffer);
    } else {
      this._stream.Append(buffer);
    }

    if (!this.handeshakeDone && !this.handleHandshake()) {
      return;
    }

    this.handeshakeDone = true;
    this.HandleIncomingDataFromStream();
    return true;
  }

  HandleIncomingDataFromStream() {
    if (this.stream.Length === 0) {
      return;
    }

    this.stream.BeginTransaction();
    let cmd = this.stream.ReadAsciiString(4);

    if (this.stream.HasInsufficientDataForReading) {
      this.stream.RollBackTransaction();
      return;
    }

    if (this.commandHandlers.has(cmd)) {
      const handler = this.commandHandlers.get(cmd);
      handler();
    } else {
      this.emit("error", `Unhandled command '${cmd}'`);
    }

    if (this.stream.HasInsufficientDataForReading) {
      // Most possibly due to insufficient data
      this.stream.RollBackTransaction();
      return;
    }

    this.stream.EndTransaction();

    if (this.stream.Length > 0) {
      this.HandleIncomingDataFromStream();
    }
  }

}

exports.SocketCallbackHandler = SocketCallbackHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvY2tldENhbGxiYWNrSGFuZGxlci5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV2ZW50c18xIiwicmVxdWlyZSIsIlNvY2tldFN0cmVhbV8xIiwiU29ja2V0Q2FsbGJhY2tIYW5kbGVyIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJzb2NrZXRTZXJ2ZXIiLCJjb21tYW5kSGFuZGxlcnMiLCJNYXAiLCJvbiIsIm9uRGF0YSIsImJpbmQiLCJkaXNwb3NlIiwiZGlzcG9zZWQiLCJjbGVhciIsInNvY2tldENsaWVudCIsImRhdGEiLCJIYW5kbGVJbmNvbWluZ0RhdGEiLCJzdHJlYW0iLCJfc3RyZWFtIiwiU2VuZFJhd0NvbW1hbmQiLCJjb21tYW5kSWQiLCJXcml0ZSIsInJlZ2lzdGVyQ29tbWFuZEhhbmRsZXIiLCJoYW5kbGVyIiwic2V0IiwiYnVmZmVyIiwic29ja2V0IiwiU29ja2V0U3RyZWFtIiwiQXBwZW5kIiwiaGFuZGVzaGFrZURvbmUiLCJoYW5kbGVIYW5kc2hha2UiLCJIYW5kbGVJbmNvbWluZ0RhdGFGcm9tU3RyZWFtIiwiTGVuZ3RoIiwiQmVnaW5UcmFuc2FjdGlvbiIsImNtZCIsIlJlYWRBc2NpaVN0cmluZyIsIkhhc0luc3VmZmljaWVudERhdGFGb3JSZWFkaW5nIiwiUm9sbEJhY2tUcmFuc2FjdGlvbiIsImhhcyIsImdldCIsImVtaXQiLCJFbmRUcmFuc2FjdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXhCOztBQUNBLE1BQU1DLGNBQWMsR0FBR0QsT0FBTyxDQUFDLGdCQUFELENBQTlCOztBQUNBLE1BQU1FLHFCQUFOLFNBQW9DSCxR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YmVyLW9yZGVyaW5nIG9uZS1saW5lIHByZWZlci1jb25zdFxyXG5cInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XHJcbmNvbnN0IFNvY2tldFN0cmVhbV8xID0gcmVxdWlyZShcIi4vU29ja2V0U3RyZWFtXCIpO1xyXG5jbGFzcyBTb2NrZXRDYWxsYmFja0hhbmRsZXIgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3Ioc29ja2V0U2VydmVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRIYW5kbGVycyA9IG5ldyBNYXAoKTtcclxuICAgICAgICBzb2NrZXRTZXJ2ZXIub24oJ2RhdGEnLCB0aGlzLm9uRGF0YS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwb3NlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kSGFuZGxlcnMuY2xlYXIoKTtcclxuICAgIH1cclxuICAgIG9uRGF0YShzb2NrZXRDbGllbnQsIGRhdGEpIHtcclxuICAgICAgICBpZiAodGhpcy5kaXNwb3NlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuSGFuZGxlSW5jb21pbmdEYXRhKGRhdGEsIHNvY2tldENsaWVudCk7XHJcbiAgICB9XHJcbiAgICBnZXQgc3RyZWFtKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdHJlYW07XHJcbiAgICB9XHJcbiAgICBTZW5kUmF3Q29tbWFuZChjb21tYW5kSWQpIHtcclxuICAgICAgICB0aGlzLnN0cmVhbS5Xcml0ZShjb21tYW5kSWQpO1xyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJDb21tYW5kSGFuZGxlcihjb21tYW5kSWQsIGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLmNvbW1hbmRIYW5kbGVycy5zZXQoY29tbWFuZElkLCBoYW5kbGVyKTtcclxuICAgIH1cclxuICAgIEhhbmRsZUluY29taW5nRGF0YShidWZmZXIsIHNvY2tldCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fc3RyZWFtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0cmVhbSA9IG5ldyBTb2NrZXRTdHJlYW1fMS5Tb2NrZXRTdHJlYW0oc29ja2V0LCBidWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RyZWFtLkFwcGVuZChidWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaGFuZGVzaGFrZURvbmUgJiYgIXRoaXMuaGFuZGxlSGFuZHNoYWtlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhbmRlc2hha2VEb25lID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLkhhbmRsZUluY29taW5nRGF0YUZyb21TdHJlYW0oKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIEhhbmRsZUluY29taW5nRGF0YUZyb21TdHJlYW0oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RyZWFtLkxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc3RyZWFtLkJlZ2luVHJhbnNhY3Rpb24oKTtcclxuICAgICAgICBsZXQgY21kID0gdGhpcy5zdHJlYW0uUmVhZEFzY2lpU3RyaW5nKDQpO1xyXG4gICAgICAgIGlmICh0aGlzLnN0cmVhbS5IYXNJbnN1ZmZpY2llbnREYXRhRm9yUmVhZGluZykge1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbS5Sb2xsQmFja1RyYW5zYWN0aW9uKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29tbWFuZEhhbmRsZXJzLmhhcyhjbWQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmNvbW1hbmRIYW5kbGVycy5nZXQoY21kKTtcclxuICAgICAgICAgICAgaGFuZGxlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZXJyb3JcIiwgYFVuaGFuZGxlZCBjb21tYW5kICcke2NtZH0nYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnN0cmVhbS5IYXNJbnN1ZmZpY2llbnREYXRhRm9yUmVhZGluZykge1xyXG4gICAgICAgICAgICAvLyBNb3N0IHBvc3NpYmx5IGR1ZSB0byBpbnN1ZmZpY2llbnQgZGF0YVxyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbS5Sb2xsQmFja1RyYW5zYWN0aW9uKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zdHJlYW0uRW5kVHJhbnNhY3Rpb24oKTtcclxuICAgICAgICBpZiAodGhpcy5zdHJlYW0uTGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLkhhbmRsZUluY29taW5nRGF0YUZyb21TdHJlYW0oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Tb2NrZXRDYWxsYmFja0hhbmRsZXIgPSBTb2NrZXRDYWxsYmFja0hhbmRsZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNvY2tldENhbGxiYWNrSGFuZGxlci5qcy5tYXAiXX0=