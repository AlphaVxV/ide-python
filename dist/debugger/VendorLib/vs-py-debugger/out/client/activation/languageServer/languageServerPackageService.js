// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const semver_1 = require("semver");

const types_1 = require("../../common/application/types");

const constants_1 = require("../../common/constants");

const logger_1 = require("../../common/logger");

const types_2 = require("../../common/nuget/types");

const types_3 = require("../../common/platform/types");

const types_4 = require("../../common/types");

const platform_1 = require("../../common/utils/platform");

const types_5 = require("../../ioc/types");

const platformData_1 = require("../platformData");

const languageServerPackageRepository_1 = require("./languageServerPackageRepository");

const downloadBaseFileName = 'Python-Language-Server';
exports.maxMajorVersion = 0;
exports.PackageNames = {
  [platformData_1.PlatformName.Windows32Bit]: `${downloadBaseFileName}-${platformData_1.PlatformName.Windows32Bit}`,
  [platformData_1.PlatformName.Windows64Bit]: `${downloadBaseFileName}-${platformData_1.PlatformName.Windows64Bit}`,
  [platformData_1.PlatformName.Linux64Bit]: `${downloadBaseFileName}-${platformData_1.PlatformName.Linux64Bit}`,
  [platformData_1.PlatformName.Mac64Bit]: `${downloadBaseFileName}-${platformData_1.PlatformName.Mac64Bit}`
};
let LanguageServerPackageService = class LanguageServerPackageService {
  constructor(serviceContainer, appEnv) {
    this.serviceContainer = serviceContainer;
    this.appEnv = appEnv;
    this.maxMajorVersion = exports.maxMajorVersion;
  }

  getNugetPackageName() {
    const plaform = this.serviceContainer.get(types_3.IPlatformService);

    switch (plaform.info.type) {
      case platform_1.OSType.Windows:
        {
          const is64Bit = plaform.info.architecture === platform_1.Architecture.x64;
          return exports.PackageNames[is64Bit ? platformData_1.PlatformName.Windows64Bit : platformData_1.PlatformName.Windows32Bit];
        }

      case platform_1.OSType.OSX:
        {
          return exports.PackageNames[platformData_1.PlatformName.Mac64Bit];
        }

      default:
        {
          return exports.PackageNames[platformData_1.PlatformName.Linux64Bit];
        }
    }
  }

  getLatestNugetPackageVersion() {
    return __awaiter(this, void 0, void 0, function* () {
      const downloadChannel = this.getLanguageServerDownloadChannel();
      const nugetRepo = this.serviceContainer.get(types_2.INugetRepository, downloadChannel);
      const packageName = this.getNugetPackageName();
      logger_1.traceVerbose(`Listing packages for ${downloadChannel} for ${packageName}`);
      const packages = yield nugetRepo.getPackages(packageName);
      return this.getValidPackage(packages);
    });
  }

  getLanguageServerDownloadChannel() {
    const configService = this.serviceContainer.get(types_4.IConfigurationService);
    const settings = configService.getSettings();

    if (settings.analysis.downloadChannel) {
      return settings.analysis.downloadChannel;
    }

    const isAlphaVersion = this.isAlphaVersionOfExtension();
    return isAlphaVersion ? 'beta' : 'stable';
  }

  getValidPackage(packages) {
    const nugetService = this.serviceContainer.get(types_2.INugetService);
    const validPackages = packages.filter(item => item.version.major === this.maxMajorVersion).filter(item => nugetService.isReleaseVersion(item.version)).sort((a, b) => a.version.compare(b.version));
    const pkg = validPackages[validPackages.length - 1];
    const minimumVersion = this.appEnv.packageJson.languageServerVersion;

    if (pkg.version.compare(minimumVersion) >= 0) {
      return validPackages[validPackages.length - 1];
    } // This is a fall back, if the wrong version is returned, e.g. version is cached downstream in some proxy server or similar.
    // This way, we always ensure we have the minimum version that's compatible.


    return {
      version: new semver_1.SemVer(minimumVersion),
      package: languageServerPackageRepository_1.LanguageServerPackageStorageContainers.stable,
      uri: `${languageServerPackageRepository_1.azureCDNBlobStorageAccount}/${languageServerPackageRepository_1.LanguageServerPackageStorageContainers.stable}/${this.getNugetPackageName()}.${minimumVersion}.nupkg`
    };
  }

  isAlphaVersionOfExtension() {
    const extensions = this.serviceContainer.get(types_4.IExtensions);
    const extension = extensions.getExtension(constants_1.PVSC_EXTENSION_ID);
    const version = semver_1.parse(extension.packageJSON.version);
    return version.prerelease.length > 0 && version.prerelease[0] === 'alpha';
  }

};

__decorate([logger_1.traceVerbose('Get latest language server nuget package version')], LanguageServerPackageService.prototype, "getLatestNugetPackageVersion", null);

LanguageServerPackageService = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_5.IServiceContainer)), __param(1, inversify_1.inject(types_1.IApplicationEnvironment))], LanguageServerPackageService);
exports.LanguageServerPackageService = LanguageServerPackageService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmd1YWdlU2VydmVyUGFja2FnZVNlcnZpY2UuanMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiZXhwb3J0cyIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsInNlbXZlcl8xIiwidHlwZXNfMSIsImNvbnN0YW50c18xIiwibG9nZ2VyXzEiLCJ0eXBlc18yIiwidHlwZXNfMyIsInR5cGVzXzQiLCJwbGF0Zm9ybV8xIiwidHlwZXNfNSIsInBsYXRmb3JtRGF0YV8xIiwibGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeV8xIiwiZG93bmxvYWRCYXNlRmlsZU5hbWUiLCJtYXhNYWpvclZlcnNpb24iLCJQYWNrYWdlTmFtZXMiLCJQbGF0Zm9ybU5hbWUiLCJXaW5kb3dzMzJCaXQiLCJXaW5kb3dzNjRCaXQiLCJMaW51eDY0Qml0IiwiTWFjNjRCaXQiLCJMYW5ndWFnZVNlcnZlclBhY2thZ2VTZXJ2aWNlIiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlQ29udGFpbmVyIiwiYXBwRW52IiwiZ2V0TnVnZXRQYWNrYWdlTmFtZSIsInBsYWZvcm0iLCJnZXQiLCJJUGxhdGZvcm1TZXJ2aWNlIiwiaW5mbyIsInR5cGUiLCJPU1R5cGUiLCJXaW5kb3dzIiwiaXM2NEJpdCIsImFyY2hpdGVjdHVyZSIsIkFyY2hpdGVjdHVyZSIsIng2NCIsIk9TWCIsImdldExhdGVzdE51Z2V0UGFja2FnZVZlcnNpb24iLCJkb3dubG9hZENoYW5uZWwiLCJnZXRMYW5ndWFnZVNlcnZlckRvd25sb2FkQ2hhbm5lbCIsIm51Z2V0UmVwbyIsIklOdWdldFJlcG9zaXRvcnkiLCJwYWNrYWdlTmFtZSIsInRyYWNlVmVyYm9zZSIsInBhY2thZ2VzIiwiZ2V0UGFja2FnZXMiLCJnZXRWYWxpZFBhY2thZ2UiLCJjb25maWdTZXJ2aWNlIiwiSUNvbmZpZ3VyYXRpb25TZXJ2aWNlIiwic2V0dGluZ3MiLCJnZXRTZXR0aW5ncyIsImFuYWx5c2lzIiwiaXNBbHBoYVZlcnNpb24iLCJpc0FscGhhVmVyc2lvbk9mRXh0ZW5zaW9uIiwibnVnZXRTZXJ2aWNlIiwiSU51Z2V0U2VydmljZSIsInZhbGlkUGFja2FnZXMiLCJmaWx0ZXIiLCJpdGVtIiwidmVyc2lvbiIsIm1ham9yIiwiaXNSZWxlYXNlVmVyc2lvbiIsInNvcnQiLCJhIiwiYiIsImNvbXBhcmUiLCJwa2ciLCJtaW5pbXVtVmVyc2lvbiIsInBhY2thZ2VKc29uIiwibGFuZ3VhZ2VTZXJ2ZXJWZXJzaW9uIiwiU2VtVmVyIiwicGFja2FnZSIsIkxhbmd1YWdlU2VydmVyUGFja2FnZVN0b3JhZ2VDb250YWluZXJzIiwic3RhYmxlIiwidXJpIiwiYXp1cmVDRE5CbG9iU3RvcmFnZUFjY291bnQiLCJleHRlbnNpb25zIiwiSUV4dGVuc2lvbnMiLCJleHRlbnNpb24iLCJnZXRFeHRlbnNpb24iLCJQVlNDX0VYVEVOU0lPTl9JRCIsInBhcnNlIiwicGFja2FnZUpTT04iLCJwcmVyZWxlYXNlIiwicHJvdG90eXBlIiwiaW5qZWN0YWJsZSIsImluamVjdCIsIklTZXJ2aWNlQ29udGFpbmVyIiwiSUFwcGxpY2F0aW9uRW52aXJvbm1lbnQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxVQUFVLEdBQUksVUFBUSxTQUFLQSxVQUFk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RUFEc0MsRUFFdEM1RyxPQUFPLENBQUMsQ0FBRCxFQUFJc0IsV0FBVyxDQUFDdUYsTUFBWixDQUFtQjdFLE9BQU8sQ0FBQzhFLGlCQUEzQixDQUFKLENBRitCLEVBR3RDOUcsT0FBTyxDQUFDLENBQUQsRUFBSXNCLFdBQVcsQ0FBQ3VGLE1BQVosQ0FBbUJwRixPQUFPLENBQUNzRix1QkFBM0IsQ0FBSixDQUgrQixDQUFELEVBSXRDcEUsNEJBSnNDLENBQXpDO0FBS0F0QixPQUFPLENBQUNzQiw0QkFBUixHQUF1Q0EsNEJBQXZDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaW52ZXJzaWZ5XzEgPSByZXF1aXJlKFwiaW52ZXJzaWZ5XCIpO1xyXG5jb25zdCBzZW12ZXJfMSA9IHJlcXVpcmUoXCJzZW12ZXJcIik7XHJcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2FwcGxpY2F0aW9uL3R5cGVzXCIpO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vY29uc3RhbnRzXCIpO1xyXG5jb25zdCBsb2dnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vbG9nZ2VyXCIpO1xyXG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9udWdldC90eXBlc1wiKTtcclxuY29uc3QgdHlwZXNfMyA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vcGxhdGZvcm0vdHlwZXNcIik7XHJcbmNvbnN0IHR5cGVzXzQgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3R5cGVzXCIpO1xyXG5jb25zdCBwbGF0Zm9ybV8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi91dGlscy9wbGF0Zm9ybVwiKTtcclxuY29uc3QgdHlwZXNfNSA9IHJlcXVpcmUoXCIuLi8uLi9pb2MvdHlwZXNcIik7XHJcbmNvbnN0IHBsYXRmb3JtRGF0YV8xID0gcmVxdWlyZShcIi4uL3BsYXRmb3JtRGF0YVwiKTtcclxuY29uc3QgbGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeV8xID0gcmVxdWlyZShcIi4vbGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeVwiKTtcclxuY29uc3QgZG93bmxvYWRCYXNlRmlsZU5hbWUgPSAnUHl0aG9uLUxhbmd1YWdlLVNlcnZlcic7XHJcbmV4cG9ydHMubWF4TWFqb3JWZXJzaW9uID0gMDtcclxuZXhwb3J0cy5QYWNrYWdlTmFtZXMgPSB7XHJcbiAgICBbcGxhdGZvcm1EYXRhXzEuUGxhdGZvcm1OYW1lLldpbmRvd3MzMkJpdF06IGAke2Rvd25sb2FkQmFzZUZpbGVOYW1lfS0ke3BsYXRmb3JtRGF0YV8xLlBsYXRmb3JtTmFtZS5XaW5kb3dzMzJCaXR9YCxcclxuICAgIFtwbGF0Zm9ybURhdGFfMS5QbGF0Zm9ybU5hbWUuV2luZG93czY0Qml0XTogYCR7ZG93bmxvYWRCYXNlRmlsZU5hbWV9LSR7cGxhdGZvcm1EYXRhXzEuUGxhdGZvcm1OYW1lLldpbmRvd3M2NEJpdH1gLFxyXG4gICAgW3BsYXRmb3JtRGF0YV8xLlBsYXRmb3JtTmFtZS5MaW51eDY0Qml0XTogYCR7ZG93bmxvYWRCYXNlRmlsZU5hbWV9LSR7cGxhdGZvcm1EYXRhXzEuUGxhdGZvcm1OYW1lLkxpbnV4NjRCaXR9YCxcclxuICAgIFtwbGF0Zm9ybURhdGFfMS5QbGF0Zm9ybU5hbWUuTWFjNjRCaXRdOiBgJHtkb3dubG9hZEJhc2VGaWxlTmFtZX0tJHtwbGF0Zm9ybURhdGFfMS5QbGF0Zm9ybU5hbWUuTWFjNjRCaXR9YFxyXG59O1xyXG5sZXQgTGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlU2VydmljZSA9IGNsYXNzIExhbmd1YWdlU2VydmVyUGFja2FnZVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZUNvbnRhaW5lciwgYXBwRW52KSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlQ29udGFpbmVyID0gc2VydmljZUNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLmFwcEVudiA9IGFwcEVudjtcclxuICAgICAgICB0aGlzLm1heE1ham9yVmVyc2lvbiA9IGV4cG9ydHMubWF4TWFqb3JWZXJzaW9uO1xyXG4gICAgfVxyXG4gICAgZ2V0TnVnZXRQYWNrYWdlTmFtZSgpIHtcclxuICAgICAgICBjb25zdCBwbGFmb3JtID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18zLklQbGF0Zm9ybVNlcnZpY2UpO1xyXG4gICAgICAgIHN3aXRjaCAocGxhZm9ybS5pbmZvLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBwbGF0Zm9ybV8xLk9TVHlwZS5XaW5kb3dzOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpczY0Qml0ID0gcGxhZm9ybS5pbmZvLmFyY2hpdGVjdHVyZSA9PT0gcGxhdGZvcm1fMS5BcmNoaXRlY3R1cmUueDY0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cG9ydHMuUGFja2FnZU5hbWVzW2lzNjRCaXQgPyBwbGF0Zm9ybURhdGFfMS5QbGF0Zm9ybU5hbWUuV2luZG93czY0Qml0IDogcGxhdGZvcm1EYXRhXzEuUGxhdGZvcm1OYW1lLldpbmRvd3MzMkJpdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBwbGF0Zm9ybV8xLk9TVHlwZS5PU1g6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBleHBvcnRzLlBhY2thZ2VOYW1lc1twbGF0Zm9ybURhdGFfMS5QbGF0Zm9ybU5hbWUuTWFjNjRCaXRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBleHBvcnRzLlBhY2thZ2VOYW1lc1twbGF0Zm9ybURhdGFfMS5QbGF0Zm9ybU5hbWUuTGludXg2NEJpdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRMYXRlc3ROdWdldFBhY2thZ2VWZXJzaW9uKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkQ2hhbm5lbCA9IHRoaXMuZ2V0TGFuZ3VhZ2VTZXJ2ZXJEb3dubG9hZENoYW5uZWwoKTtcclxuICAgICAgICAgICAgY29uc3QgbnVnZXRSZXBvID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18yLklOdWdldFJlcG9zaXRvcnksIGRvd25sb2FkQ2hhbm5lbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhY2thZ2VOYW1lID0gdGhpcy5nZXROdWdldFBhY2thZ2VOYW1lKCk7XHJcbiAgICAgICAgICAgIGxvZ2dlcl8xLnRyYWNlVmVyYm9zZShgTGlzdGluZyBwYWNrYWdlcyBmb3IgJHtkb3dubG9hZENoYW5uZWx9IGZvciAke3BhY2thZ2VOYW1lfWApO1xyXG4gICAgICAgICAgICBjb25zdCBwYWNrYWdlcyA9IHlpZWxkIG51Z2V0UmVwby5nZXRQYWNrYWdlcyhwYWNrYWdlTmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbGlkUGFja2FnZShwYWNrYWdlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBnZXRMYW5ndWFnZVNlcnZlckRvd25sb2FkQ2hhbm5lbCgpIHtcclxuICAgICAgICBjb25zdCBjb25maWdTZXJ2aWNlID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc180LklDb25maWd1cmF0aW9uU2VydmljZSk7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBjb25maWdTZXJ2aWNlLmdldFNldHRpbmdzKCk7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLmFuYWx5c2lzLmRvd25sb2FkQ2hhbm5lbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2V0dGluZ3MuYW5hbHlzaXMuZG93bmxvYWRDaGFubmVsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpc0FscGhhVmVyc2lvbiA9IHRoaXMuaXNBbHBoYVZlcnNpb25PZkV4dGVuc2lvbigpO1xyXG4gICAgICAgIHJldHVybiBpc0FscGhhVmVyc2lvbiA/ICdiZXRhJyA6ICdzdGFibGUnO1xyXG4gICAgfVxyXG4gICAgZ2V0VmFsaWRQYWNrYWdlKHBhY2thZ2VzKSB7XHJcbiAgICAgICAgY29uc3QgbnVnZXRTZXJ2aWNlID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18yLklOdWdldFNlcnZpY2UpO1xyXG4gICAgICAgIGNvbnN0IHZhbGlkUGFja2FnZXMgPSBwYWNrYWdlc1xyXG4gICAgICAgICAgICAuZmlsdGVyKGl0ZW0gPT4gaXRlbS52ZXJzaW9uLm1ham9yID09PSB0aGlzLm1heE1ham9yVmVyc2lvbilcclxuICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IG51Z2V0U2VydmljZS5pc1JlbGVhc2VWZXJzaW9uKGl0ZW0udmVyc2lvbikpXHJcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnZlcnNpb24uY29tcGFyZShiLnZlcnNpb24pKTtcclxuICAgICAgICBjb25zdCBwa2cgPSB2YWxpZFBhY2thZ2VzW3ZhbGlkUGFja2FnZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgY29uc3QgbWluaW11bVZlcnNpb24gPSB0aGlzLmFwcEVudi5wYWNrYWdlSnNvbi5sYW5ndWFnZVNlcnZlclZlcnNpb247XHJcbiAgICAgICAgaWYgKHBrZy52ZXJzaW9uLmNvbXBhcmUobWluaW11bVZlcnNpb24pID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkUGFja2FnZXNbdmFsaWRQYWNrYWdlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVGhpcyBpcyBhIGZhbGwgYmFjaywgaWYgdGhlIHdyb25nIHZlcnNpb24gaXMgcmV0dXJuZWQsIGUuZy4gdmVyc2lvbiBpcyBjYWNoZWQgZG93bnN0cmVhbSBpbiBzb21lIHByb3h5IHNlcnZlciBvciBzaW1pbGFyLlxyXG4gICAgICAgIC8vIFRoaXMgd2F5LCB3ZSBhbHdheXMgZW5zdXJlIHdlIGhhdmUgdGhlIG1pbmltdW0gdmVyc2lvbiB0aGF0J3MgY29tcGF0aWJsZS5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2ZXJzaW9uOiBuZXcgc2VtdmVyXzEuU2VtVmVyKG1pbmltdW1WZXJzaW9uKSxcclxuICAgICAgICAgICAgcGFja2FnZTogbGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeV8xLkxhbmd1YWdlU2VydmVyUGFja2FnZVN0b3JhZ2VDb250YWluZXJzLnN0YWJsZSxcclxuICAgICAgICAgICAgdXJpOiBgJHtsYW5ndWFnZVNlcnZlclBhY2thZ2VSZXBvc2l0b3J5XzEuYXp1cmVDRE5CbG9iU3RvcmFnZUFjY291bnR9LyR7bGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeV8xLkxhbmd1YWdlU2VydmVyUGFja2FnZVN0b3JhZ2VDb250YWluZXJzLnN0YWJsZX0vJHt0aGlzLmdldE51Z2V0UGFja2FnZU5hbWUoKX0uJHttaW5pbXVtVmVyc2lvbn0ubnVwa2dgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlzQWxwaGFWZXJzaW9uT2ZFeHRlbnNpb24oKSB7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IHRoaXMuc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfNC5JRXh0ZW5zaW9ucyk7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXRFeHRlbnNpb24oY29uc3RhbnRzXzEuUFZTQ19FWFRFTlNJT05fSUQpO1xyXG4gICAgICAgIGNvbnN0IHZlcnNpb24gPSBzZW12ZXJfMS5wYXJzZShleHRlbnNpb24ucGFja2FnZUpTT04udmVyc2lvbik7XHJcbiAgICAgICAgcmV0dXJuIHZlcnNpb24ucHJlcmVsZWFzZS5sZW5ndGggPiAwICYmIHZlcnNpb24ucHJlcmVsZWFzZVswXSA9PT0gJ2FscGhhJztcclxuICAgIH1cclxufTtcclxuX19kZWNvcmF0ZShbXHJcbiAgICBsb2dnZXJfMS50cmFjZVZlcmJvc2UoJ0dldCBsYXRlc3QgbGFuZ3VhZ2Ugc2VydmVyIG51Z2V0IHBhY2thZ2UgdmVyc2lvbicpXHJcbl0sIExhbmd1YWdlU2VydmVyUGFja2FnZVNlcnZpY2UucHJvdG90eXBlLCBcImdldExhdGVzdE51Z2V0UGFja2FnZVZlcnNpb25cIiwgbnVsbCk7XHJcbkxhbmd1YWdlU2VydmVyUGFja2FnZVNlcnZpY2UgPSBfX2RlY29yYXRlKFtcclxuICAgIGludmVyc2lmeV8xLmluamVjdGFibGUoKSxcclxuICAgIF9fcGFyYW0oMCwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzUuSVNlcnZpY2VDb250YWluZXIpKSxcclxuICAgIF9fcGFyYW0oMSwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzEuSUFwcGxpY2F0aW9uRW52aXJvbm1lbnQpKVxyXG5dLCBMYW5ndWFnZVNlcnZlclBhY2thZ2VTZXJ2aWNlKTtcclxuZXhwb3J0cy5MYW5ndWFnZVNlcnZlclBhY2thZ2VTZXJ2aWNlID0gTGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlU2VydmljZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlU2VydmljZS5qcy5tYXAiXX0=