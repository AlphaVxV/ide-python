"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const crypto_1 = require("crypto");

const fs = require("fs");

const async_1 = require("../common/utils/async");

class HashVerifier {
  verifyHash(filePath, platformString, expectedDigest) {
    return __awaiter(this, void 0, void 0, function* () {
      const readStream = fs.createReadStream(filePath);
      const deferred = async_1.createDeferred();
      const hash = crypto_1.createHash('sha512');
      hash.setEncoding('hex');
      readStream.on('end', () => {
        hash.end();
        deferred.resolve();
      }).on('error', err => {
        deferred.reject(`Unable to calculate file hash. Error ${err}`);
      });
      readStream.pipe(hash);
      yield deferred.promise;
      const actual = hash.read();
      return expectedDigest === platformString ? true : actual.toLowerCase() === expectedDigest.toLowerCase();
    });
  }

}

exports.HashVerifier = HashVerifier;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhhc2hWZXJpZmllci5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiZnMiLCJhc3luY18xIiwiSGFzaFZlcmlmaWVyIiwidmVyaWZ5SGFzaCIsImZpbGVQYXRoIiwicGxhdGZvcm1TdHJpbmciLCJleHBlY3RlZERpZ2VzdCIsInJlYWRTdHJlYW0iLCJjcmVhdGVSZWFkU3RyZWFtIiwiZGVmZXJyZWQiLCJjcmVhdGVEZWZlcnJlZCIsImhhc2giLCJjcmVhdGVIYXNoIiwic2V0RW5jb2RpbmciLCJvbiIsImVuZCIsImVyciIsInBpcGUiLCJwcm9taXNlIiwiYWN0dWFsIiwicmVhZCIsInRvTG93ZXJDYXNlIl0sIm1hcHBpbmdzIjoiQUFBQSxhLENBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDOUYsYUFBU0YsSUFBVCxDQUFjSSxNQUFkLEVBQXNCO0FBQUVBLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjVCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFyQixHQUFzQyxJQUFJTixDQUFKLENBQU0sVUFBVUcsT0FBVixFQUFtQjtBQUFFQSxRQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFQO0FBQXdCLE9BQW5ELEVBQXFETyxJQUFyRCxDQUEwRFIsU0FBMUQsRUFBcUVLLFFBQXJFLENBQXRDO0FBQXVIOztBQUMvSUgsSUFBQUEsSUFBSSxDQUFDLENBQUNOLFNBQVMsR0FBR0EsU0FBUyxDQUFDYSxLQUFWLENBQWdCaEIsT0FBaEIsRUFBeUJDLFVBQVUsSUFBSSxFQUF2QyxDQUFiLEVBQXlEUyxJQUF6RCxFQUFELENBQUo7QUFDSCxHQUxNLENBQVA7QUFNSCxDQVBEOztBQVFBTyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVYLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1ZLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUMsSUFBRCxDQUFsQjs7QUFDQSxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyx1QkFBRCxDQUF2Qjs7QUFDQSxNQUFNRyxZQUFOLENBQW1CO0FBQ2ZDLEVBQUFBLFVBQVUsQ0FBQ0MsUUFBRCxFQUFXQyxjQUFYLEVBQTJCQyxjQUEzQixFQUEyQztBQUNqRCxXQUFPN0IsU0FBUyxDQUFDLElBQUQsRUFBTyxLQUFLLENBQVosRUFBZSxLQUFLLENBQXBCLEVBQXVCLGFBQWE7QUFDaEQsWUFBTThCLFVBQVUsR0FBR1AsRUFBRSxDQUFDUSxnQkFBSCxDQUFvQkosUUFBcEIsQ0FBbkI7QUFDQSxZQUFNSyxRQUFRLEdBQUdSLE9BQU8sQ0FBQ1MsY0FBUixFQUFqQjtBQUNBLFlBQU1DLElBQUksR0FBR2IsUUFBUSxDQUFDYyxVQUFULENBQW9CLFFBQXBCLENBQWI7QUFDQUQsTUFBQUEsSUFBSSxDQUFDRSxXQUFMLENBQWlCLEtBQWpCO0FBQ0FOLE1BQUFBLFVBQVUsQ0FDTE8sRUFETCxDQUNRLEtBRFIsRUFDZSxNQUFNO0FBQ2pCSCxRQUFBQSxJQUFJLENBQUNJLEdBQUw7QUFDQU4sUUFBQUEsUUFBUSxDQUFDMUIsT0FBVDtBQUNILE9BSkQsRUFLSytCLEVBTEwsQ0FLUSxPQUxSLEVBS2tCRSxHQUFELElBQVM7QUFDdEJQLFFBQUFBLFFBQVEsQ0FBQ3pCLE1BQVQsQ0FBaUIsd0NBQXVDZ0MsR0FBSSxFQUE1RDtBQUNILE9BUEQ7QUFRQVQsTUFBQUEsVUFBVSxDQUFDVSxJQUFYLENBQWdCTixJQUFoQjtBQUNBLFlBQU1GLFFBQVEsQ0FBQ1MsT0FBZjtBQUNBLFlBQU1DLE1BQU0sR0FBR1IsSUFBSSxDQUFDUyxJQUFMLEVBQWY7QUFDQSxhQUFPZCxjQUFjLEtBQUtELGNBQW5CLEdBQW9DLElBQXBDLEdBQTJDYyxNQUFNLENBQUNFLFdBQVAsT0FBeUJmLGNBQWMsQ0FBQ2UsV0FBZixFQUEzRTtBQUNILEtBakJlLENBQWhCO0FBa0JIOztBQXBCYzs7QUFzQm5CeEIsT0FBTyxDQUFDSyxZQUFSLEdBQXVCQSxZQUF2QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XHJcbmNvbnN0IGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL3V0aWxzL2FzeW5jXCIpO1xyXG5jbGFzcyBIYXNoVmVyaWZpZXIge1xyXG4gICAgdmVyaWZ5SGFzaChmaWxlUGF0aCwgcGxhdGZvcm1TdHJpbmcsIGV4cGVjdGVkRGlnZXN0KSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVhZFN0cmVhbSA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZVBhdGgpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9IGFzeW5jXzEuY3JlYXRlRGVmZXJyZWQoKTtcclxuICAgICAgICAgICAgY29uc3QgaGFzaCA9IGNyeXB0b18xLmNyZWF0ZUhhc2goJ3NoYTUxMicpO1xyXG4gICAgICAgICAgICBoYXNoLnNldEVuY29kaW5nKCdoZXgnKTtcclxuICAgICAgICAgICAgcmVhZFN0cmVhbVxyXG4gICAgICAgICAgICAgICAgLm9uKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYXNoLmVuZCgpO1xyXG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLm9uKCdlcnJvcicsIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChgVW5hYmxlIHRvIGNhbGN1bGF0ZSBmaWxlIGhhc2guIEVycm9yICR7ZXJyfWApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVhZFN0cmVhbS5waXBlKGhhc2gpO1xyXG4gICAgICAgICAgICB5aWVsZCBkZWZlcnJlZC5wcm9taXNlO1xyXG4gICAgICAgICAgICBjb25zdCBhY3R1YWwgPSBoYXNoLnJlYWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkRGlnZXN0ID09PSBwbGF0Zm9ybVN0cmluZyA/IHRydWUgOiBhY3R1YWwudG9Mb3dlckNhc2UoKSA9PT0gZXhwZWN0ZWREaWdlc3QudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkhhc2hWZXJpZmllciA9IEhhc2hWZXJpZmllcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaFZlcmlmaWVyLmpzLm1hcCJdfQ==