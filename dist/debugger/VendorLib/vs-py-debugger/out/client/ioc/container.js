"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const events_1 = require("events");

const inversify_1 = require("inversify"); // This needs to be done once, hence placed in a common location.
// Used by UnitTestSockerServer and also the extension unit tests.
// Place within try..catch, as this can only be done once (it's
// possible another extesion would perform this before our extension).


try {
  inversify_1.decorate(inversify_1.injectable(), events_1.EventEmitter);
} catch (ex) {
  console.warn('Failed to decorate EventEmitter for DI (possibly already decorated by another Extension)', ex);
}

let ServiceContainer = class ServiceContainer {
  constructor(container) {
    this.container = container;
  }

  get(serviceIdentifier, name) {
    return name ? this.container.getNamed(serviceIdentifier, name) : this.container.get(serviceIdentifier);
  }

  getAll(serviceIdentifier, name) {
    return name ? this.container.getAllNamed(serviceIdentifier, name) : this.container.getAll(serviceIdentifier);
  }

};
ServiceContainer = __decorate([inversify_1.injectable()], ServiceContainer);
exports.ServiceContainer = ServiceContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbnRhaW5lci5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJldmVudHNfMSIsInJlcXVpcmUiLCJpbnZlcnNpZnlfMSIsImluamVjdGFibGUiLCJFdmVudEVtaXR0ZXIiLCJleCIsImNvbnNvbGUiLCJ3YXJuIiwiU2VydmljZUNvbnRhaW5lciIsImNvbnN0cnVjdG9yIiwiY29udGFpbmVyIiwiZ2V0Iiwic2VydmljZUlkZW50aWZpZXIiLCJuYW1lIiwiZ2V0TmFtZWQiLCJnZXRBbGwiLCJnZXRBbGxOYW1lZCJdLCJtYXBwaW5ncyI6IkFBQUEsYSxDQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsVUFBVSxHQUFJLFVBQVEsU0FBS0EsVUFBZCxJQUE2QixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ25GLE1BQUlDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFsQjtBQUFBLE1BQTBCQyxDQUFDLEdBQUdILENBQUMsR0FBRyxDQUFKLEdBQVFILE1BQVIsR0FBaUJFLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFJLEdBQUdLLE1BQU0sQ0FBQ0Msd0JBQVAsQ0FBZ0NSLE1BQWhDLEVBQXdDQyxHQUF4QyxDQUF2QixHQUFzRUMsSUFBckg7QUFBQSxNQUEySE8sQ0FBM0g7QUFDQSxNQUFJLE9BQU9DLE9BQVAsS0FBbUIsUUFBbkIsSUFBK0IsT0FBT0EsT0FBTyxDQUFDQyxRQUFmLEtBQTRCLFVBQS9ELEVBQTJFTCxDQUFDLEdBQUdJLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQlosVUFBakIsRUFBNkJDLE1BQTdCLEVBQXFDQyxHQUFyQyxFQUEwQ0MsSUFBMUMsQ0FBSixDQUEzRSxLQUNLLEtBQUssSUFBSVUsQ0FBQyxHQUFHYixVQUFVLENBQUNNLE1BQVgsR0FBb0IsQ0FBakMsRUFBb0NPLENBQUMsSUFBSSxDQUF6QyxFQUE0Q0EsQ0FBQyxFQUE3QyxFQUFpRCxJQUFJSCxDQUFDLEdBQUdWLFVBQVUsQ0FBQ2EsQ0FBRCxDQUFsQixFQUF1Qk4sQ0FBQyxHQUFHLENBQUNILENBQUMsR0FBRyxDQUFKLEdBQVFNLENBQUMsQ0FBQ0gsQ0FBRCxDQUFULEdBQWVILENBQUMsR0FBRyxDQUFKLEdBQVFNLENBQUMsQ0FBQ1QsTUFBRCxFQUFTQyxHQUFULEVBQWNLLENBQWQsQ0FBVCxHQUE0QkcsQ0FBQyxDQUFDVCxNQUFELEVBQVNDLEdBQVQsQ0FBN0MsS0FBK0RLLENBQW5FO0FBQzdFLFNBQU9ILENBQUMsR0FBRyxDQUFKLElBQVNHLENBQVQsSUFBY0MsTUFBTSxDQUFDTSxjQUFQLENBQXNCYixNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNLLENBQW5DLENBQWQsRUFBcURBLENBQTVEO0FBQ0gsQ0FMRDs7QUFNQUMsTUFBTSxDQUFDTSxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxRQUFRLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXhCOztBQUNBLE1BQU1DLFdBQVcsR0FBR0QsT0FBTyxDQUFDLFdBQUQsQ0FBM0IsQyxDQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxJQUFJO0FBQ0FDLEVBQUFBLFdBQVcsQ0FBQ1AsUUFBWixDQUFxQk8sV0FBVyxDQUFDQyxVQUFaLEVBQXJCLEVBQStDSCxRQUFRLENBQUNJLFlBQXhEO0FBQ0gsQ0FGRCxDQUdBLE9BQU9DLEVBQVAsRUFBVztBQUNQQyxFQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSwwRkFBYixFQUF5R0YsRUFBekc7QUFDSDs7QUFDRCxJQUFJRyxnQkFBZ0IsR0FBRyxNQUFNQSxnQkFBTixDQUF1QjtBQUMxQ0MsRUFBQUEsV0FBVyxDQUFDQyxTQUFELEVBQVk7QUFDbkIsU0FBS0EsU0FBTCxHQUFpQkEsU0FBakI7QUFDSDs7QUFDREMsRUFBQUEsR0FBRyxDQUFDQyxpQkFBRCxFQUFvQkMsSUFBcEIsRUFBMEI7QUFDekIsV0FBT0EsSUFBSSxHQUFHLEtBQUtILFNBQUwsQ0FBZUksUUFBZixDQUF3QkYsaUJBQXhCLEVBQTJDQyxJQUEzQyxDQUFILEdBQXNELEtBQUtILFNBQUwsQ0FBZUMsR0FBZixDQUFtQkMsaUJBQW5CLENBQWpFO0FBQ0g7O0FBQ0RHLEVBQUFBLE1BQU0sQ0FBQ0gsaUJBQUQsRUFBb0JDLElBQXBCLEVBQTBCO0FBQzVCLFdBQU9BLElBQUksR0FBRyxLQUFLSCxTQUFMLENBQWVNLFdBQWYsQ0FBMkJKLGlCQUEzQixFQUE4Q0MsSUFBOUMsQ0FBSCxHQUF5RCxLQUFLSCxTQUFMLENBQWVLLE1BQWYsQ0FBc0JILGlCQUF0QixDQUFwRTtBQUNIOztBQVR5QyxDQUE5QztBQVdBSixnQkFBZ0IsR0FBRzFCLFVBQVUsQ0FBQyxDQUMxQm9CLFdBQVcsQ0FBQ0MsVUFBWixFQUQwQixDQUFELEVBRTFCSyxnQkFGMEIsQ0FBN0I7QUFHQVYsT0FBTyxDQUFDVSxnQkFBUixHQUEyQkEsZ0JBQTNCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xyXG5jb25zdCBpbnZlcnNpZnlfMSA9IHJlcXVpcmUoXCJpbnZlcnNpZnlcIik7XHJcbi8vIFRoaXMgbmVlZHMgdG8gYmUgZG9uZSBvbmNlLCBoZW5jZSBwbGFjZWQgaW4gYSBjb21tb24gbG9jYXRpb24uXHJcbi8vIFVzZWQgYnkgVW5pdFRlc3RTb2NrZXJTZXJ2ZXIgYW5kIGFsc28gdGhlIGV4dGVuc2lvbiB1bml0IHRlc3RzLlxyXG4vLyBQbGFjZSB3aXRoaW4gdHJ5Li5jYXRjaCwgYXMgdGhpcyBjYW4gb25seSBiZSBkb25lIG9uY2UgKGl0J3NcclxuLy8gcG9zc2libGUgYW5vdGhlciBleHRlc2lvbiB3b3VsZCBwZXJmb3JtIHRoaXMgYmVmb3JlIG91ciBleHRlbnNpb24pLlxyXG50cnkge1xyXG4gICAgaW52ZXJzaWZ5XzEuZGVjb3JhdGUoaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpLCBldmVudHNfMS5FdmVudEVtaXR0ZXIpO1xyXG59XHJcbmNhdGNoIChleCkge1xyXG4gICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gZGVjb3JhdGUgRXZlbnRFbWl0dGVyIGZvciBESSAocG9zc2libHkgYWxyZWFkeSBkZWNvcmF0ZWQgYnkgYW5vdGhlciBFeHRlbnNpb24pJywgZXgpO1xyXG59XHJcbmxldCBTZXJ2aWNlQ29udGFpbmVyID0gY2xhc3MgU2VydmljZUNvbnRhaW5lciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIGdldChzZXJ2aWNlSWRlbnRpZmllciwgbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBuYW1lID8gdGhpcy5jb250YWluZXIuZ2V0TmFtZWQoc2VydmljZUlkZW50aWZpZXIsIG5hbWUpIDogdGhpcy5jb250YWluZXIuZ2V0KHNlcnZpY2VJZGVudGlmaWVyKTtcclxuICAgIH1cclxuICAgIGdldEFsbChzZXJ2aWNlSWRlbnRpZmllciwgbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBuYW1lID8gdGhpcy5jb250YWluZXIuZ2V0QWxsTmFtZWQoc2VydmljZUlkZW50aWZpZXIsIG5hbWUpIDogdGhpcy5jb250YWluZXIuZ2V0QWxsKHNlcnZpY2VJZGVudGlmaWVyKTtcclxuICAgIH1cclxufTtcclxuU2VydmljZUNvbnRhaW5lciA9IF9fZGVjb3JhdGUoW1xyXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpXHJcbl0sIFNlcnZpY2VDb250YWluZXIpO1xyXG5leHBvcnRzLlNlcnZpY2VDb250YWluZXIgPSBTZXJ2aWNlQ29udGFpbmVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250YWluZXIuanMubWFwIl19