'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const path = require("path");

const vscode = require("vscode");

const constants_1 = require("../common/constants");

const telemetry_1 = require("../telemetry");

const constants_2 = require("../telemetry/constants");

function activateUpdateSparkLibraryProvider() {
  return vscode.commands.registerCommand(constants_1.Commands.Update_SparkLibrary, updateSparkLibrary);
}

exports.activateUpdateSparkLibraryProvider = activateUpdateSparkLibraryProvider;

function updateSparkLibrary() {
  const pythonConfig = vscode.workspace.getConfiguration('python');
  const extraLibPath = 'autoComplete.extraPaths'; // tslint:disable-next-line:no-invalid-template-strings

  const sparkHomePath = '${env:SPARK_HOME}';
  pythonConfig.update(extraLibPath, [path.join(sparkHomePath, 'python'), path.join(sparkHomePath, 'python/pyspark')]).then(() => {//Done
  }, reason => {
    vscode.window.showErrorMessage(`Failed to update ${extraLibPath}. Error: ${reason.message}`);
    console.error(reason);
  });
  vscode.window.showInformationMessage('Make sure you have SPARK_HOME environment variable set to the root path of the local spark installation!');
  telemetry_1.sendTelemetryEvent(constants_2.UPDATE_PYSPARK_LIBRARY);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVwZGF0ZVNwYXJrTGlicmFyeVByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGF0aCIsInJlcXVpcmUiLCJ2c2NvZGUiLCJjb25zdGFudHNfMSIsInRlbGVtZXRyeV8xIiwiY29uc3RhbnRzXzIiLCJhY3RpdmF0ZVVwZGF0ZVNwYXJrTGlicmFyeVByb3ZpZGVyIiwiY29tbWFuZHMiLCJyZWdpc3RlckNvbW1hbmQiLCJDb21tYW5kcyIsIlVwZGF0ZV9TcGFya0xpYnJhcnkiLCJ1cGRhdGVTcGFya0xpYnJhcnkiLCJweXRob25Db25maWciLCJ3b3Jrc3BhY2UiLCJnZXRDb25maWd1cmF0aW9uIiwiZXh0cmFMaWJQYXRoIiwic3BhcmtIb21lUGF0aCIsInVwZGF0ZSIsImpvaW4iLCJ0aGVuIiwicmVhc29uIiwid2luZG93Iiwic2hvd0Vycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJzaG93SW5mb3JtYXRpb25NZXNzYWdlIiwic2VuZFRlbGVtZXRyeUV2ZW50IiwiVVBEQVRFX1BZU1BBUktfTElCUkFSWSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1FLFdBQVcsR0FBR0YsT0FBTyxDQUFDLHFCQUFELENBQTNCOztBQUNBLE1BQU1HLFdBQVcsR0FBR0gsT0FBTyxDQUFDLGNBQUQsQ0FBM0I7O0FBQ0EsTUFBTUksV0FBVyxHQUFHSixPQUFPLENBQUMsd0JBQUQsQ0FBM0I7O0FBQ0EsU0FBU0ssa0NBQVQsR0FBOEM7QUFDMUMsU0FBT0osTUFBTSxDQUFDSyxRQUFQLENBQWdCQyxlQUFoQixDQUFnQ0wsV0FBVyxDQUFDTSxRQUFaLENBQXFCQyxtQkFBckQsRUFBMEVDLGtCQUExRSxDQUFQO0FBQ0g7O0FBQ0RiLE9BQU8sQ0FBQ1Esa0NBQVIsR0FBNkNBLGtDQUE3Qzs7QUFDQSxTQUFTSyxrQkFBVCxHQUE4QjtBQUMxQixRQUFNQyxZQUFZLEdBQUdWLE1BQU0sQ0FBQ1csU0FBUCxDQUFpQkMsZ0JBQWpCLENBQWtDLFFBQWxDLENBQXJCO0FBQ0EsUUFBTUMsWUFBWSxHQUFHLHlCQUFyQixDQUYwQixDQUcxQjs7QUFDQSxRQUFNQyxhQUFhLEdBQUcsbUJBQXRCO0FBQ0FKLEVBQUFBLFlBQVksQ0FBQ0ssTUFBYixDQUFvQkYsWUFBcEIsRUFBa0MsQ0FBQ2YsSUFBSSxDQUFDa0IsSUFBTCxDQUFVRixhQUFWLEVBQXlCLFFBQXpCLENBQUQsRUFDOUJoQixJQUFJLENBQUNrQixJQUFMLENBQVVGLGFBQVYsRUFBeUIsZ0JBQXpCLENBRDhCLENBQWxDLEVBQ2lERyxJQURqRCxDQUNzRCxNQUFNLENBQ3hEO0FBQ0gsR0FIRCxFQUdHQyxNQUFNLElBQUk7QUFDVGxCLElBQUFBLE1BQU0sQ0FBQ21CLE1BQVAsQ0FBY0MsZ0JBQWQsQ0FBZ0Msb0JBQW1CUCxZQUFhLFlBQVdLLE1BQU0sQ0FBQ0csT0FBUSxFQUExRjtBQUNBQyxJQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY0wsTUFBZDtBQUNILEdBTkQ7QUFPQWxCLEVBQUFBLE1BQU0sQ0FBQ21CLE1BQVAsQ0FBY0ssc0JBQWQsQ0FBcUMsMEdBQXJDO0FBQ0F0QixFQUFBQSxXQUFXLENBQUN1QixrQkFBWixDQUErQnRCLFdBQVcsQ0FBQ3VCLHNCQUEzQztBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgdnNjb2RlID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2NvbnN0YW50c1wiKTtcclxuY29uc3QgdGVsZW1ldHJ5XzEgPSByZXF1aXJlKFwiLi4vdGVsZW1ldHJ5XCIpO1xyXG5jb25zdCBjb25zdGFudHNfMiA9IHJlcXVpcmUoXCIuLi90ZWxlbWV0cnkvY29uc3RhbnRzXCIpO1xyXG5mdW5jdGlvbiBhY3RpdmF0ZVVwZGF0ZVNwYXJrTGlicmFyeVByb3ZpZGVyKCkge1xyXG4gICAgcmV0dXJuIHZzY29kZS5jb21tYW5kcy5yZWdpc3RlckNvbW1hbmQoY29uc3RhbnRzXzEuQ29tbWFuZHMuVXBkYXRlX1NwYXJrTGlicmFyeSwgdXBkYXRlU3BhcmtMaWJyYXJ5KTtcclxufVxyXG5leHBvcnRzLmFjdGl2YXRlVXBkYXRlU3BhcmtMaWJyYXJ5UHJvdmlkZXIgPSBhY3RpdmF0ZVVwZGF0ZVNwYXJrTGlicmFyeVByb3ZpZGVyO1xyXG5mdW5jdGlvbiB1cGRhdGVTcGFya0xpYnJhcnkoKSB7XHJcbiAgICBjb25zdCBweXRob25Db25maWcgPSB2c2NvZGUud29ya3NwYWNlLmdldENvbmZpZ3VyYXRpb24oJ3B5dGhvbicpO1xyXG4gICAgY29uc3QgZXh0cmFMaWJQYXRoID0gJ2F1dG9Db21wbGV0ZS5leHRyYVBhdGhzJztcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnZhbGlkLXRlbXBsYXRlLXN0cmluZ3NcclxuICAgIGNvbnN0IHNwYXJrSG9tZVBhdGggPSAnJHtlbnY6U1BBUktfSE9NRX0nO1xyXG4gICAgcHl0aG9uQ29uZmlnLnVwZGF0ZShleHRyYUxpYlBhdGgsIFtwYXRoLmpvaW4oc3BhcmtIb21lUGF0aCwgJ3B5dGhvbicpLFxyXG4gICAgICAgIHBhdGguam9pbihzcGFya0hvbWVQYXRoLCAncHl0aG9uL3B5c3BhcmsnKV0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIC8vRG9uZVxyXG4gICAgfSwgcmVhc29uID0+IHtcclxuICAgICAgICB2c2NvZGUud2luZG93LnNob3dFcnJvck1lc3NhZ2UoYEZhaWxlZCB0byB1cGRhdGUgJHtleHRyYUxpYlBhdGh9LiBFcnJvcjogJHtyZWFzb24ubWVzc2FnZX1gKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKHJlYXNvbik7XHJcbiAgICB9KTtcclxuICAgIHZzY29kZS53aW5kb3cuc2hvd0luZm9ybWF0aW9uTWVzc2FnZSgnTWFrZSBzdXJlIHlvdSBoYXZlIFNQQVJLX0hPTUUgZW52aXJvbm1lbnQgdmFyaWFibGUgc2V0IHRvIHRoZSByb290IHBhdGggb2YgdGhlIGxvY2FsIHNwYXJrIGluc3RhbGxhdGlvbiEnKTtcclxuICAgIHRlbGVtZXRyeV8xLnNlbmRUZWxlbWV0cnlFdmVudChjb25zdGFudHNfMi5VUERBVEVfUFlTUEFSS19MSUJSQVJZKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11cGRhdGVTcGFya0xpYnJhcnlQcm92aWRlci5qcy5tYXAiXX0=