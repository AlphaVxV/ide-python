"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

const lineFormatter_1 = require("../formatters/lineFormatter");

const types_1 = require("../language/types");

const providerUtilities_1 = require("../providers/providerUtilities");

class OnEnterFormatter {
  constructor() {
    this.formatter = new lineFormatter_1.LineFormatter();
  }

  provideOnTypeFormattingEdits(document, position, ch, options, cancellationToken) {
    if (position.line === 0) {
      return [];
    } // Check case when the entire line belongs to a comment or string


    const prevLine = document.lineAt(position.line - 1);
    const tokens = providerUtilities_1.getDocumentTokens(document, position, types_1.TokenizerMode.CommentsAndStrings);
    const lineStartTokenIndex = tokens.getItemContaining(document.offsetAt(prevLine.range.start));
    const lineEndTokenIndex = tokens.getItemContaining(document.offsetAt(prevLine.range.end));

    if (lineStartTokenIndex >= 0 && lineStartTokenIndex === lineEndTokenIndex) {
      const token = tokens.getItemAt(lineStartTokenIndex);

      if (token.type === types_1.TokenType.Semicolon || token.type === types_1.TokenType.String) {
        return [];
      }
    }

    const formatted = this.formatter.formatLine(document, prevLine.lineNumber);

    if (formatted === prevLine.text) {
      return [];
    }

    return [new vscode_1.TextEdit(prevLine.range, formatted)];
  }

}

exports.OnEnterFormatter = OnEnterFormatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9uRW50ZXJGb3JtYXR0ZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2c2NvZGVfMSIsInJlcXVpcmUiLCJsaW5lRm9ybWF0dGVyXzEiLCJ0eXBlc18xIiwicHJvdmlkZXJVdGlsaXRpZXNfMSIsIk9uRW50ZXJGb3JtYXR0ZXIiLCJjb25zdHJ1Y3RvciIsImZvcm1hdHRlciIsIkxpbmVGb3JtYXR0ZXIiLCJwcm92aWRlT25UeXBlRm9ybWF0dGluZ0VkaXRzIiwiZG9jdW1lbnQiLCJwb3NpdGlvbiIsImNoIiwib3B0aW9ucyIsImNhbmNlbGxhdGlvblRva2VuIiwibGluZSIsInByZXZMaW5lIiwibGluZUF0IiwidG9rZW5zIiwiZ2V0RG9jdW1lbnRUb2tlbnMiLCJUb2tlbml6ZXJNb2RlIiwiQ29tbWVudHNBbmRTdHJpbmdzIiwibGluZVN0YXJ0VG9rZW5JbmRleCIsImdldEl0ZW1Db250YWluaW5nIiwib2Zmc2V0QXQiLCJyYW5nZSIsInN0YXJ0IiwibGluZUVuZFRva2VuSW5kZXgiLCJlbmQiLCJ0b2tlbiIsImdldEl0ZW1BdCIsInR5cGUiLCJUb2tlblR5cGUiLCJTZW1pY29sb24iLCJTdHJpbmciLCJmb3JtYXR0ZWQiLCJmb3JtYXRMaW5lIiwibGluZU51bWJlciIsInRleHQiLCJUZXh0RWRpdCJdLCJtYXBwaW5ncyI6IkFBQUEsYSxDQUNBO0FBQ0E7O0FBQ0FBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHQyxPQUFPLENBQUMsUUFBRCxDQUF4Qjs7QUFDQSxNQUFNQyxlQUFlLEdBQUdELE9BQU8sQ0FBQyw2QkFBRCxDQUEvQjs7QUFDQSxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxtQkFBRCxDQUF2Qjs7QUFDQSxNQUFNRyxtQkFBbUIsR0FBR0gsT0FBTyxDQUFDLGdDQUFELENBQW5DOztBQUNBLE1BQU1JLGdCQUFOLENBQXVCO0FBQ25CQyxFQUFBQSxXQUFXLEdBQUc7QUFDVixTQUFLQyxTQUFMLEdBQWlCLElBQUlMLGVBQWUsQ0FBQ00sYUFBcEIsRUFBakI7QUFDSDs7QUFDREMsRUFBQUEsNEJBQTRCLENBQUNDLFFBQUQsRUFBV0MsUUFBWCxFQUFxQkMsRUFBckIsRUFBeUJDLE9BQXpCLEVBQWtDQyxpQkFBbEMsRUFBcUQ7QUFDN0UsUUFBSUgsUUFBUSxDQUFDSSxJQUFULEtBQWtCLENBQXRCLEVBQXlCO0FBQ3JCLGFBQU8sRUFBUDtBQUNILEtBSDRFLENBSTdFOzs7QUFDQSxVQUFNQyxRQUFRLEdBQUdOLFFBQVEsQ0FBQ08sTUFBVCxDQUFnQk4sUUFBUSxDQUFDSSxJQUFULEdBQWdCLENBQWhDLENBQWpCO0FBQ0EsVUFBTUcsTUFBTSxHQUFHZCxtQkFBbUIsQ0FBQ2UsaUJBQXBCLENBQXNDVCxRQUF0QyxFQUFnREMsUUFBaEQsRUFBMERSLE9BQU8sQ0FBQ2lCLGFBQVIsQ0FBc0JDLGtCQUFoRixDQUFmO0FBQ0EsVUFBTUMsbUJBQW1CLEdBQUdKLE1BQU0sQ0FBQ0ssaUJBQVAsQ0FBeUJiLFFBQVEsQ0FBQ2MsUUFBVCxDQUFrQlIsUUFBUSxDQUFDUyxLQUFULENBQWVDLEtBQWpDLENBQXpCLENBQTVCO0FBQ0EsVUFBTUMsaUJBQWlCLEdBQUdULE1BQU0sQ0FBQ0ssaUJBQVAsQ0FBeUJiLFFBQVEsQ0FBQ2MsUUFBVCxDQUFrQlIsUUFBUSxDQUFDUyxLQUFULENBQWVHLEdBQWpDLENBQXpCLENBQTFCOztBQUNBLFFBQUlOLG1CQUFtQixJQUFJLENBQXZCLElBQTRCQSxtQkFBbUIsS0FBS0ssaUJBQXhELEVBQTJFO0FBQ3ZFLFlBQU1FLEtBQUssR0FBR1gsTUFBTSxDQUFDWSxTQUFQLENBQWlCUixtQkFBakIsQ0FBZDs7QUFDQSxVQUFJTyxLQUFLLENBQUNFLElBQU4sS0FBZTVCLE9BQU8sQ0FBQzZCLFNBQVIsQ0FBa0JDLFNBQWpDLElBQThDSixLQUFLLENBQUNFLElBQU4sS0FBZTVCLE9BQU8sQ0FBQzZCLFNBQVIsQ0FBa0JFLE1BQW5GLEVBQTJGO0FBQ3ZGLGVBQU8sRUFBUDtBQUNIO0FBQ0o7O0FBQ0QsVUFBTUMsU0FBUyxHQUFHLEtBQUs1QixTQUFMLENBQWU2QixVQUFmLENBQTBCMUIsUUFBMUIsRUFBb0NNLFFBQVEsQ0FBQ3FCLFVBQTdDLENBQWxCOztBQUNBLFFBQUlGLFNBQVMsS0FBS25CLFFBQVEsQ0FBQ3NCLElBQTNCLEVBQWlDO0FBQzdCLGFBQU8sRUFBUDtBQUNIOztBQUNELFdBQU8sQ0FBQyxJQUFJdEMsUUFBUSxDQUFDdUMsUUFBYixDQUFzQnZCLFFBQVEsQ0FBQ1MsS0FBL0IsRUFBc0NVLFNBQXRDLENBQUQsQ0FBUDtBQUNIOztBQXhCa0I7O0FBMEJ2QnJDLE9BQU8sQ0FBQ08sZ0JBQVIsR0FBMkJBLGdCQUEzQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHZzY29kZV8xID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY29uc3QgbGluZUZvcm1hdHRlcl8xID0gcmVxdWlyZShcIi4uL2Zvcm1hdHRlcnMvbGluZUZvcm1hdHRlclwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9sYW5ndWFnZS90eXBlc1wiKTtcclxuY29uc3QgcHJvdmlkZXJVdGlsaXRpZXNfMSA9IHJlcXVpcmUoXCIuLi9wcm92aWRlcnMvcHJvdmlkZXJVdGlsaXRpZXNcIik7XHJcbmNsYXNzIE9uRW50ZXJGb3JtYXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtYXR0ZXIgPSBuZXcgbGluZUZvcm1hdHRlcl8xLkxpbmVGb3JtYXR0ZXIoKTtcclxuICAgIH1cclxuICAgIHByb3ZpZGVPblR5cGVGb3JtYXR0aW5nRWRpdHMoZG9jdW1lbnQsIHBvc2l0aW9uLCBjaCwgb3B0aW9ucywgY2FuY2VsbGF0aW9uVG9rZW4pIHtcclxuICAgICAgICBpZiAocG9zaXRpb24ubGluZSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIENoZWNrIGNhc2Ugd2hlbiB0aGUgZW50aXJlIGxpbmUgYmVsb25ncyB0byBhIGNvbW1lbnQgb3Igc3RyaW5nXHJcbiAgICAgICAgY29uc3QgcHJldkxpbmUgPSBkb2N1bWVudC5saW5lQXQocG9zaXRpb24ubGluZSAtIDEpO1xyXG4gICAgICAgIGNvbnN0IHRva2VucyA9IHByb3ZpZGVyVXRpbGl0aWVzXzEuZ2V0RG9jdW1lbnRUb2tlbnMoZG9jdW1lbnQsIHBvc2l0aW9uLCB0eXBlc18xLlRva2VuaXplck1vZGUuQ29tbWVudHNBbmRTdHJpbmdzKTtcclxuICAgICAgICBjb25zdCBsaW5lU3RhcnRUb2tlbkluZGV4ID0gdG9rZW5zLmdldEl0ZW1Db250YWluaW5nKGRvY3VtZW50Lm9mZnNldEF0KHByZXZMaW5lLnJhbmdlLnN0YXJ0KSk7XHJcbiAgICAgICAgY29uc3QgbGluZUVuZFRva2VuSW5kZXggPSB0b2tlbnMuZ2V0SXRlbUNvbnRhaW5pbmcoZG9jdW1lbnQub2Zmc2V0QXQocHJldkxpbmUucmFuZ2UuZW5kKSk7XHJcbiAgICAgICAgaWYgKGxpbmVTdGFydFRva2VuSW5kZXggPj0gMCAmJiBsaW5lU3RhcnRUb2tlbkluZGV4ID09PSBsaW5lRW5kVG9rZW5JbmRleCkge1xyXG4gICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRva2Vucy5nZXRJdGVtQXQobGluZVN0YXJ0VG9rZW5JbmRleCk7XHJcbiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSB0eXBlc18xLlRva2VuVHlwZS5TZW1pY29sb24gfHwgdG9rZW4udHlwZSA9PT0gdHlwZXNfMS5Ub2tlblR5cGUuU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZm9ybWF0dGVkID0gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0TGluZShkb2N1bWVudCwgcHJldkxpbmUubGluZU51bWJlcik7XHJcbiAgICAgICAgaWYgKGZvcm1hdHRlZCA9PT0gcHJldkxpbmUudGV4dCkge1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbbmV3IHZzY29kZV8xLlRleHRFZGl0KHByZXZMaW5lLnJhbmdlLCBmb3JtYXR0ZWQpXTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk9uRW50ZXJGb3JtYXR0ZXIgPSBPbkVudGVyRm9ybWF0dGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbkVudGVyRm9ybWF0dGVyLmpzLm1hcCJdfQ==