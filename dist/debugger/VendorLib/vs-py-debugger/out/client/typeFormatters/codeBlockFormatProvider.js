"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

const vscode_2 = require("vscode");

class CodeBlockFormatProvider {
  constructor(blockRegExp, previousBlockRegExps, boundaryRegExps) {
    this.blockRegExp = blockRegExp;
    this.previousBlockRegExps = previousBlockRegExps;
    this.boundaryRegExps = boundaryRegExps;
  }

  canProvideEdits(line) {
    return this.blockRegExp.test(line);
  }

  provideEdits(document, position, ch, options, line) {
    // We can have else for the following blocks:
    // if:
    // elif x:
    // for x in y:
    // while x:
    // We need to find a block statement that is less than or equal to this statement block (but not greater)
    for (let lineNumber = position.line - 1; lineNumber >= 0; lineNumber -= 1) {
      const prevLine = document.lineAt(lineNumber);
      const prevLineText = prevLine.text; // Oops, we've reached a boundary (like the function or class definition)
      // Get out of here

      if (this.boundaryRegExps.some(value => value.test(prevLineText))) {
        return [];
      }

      const blockRegEx = this.previousBlockRegExps.find(value => value.test(prevLineText));

      if (!blockRegEx) {
        continue;
      }

      const startOfBlockInLine = prevLine.firstNonWhitespaceCharacterIndex;

      if (startOfBlockInLine > line.firstNonWhitespaceCharacterIndex) {
        continue;
      }

      const startPosition = new vscode_2.Position(position.line, 0);
      const endPosition = new vscode_2.Position(position.line, line.firstNonWhitespaceCharacterIndex - startOfBlockInLine);

      if (startPosition.isEqual(endPosition)) {
        // current block cannot be at the same level as a preivous block
        continue;
      }

      if (options.insertSpaces) {
        return [vscode_1.TextEdit.delete(new vscode_2.Range(startPosition, endPosition))];
      } else {
        // Delete everything before the block and insert the same characters we have in the previous block
        const prefixOfPreviousBlock = prevLineText.substring(0, startOfBlockInLine);
        const startDeletePosition = new vscode_2.Position(position.line, 0);
        const endDeletePosition = new vscode_2.Position(position.line, line.firstNonWhitespaceCharacterIndex);
        return [vscode_1.TextEdit.delete(new vscode_2.Range(startDeletePosition, endDeletePosition)), vscode_1.TextEdit.insert(startDeletePosition, prefixOfPreviousBlock)];
      }
    }

    return [];
  }

}

exports.CodeBlockFormatProvider = CodeBlockFormatProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidnNjb2RlXzEiLCJyZXF1aXJlIiwidnNjb2RlXzIiLCJDb2RlQmxvY2tGb3JtYXRQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiYmxvY2tSZWdFeHAiLCJwcmV2aW91c0Jsb2NrUmVnRXhwcyIsImJvdW5kYXJ5UmVnRXhwcyIsImNhblByb3ZpZGVFZGl0cyIsImxpbmUiLCJ0ZXN0IiwicHJvdmlkZUVkaXRzIiwiZG9jdW1lbnQiLCJwb3NpdGlvbiIsImNoIiwib3B0aW9ucyIsImxpbmVOdW1iZXIiLCJwcmV2TGluZSIsImxpbmVBdCIsInByZXZMaW5lVGV4dCIsInRleHQiLCJzb21lIiwiYmxvY2tSZWdFeCIsImZpbmQiLCJzdGFydE9mQmxvY2tJbkxpbmUiLCJmaXJzdE5vbldoaXRlc3BhY2VDaGFyYWN0ZXJJbmRleCIsInN0YXJ0UG9zaXRpb24iLCJQb3NpdGlvbiIsImVuZFBvc2l0aW9uIiwiaXNFcXVhbCIsImluc2VydFNwYWNlcyIsIlRleHRFZGl0IiwiZGVsZXRlIiwiUmFuZ2UiLCJwcmVmaXhPZlByZXZpb3VzQmxvY2siLCJzdWJzdHJpbmciLCJzdGFydERlbGV0ZVBvc2l0aW9uIiwiZW5kRGVsZXRlUG9zaXRpb24iLCJpbnNlcnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUF4Qjs7QUFDQSxNQUFNRSx1QkFBTixDQUE4QjtBQUMxQkMsRUFBQUEsV0FBVyxDQUFDQyxXQUFELEVBQWNDLG9CQUFkLEVBQW9D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RkcsQ0FBUDtBQUlIO0FBQ0o7O0FBQ0QsV0FBTyxFQUFQO0FBQ0g7O0FBdkR5Qjs7QUF5RDlCcEMsT0FBTyxDQUFDSyx1QkFBUixHQUFrQ0EsdUJBQWxDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCB2c2NvZGVfMiA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmNsYXNzIENvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGJsb2NrUmVnRXhwLCBwcmV2aW91c0Jsb2NrUmVnRXhwcywgYm91bmRhcnlSZWdFeHBzKSB7XHJcbiAgICAgICAgdGhpcy5ibG9ja1JlZ0V4cCA9IGJsb2NrUmVnRXhwO1xyXG4gICAgICAgIHRoaXMucHJldmlvdXNCbG9ja1JlZ0V4cHMgPSBwcmV2aW91c0Jsb2NrUmVnRXhwcztcclxuICAgICAgICB0aGlzLmJvdW5kYXJ5UmVnRXhwcyA9IGJvdW5kYXJ5UmVnRXhwcztcclxuICAgIH1cclxuICAgIGNhblByb3ZpZGVFZGl0cyhsaW5lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvY2tSZWdFeHAudGVzdChsaW5lKTtcclxuICAgIH1cclxuICAgIHByb3ZpZGVFZGl0cyhkb2N1bWVudCwgcG9zaXRpb24sIGNoLCBvcHRpb25zLCBsaW5lKSB7XHJcbiAgICAgICAgLy8gV2UgY2FuIGhhdmUgZWxzZSBmb3IgdGhlIGZvbGxvd2luZyBibG9ja3M6XHJcbiAgICAgICAgLy8gaWY6XHJcbiAgICAgICAgLy8gZWxpZiB4OlxyXG4gICAgICAgIC8vIGZvciB4IGluIHk6XHJcbiAgICAgICAgLy8gd2hpbGUgeDpcclxuICAgICAgICAvLyBXZSBuZWVkIHRvIGZpbmQgYSBibG9jayBzdGF0ZW1lbnQgdGhhdCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhpcyBzdGF0ZW1lbnQgYmxvY2sgKGJ1dCBub3QgZ3JlYXRlcilcclxuICAgICAgICBmb3IgKGxldCBsaW5lTnVtYmVyID0gcG9zaXRpb24ubGluZSAtIDE7IGxpbmVOdW1iZXIgPj0gMDsgbGluZU51bWJlciAtPSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXZMaW5lID0gZG9jdW1lbnQubGluZUF0KGxpbmVOdW1iZXIpO1xyXG4gICAgICAgICAgICBjb25zdCBwcmV2TGluZVRleHQgPSBwcmV2TGluZS50ZXh0O1xyXG4gICAgICAgICAgICAvLyBPb3BzLCB3ZSd2ZSByZWFjaGVkIGEgYm91bmRhcnkgKGxpa2UgdGhlIGZ1bmN0aW9uIG9yIGNsYXNzIGRlZmluaXRpb24pXHJcbiAgICAgICAgICAgIC8vIEdldCBvdXQgb2YgaGVyZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5ib3VuZGFyeVJlZ0V4cHMuc29tZSh2YWx1ZSA9PiB2YWx1ZS50ZXN0KHByZXZMaW5lVGV4dCkpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgYmxvY2tSZWdFeCA9IHRoaXMucHJldmlvdXNCbG9ja1JlZ0V4cHMuZmluZCh2YWx1ZSA9PiB2YWx1ZS50ZXN0KHByZXZMaW5lVGV4dCkpO1xyXG4gICAgICAgICAgICBpZiAoIWJsb2NrUmVnRXgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0T2ZCbG9ja0luTGluZSA9IHByZXZMaW5lLmZpcnN0Tm9uV2hpdGVzcGFjZUNoYXJhY3RlckluZGV4O1xyXG4gICAgICAgICAgICBpZiAoc3RhcnRPZkJsb2NrSW5MaW5lID4gbGluZS5maXJzdE5vbldoaXRlc3BhY2VDaGFyYWN0ZXJJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IG5ldyB2c2NvZGVfMi5Qb3NpdGlvbihwb3NpdGlvbi5saW5lLCAwKTtcclxuICAgICAgICAgICAgY29uc3QgZW5kUG9zaXRpb24gPSBuZXcgdnNjb2RlXzIuUG9zaXRpb24ocG9zaXRpb24ubGluZSwgbGluZS5maXJzdE5vbldoaXRlc3BhY2VDaGFyYWN0ZXJJbmRleCAtIHN0YXJ0T2ZCbG9ja0luTGluZSk7XHJcbiAgICAgICAgICAgIGlmIChzdGFydFBvc2l0aW9uLmlzRXF1YWwoZW5kUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjdXJyZW50IGJsb2NrIGNhbm5vdCBiZSBhdCB0aGUgc2FtZSBsZXZlbCBhcyBhIHByZWl2b3VzIGJsb2NrXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pbnNlcnRTcGFjZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgdnNjb2RlXzEuVGV4dEVkaXQuZGVsZXRlKG5ldyB2c2NvZGVfMi5SYW5nZShzdGFydFBvc2l0aW9uLCBlbmRQb3NpdGlvbikpXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gRGVsZXRlIGV2ZXJ5dGhpbmcgYmVmb3JlIHRoZSBibG9jayBhbmQgaW5zZXJ0IHRoZSBzYW1lIGNoYXJhY3RlcnMgd2UgaGF2ZSBpbiB0aGUgcHJldmlvdXMgYmxvY2tcclxuICAgICAgICAgICAgICAgIGNvbnN0IHByZWZpeE9mUHJldmlvdXNCbG9jayA9IHByZXZMaW5lVGV4dC5zdWJzdHJpbmcoMCwgc3RhcnRPZkJsb2NrSW5MaW5lKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0RGVsZXRlUG9zaXRpb24gPSBuZXcgdnNjb2RlXzIuUG9zaXRpb24ocG9zaXRpb24ubGluZSwgMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbmREZWxldGVQb3NpdGlvbiA9IG5ldyB2c2NvZGVfMi5Qb3NpdGlvbihwb3NpdGlvbi5saW5lLCBsaW5lLmZpcnN0Tm9uV2hpdGVzcGFjZUNoYXJhY3RlckluZGV4KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgdnNjb2RlXzEuVGV4dEVkaXQuZGVsZXRlKG5ldyB2c2NvZGVfMi5SYW5nZShzdGFydERlbGV0ZVBvc2l0aW9uLCBlbmREZWxldGVQb3NpdGlvbikpLFxyXG4gICAgICAgICAgICAgICAgICAgIHZzY29kZV8xLlRleHRFZGl0Lmluc2VydChzdGFydERlbGV0ZVBvc2l0aW9uLCBwcmVmaXhPZlByZXZpb3VzQmxvY2spXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkNvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyID0gQ29kZUJsb2NrRm9ybWF0UHJvdmlkZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZGVCbG9ja0Zvcm1hdFByb3ZpZGVyLmpzLm1hcCJdfQ==