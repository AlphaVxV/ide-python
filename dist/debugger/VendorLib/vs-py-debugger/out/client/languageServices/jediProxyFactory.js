"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

const jediProxy_1 = require("../providers/jediProxy");

class JediFactory {
  constructor(extensionRootPath, serviceContainer) {
    this.extensionRootPath = extensionRootPath;
    this.serviceContainer = serviceContainer;
    this.disposables = [];
    this.jediProxyHandlers = new Map();
  }

  dispose() {
    this.disposables.forEach(disposable => disposable.dispose());
    this.disposables = [];
  }

  getJediProxyHandler(resource) {
    const workspaceFolder = resource ? vscode_1.workspace.getWorkspaceFolder(resource) : undefined;
    let workspacePath = workspaceFolder ? workspaceFolder.uri.fsPath : undefined;

    if (!workspacePath) {
      if (Array.isArray(vscode_1.workspace.workspaceFolders) && vscode_1.workspace.workspaceFolders.length > 0) {
        workspacePath = vscode_1.workspace.workspaceFolders[0].uri.fsPath;
      } else {
        workspacePath = __dirname;
      }
    }

    if (!this.jediProxyHandlers.has(workspacePath)) {
      const jediProxy = new jediProxy_1.JediProxy(this.extensionRootPath, workspacePath, this.serviceContainer);
      const jediProxyHandler = new jediProxy_1.JediProxyHandler(jediProxy);
      this.disposables.push(jediProxy, jediProxyHandler);
      this.jediProxyHandlers.set(workspacePath, jediProxyHandler);
    } // tslint:disable-next-line:no-non-null-assertion


    return this.jediProxyHandlers.get(workspacePath);
  }

}

exports.JediFactory = JediFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImplZGlQcm94eUZhY3RvcnkuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ2c2NvZGVfMSIsInJlcXVpcmUiLCJqZWRpUHJveHlfMSIsIkplZGlGYWN0b3J5IiwiY29uc3RydWN0b3IiLCJleHRlbnNpb25Sb290UGF0aCIsInNlcnZpY2VDb250YWluZXIiLCJkaXNwb3NhYmxlcyIsImplZGlQcm94eUhhbmRsZXJzIiwiTWFwIiwiZGlzcG9zZSIsImZvckVhY2giLCJkaXNwb3NhYmxlIiwiZ2V0SmVkaVByb3h5SGFuZGxlciIsInJlc291cmNlIiwid29ya3NwYWNlRm9sZGVyIiwid29ya3NwYWNlIiwiZ2V0V29ya3NwYWNlRm9sZGVyIiwidW5kZWZpbmVkIiwid29ya3NwYWNlUGF0aCIsInVyaSIsImZzUGF0aCIsIkFycmF5IiwiaXNBcnJheSIsIndvcmtzcGFjZUZvbGRlcnMiLCJsZW5ndGgiLCJfX2Rpcm5hbWUiLCJoYXMiLCJqZWRpUHJveHkiLCJKZWRpUHJveHkiLCJqZWRpUHJveHlIYW5kbGVyIiwiSmVkaVByb3h5SGFuZGxlciIsInB1c2giLCJzZXQiLCJnZXQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHRCxPQUFPLENBQUMsd0JBQUQsQ0FBM0I7O0FBQ0EsTUFBTUUsV0FBTixDQUFrQjtBQUNkQyxFQUFBQSxXQUFXLENBQUNDLGlCQUFELEVBQW9CQyxnQkFBcEIsRUFBc0M7QUFDN0MsU0FBS0QsaUJBQUwsR0FBeUJBLGlCQUF6QjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLEVBQW5CO0FBQ0EsU0FBS0MsaUJBQUwsR0FBeUIsSUFBSUMsR0FBSixFQUF6QjtBQUNIOztBQUNEQyxFQUFBQSxPQUFPLEdBQUc7QUFDTixTQUFLSCxXQUFMLENBQWlCSSxPQUFqQixDQUF5QkMsVUFBVSxJQUFJQSxVQUFVLENBQUNGLE9BQVgsRUFBdkM7QUFDQSxTQUFLSCxXQUFMLEdBQW1CLEVBQW5CO0FBQ0g7O0FBQ0RNLEVBQUFBLG1CQUFtQixDQUFDQyxRQUFELEVBQVc7QUFDMUIsVUFBTUMsZUFBZSxHQUFHRCxRQUFRLEdBQUdkLFFBQVEsQ0FBQ2dCLFNBQVQsQ0FBbUJDLGtCQUFuQixDQUFzQ0gsUUFBdEMsQ0FBSCxHQUFxREksU0FBckY7QUFDQSxRQUFJQyxhQUFhLEdBQUdKLGVBQWUsR0FBR0EsZUFBZSxDQUFDSyxHQUFoQixDQUFvQkMsTUFBdkIsR0FBZ0NILFNBQW5FOztBQUNBLFFBQUksQ0FBQ0MsYUFBTCxFQUFvQjtBQUNoQixVQUFJRyxLQUFLLENBQUNDLE9BQU4sQ0FBY3ZCLFFBQVEsQ0FBQ2dCLFNBQVQsQ0FBbUJRLGdCQUFqQyxLQUFzRHhCLFFBQVEsQ0FBQ2dCLFNBQVQsQ0FBbUJRLGdCQUFuQixDQUFvQ0MsTUFBcEMsR0FBNkMsQ0FBdkcsRUFBMEc7QUFDdEdOLFFBQUFBLGFBQWEsR0FBR25CLFFBQVEsQ0FBQ2dCLFNBQVQsQ0FBbUJRLGdCQUFuQixDQUFvQyxDQUFwQyxFQUF1Q0osR0FBdkMsQ0FBMkNDLE1BQTNEO0FBQ0gsT0FGRCxNQUdLO0FBQ0RGLFFBQUFBLGFBQWEsR0FBR08sU0FBaEI7QUFDSDtBQUNKOztBQUNELFFBQUksQ0FBQyxLQUFLbEIsaUJBQUwsQ0FBdUJtQixHQUF2QixDQUEyQlIsYUFBM0IsQ0FBTCxFQUFnRDtBQUM1QyxZQUFNUyxTQUFTLEdBQUcsSUFBSTFCLFdBQVcsQ0FBQzJCLFNBQWhCLENBQTBCLEtBQUt4QixpQkFBL0IsRUFBa0RjLGFBQWxELEVBQWlFLEtBQUtiLGdCQUF0RSxDQUFsQjtBQUNBLFlBQU13QixnQkFBZ0IsR0FBRyxJQUFJNUIsV0FBVyxDQUFDNkIsZ0JBQWhCLENBQWlDSCxTQUFqQyxDQUF6QjtBQUNBLFdBQUtyQixXQUFMLENBQWlCeUIsSUFBakIsQ0FBc0JKLFNBQXRCLEVBQWlDRSxnQkFBakM7QUFDQSxXQUFLdEIsaUJBQUwsQ0FBdUJ5QixHQUF2QixDQUEyQmQsYUFBM0IsRUFBMENXLGdCQUExQztBQUNILEtBaEJ5QixDQWlCMUI7OztBQUNBLFdBQU8sS0FBS3RCLGlCQUFMLENBQXVCMEIsR0FBdkIsQ0FBMkJmLGFBQTNCLENBQVA7QUFDSDs7QUE5QmE7O0FBZ0NsQnJCLE9BQU8sQ0FBQ0ssV0FBUixHQUFzQkEsV0FBdEIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB2c2NvZGVfMSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmNvbnN0IGplZGlQcm94eV8xID0gcmVxdWlyZShcIi4uL3Byb3ZpZGVycy9qZWRpUHJveHlcIik7XHJcbmNsYXNzIEplZGlGYWN0b3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKGV4dGVuc2lvblJvb3RQYXRoLCBzZXJ2aWNlQ29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5leHRlbnNpb25Sb290UGF0aCA9IGV4dGVuc2lvblJvb3RQYXRoO1xyXG4gICAgICAgIHRoaXMuc2VydmljZUNvbnRhaW5lciA9IHNlcnZpY2VDb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5kaXNwb3NhYmxlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuamVkaVByb3h5SGFuZGxlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMuZGlzcG9zYWJsZXMuZm9yRWFjaChkaXNwb3NhYmxlID0+IGRpc3Bvc2FibGUuZGlzcG9zZSgpKTtcclxuICAgICAgICB0aGlzLmRpc3Bvc2FibGVzID0gW107XHJcbiAgICB9XHJcbiAgICBnZXRKZWRpUHJveHlIYW5kbGVyKHJlc291cmNlKSB7XHJcbiAgICAgICAgY29uc3Qgd29ya3NwYWNlRm9sZGVyID0gcmVzb3VyY2UgPyB2c2NvZGVfMS53b3Jrc3BhY2UuZ2V0V29ya3NwYWNlRm9sZGVyKHJlc291cmNlKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBsZXQgd29ya3NwYWNlUGF0aCA9IHdvcmtzcGFjZUZvbGRlciA/IHdvcmtzcGFjZUZvbGRlci51cmkuZnNQYXRoIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICghd29ya3NwYWNlUGF0aCkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2c2NvZGVfMS53b3Jrc3BhY2Uud29ya3NwYWNlRm9sZGVycykgJiYgdnNjb2RlXzEud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgd29ya3NwYWNlUGF0aCA9IHZzY29kZV8xLndvcmtzcGFjZS53b3Jrc3BhY2VGb2xkZXJzWzBdLnVyaS5mc1BhdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3b3Jrc3BhY2VQYXRoID0gX19kaXJuYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5qZWRpUHJveHlIYW5kbGVycy5oYXMod29ya3NwYWNlUGF0aCkpIHtcclxuICAgICAgICAgICAgY29uc3QgamVkaVByb3h5ID0gbmV3IGplZGlQcm94eV8xLkplZGlQcm94eSh0aGlzLmV4dGVuc2lvblJvb3RQYXRoLCB3b3Jrc3BhY2VQYXRoLCB0aGlzLnNlcnZpY2VDb250YWluZXIpO1xyXG4gICAgICAgICAgICBjb25zdCBqZWRpUHJveHlIYW5kbGVyID0gbmV3IGplZGlQcm94eV8xLkplZGlQcm94eUhhbmRsZXIoamVkaVByb3h5KTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwb3NhYmxlcy5wdXNoKGplZGlQcm94eSwgamVkaVByb3h5SGFuZGxlcik7XHJcbiAgICAgICAgICAgIHRoaXMuamVkaVByb3h5SGFuZGxlcnMuc2V0KHdvcmtzcGFjZVBhdGgsIGplZGlQcm94eUhhbmRsZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbm9uLW51bGwtYXNzZXJ0aW9uXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuamVkaVByb3h5SGFuZGxlcnMuZ2V0KHdvcmtzcGFjZVBhdGgpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuSmVkaUZhY3RvcnkgPSBKZWRpRmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9amVkaVByb3h5RmFjdG9yeS5qcy5tYXAiXX0=