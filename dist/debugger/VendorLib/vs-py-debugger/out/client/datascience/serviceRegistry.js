// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const codeCssGenerator_1 = require("./codeCssGenerator");

const datascience_1 = require("./datascience");

const codelensprovider_1 = require("./editor-integration/codelensprovider");

const history_1 = require("./history");

const historycommandlistener_1 = require("./historycommandlistener");

const historyProvider_1 = require("./historyProvider");

const jupyterExecution_1 = require("./jupyterExecution");

const jupyterImporter_1 = require("./jupyterImporter");

const jupyterProcess_1 = require("./jupyterProcess");

const jupyterServer_1 = require("./jupyterServer");

const statusProvider_1 = require("./statusProvider");

const types_1 = require("./types");

function registerTypes(serviceManager) {
  serviceManager.addSingleton(types_1.IDataScienceCodeLensProvider, codelensprovider_1.DataScienceCodeLensProvider);
  serviceManager.addSingleton(types_1.IDataScience, datascience_1.DataScience);
  serviceManager.addSingleton(types_1.IJupyterExecution, jupyterExecution_1.JupyterExecution);
  serviceManager.add(types_1.IDataScienceCommandListener, historycommandlistener_1.HistoryCommandListener);
  serviceManager.addSingleton(types_1.IHistoryProvider, historyProvider_1.HistoryProvider);
  serviceManager.add(types_1.IHistory, history_1.History);
  serviceManager.add(types_1.INotebookImporter, jupyterImporter_1.JupyterImporter);
  serviceManager.add(types_1.INotebookServer, jupyterServer_1.JupyterServer);
  serviceManager.add(types_1.INotebookProcess, jupyterProcess_1.JupyterProcess);
  serviceManager.addSingleton(types_1.ICodeCssGenerator, codeCssGenerator_1.CodeCssGenerator);
  serviceManager.addSingleton(types_1.IStatusProvider, statusProvider_1.StatusProvider);
}

exports.registerTypes = registerTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VSZWdpc3RyeS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvZGVDc3NHZW5lcmF0b3JfMSIsInJlcXVpcmUiLCJkYXRhc2NpZW5jZV8xIiwiY29kZWxlbnNwcm92aWRlcl8xIiwiaGlzdG9yeV8xIiwiaGlzdG9yeWNvbW1hbmRsaXN0ZW5lcl8xIiwiaGlzdG9yeVByb3ZpZGVyXzEiLCJqdXB5dGVyRXhlY3V0aW9uXzEiLCJqdXB5dGVySW1wb3J0ZXJfMSIsImp1cHl0ZXJQcm9jZXNzXzEiLCJqdXB5dGVyU2VydmVyXzEiLCJzdGF0dXNQcm92aWRlcl8xIiwidHlwZXNfMSIsInJlZ2lzdGVyVHlwZXMiLCJzZXJ2aWNlTWFuYWdlciIsImFkZFNpbmdsZXRvbiIsIklEYXRhU2NpZW5jZUNvZGVMZW5zUHJvdmlkZXIiLCJEYXRhU2NpZW5jZUNvZGVMZW5zUHJvdmlkZXIiLCJJRGF0YVNjaWVuY2UiLCJEYXRhU2NpZW5jZSIsIklKdXB5dGVyRXhlY3V0aW9uIiwiSnVweXRlckV4ZWN1dGlvbiIsImFkZCIsIklEYXRhU2NpZW5jZUNvbW1hbmRMaXN0ZW5lciIsIkhpc3RvcnlDb21tYW5kTGlzdGVuZXIiLCJJSGlzdG9yeVByb3ZpZGVyIiwiSGlzdG9yeVByb3ZpZGVyIiwiSUhpc3RvcnkiLCJIaXN0b3J5IiwiSU5vdGVib29rSW1wb3J0ZXIiLCJKdXB5dGVySW1wb3J0ZXIiLCJJTm90ZWJvb2tTZXJ2ZXIiLCJKdXB5dGVyU2VydmVyIiwiSU5vdGVib29rUHJvY2VzcyIsIkp1cHl0ZXJQcm9jZXNzIiwiSUNvZGVDc3NHZW5lcmF0b3IiLCJDb2RlQ3NzR2VuZXJhdG9yIiwiSVN0YXR1c1Byb3ZpZGVyIiwiU3RhdHVzUHJvdmlkZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxrQkFBa0IsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUNBLE1BQU1DLGFBQWEsR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FBN0I7O0FBQ0EsTUFBTUUsa0JBQWtCLEdBQUdGLE9BQU8sQ0FBQyx1Q0FBRCxDQUFsQzs7QUFDQSxNQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUNBLE1BQU1JLHdCQUF3QixHQUFHSixPQUFPLENBQUMsMEJBQUQsQ0FBeEM7O0FBQ0EsTUFBTUssaUJBQWlCLEdBQUdMLE9BQU8sQ0FBQyxtQkFBRCxDQUFqQzs7QUFDQSxNQUFNTSxrQkFBa0IsR0FBR04sT0FBTyxDQUFDLG9CQUFELENBQWxDOztBQUNBLE1BQU1PLGlCQUFpQixHQUFHUCxPQUFPLENBQUMsbUJBQUQsQ0FBakM7O0FBQ0EsTUFBTVEsZ0JBQWdCLEdBQUdSLE9BQU8sQ0FBQyxrQkFBRCxDQUFoQzs7QUFDQSxNQUFNUyxlQUFlLEdBQUdULE9BQU8sQ0FBQyxpQkFBRCxDQUEvQjs7QUFDQSxNQUFNVSxnQkFBZ0IsR0FBR1YsT0FBTyxDQUFDLGtCQUFELENBQWhDOztBQUNBLE1BQU1XLE9BQU8sR0FBR1gsT0FBTyxDQUFDLFNBQUQsQ0FBdkI7O0FBQ0EsU0FBU1ksYUFBVCxDQUF1QkMsY0FBdkIsRUFBdUM7QUFDbkNBLEVBQUFBLGNBQWMsQ0FBQ0MsWUFBZixDQUE0QkgsT0FBTyxDQUFDSSw0QkFBcEMsRUFBa0ViLGtCQUFrQixDQUFDYywyQkFBckY7QUFDQUgsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUNNLFlBQXBDLEVBQWtEaEIsYUFBYSxDQUFDaUIsV0FBaEU7QUFDQUwsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUNRLGlCQUFwQyxFQUF1RGIsa0JBQWtCLENBQUNjLGdCQUExRTtBQUNBUCxFQUFBQSxjQUFjLENBQUNRLEdBQWYsQ0FBbUJWLE9BQU8sQ0FBQ1csMkJBQTNCLEVBQXdEbEIsd0JBQXdCLENBQUNtQixzQkFBakY7QUFDQVYsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUNhLGdCQUFwQyxFQUFzRG5CLGlCQUFpQixDQUFDb0IsZUFBeEU7QUFDQVosRUFBQUEsY0FBYyxDQUFDUSxHQUFmLENBQW1CVixPQUFPLENBQUNlLFFBQTNCLEVBQXFDdkIsU0FBUyxDQUFDd0IsT0FBL0M7QUFDQWQsRUFBQUEsY0FBYyxDQUFDUSxHQUFmLENBQW1CVixPQUFPLENBQUNpQixpQkFBM0IsRUFBOENyQixpQkFBaUIsQ0FBQ3NCLGVBQWhFO0FBQ0FoQixFQUFBQSxjQUFjLENBQUNRLEdBQWYsQ0FBbUJWLE9BQU8sQ0FBQ21CLGVBQTNCLEVBQTRDckIsZUFBZSxDQUFDc0IsYUFBNUQ7QUFDQWxCLEVBQUFBLGNBQWMsQ0FBQ1EsR0FBZixDQUFtQlYsT0FBTyxDQUFDcUIsZ0JBQTNCLEVBQTZDeEIsZ0JBQWdCLENBQUN5QixjQUE5RDtBQUNBcEIsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUN1QixpQkFBcEMsRUFBdURuQyxrQkFBa0IsQ0FBQ29DLGdCQUExRTtBQUNBdEIsRUFBQUEsY0FBYyxDQUFDQyxZQUFmLENBQTRCSCxPQUFPLENBQUN5QixlQUFwQyxFQUFxRDFCLGdCQUFnQixDQUFDMkIsY0FBdEU7QUFDSDs7QUFDRHhDLE9BQU8sQ0FBQ2UsYUFBUixHQUF3QkEsYUFBeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY29kZUNzc0dlbmVyYXRvcl8xID0gcmVxdWlyZShcIi4vY29kZUNzc0dlbmVyYXRvclwiKTtcclxuY29uc3QgZGF0YXNjaWVuY2VfMSA9IHJlcXVpcmUoXCIuL2RhdGFzY2llbmNlXCIpO1xyXG5jb25zdCBjb2RlbGVuc3Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9lZGl0b3ItaW50ZWdyYXRpb24vY29kZWxlbnNwcm92aWRlclwiKTtcclxuY29uc3QgaGlzdG9yeV8xID0gcmVxdWlyZShcIi4vaGlzdG9yeVwiKTtcclxuY29uc3QgaGlzdG9yeWNvbW1hbmRsaXN0ZW5lcl8xID0gcmVxdWlyZShcIi4vaGlzdG9yeWNvbW1hbmRsaXN0ZW5lclwiKTtcclxuY29uc3QgaGlzdG9yeVByb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9oaXN0b3J5UHJvdmlkZXJcIik7XHJcbmNvbnN0IGp1cHl0ZXJFeGVjdXRpb25fMSA9IHJlcXVpcmUoXCIuL2p1cHl0ZXJFeGVjdXRpb25cIik7XHJcbmNvbnN0IGp1cHl0ZXJJbXBvcnRlcl8xID0gcmVxdWlyZShcIi4vanVweXRlckltcG9ydGVyXCIpO1xyXG5jb25zdCBqdXB5dGVyUHJvY2Vzc18xID0gcmVxdWlyZShcIi4vanVweXRlclByb2Nlc3NcIik7XHJcbmNvbnN0IGp1cHl0ZXJTZXJ2ZXJfMSA9IHJlcXVpcmUoXCIuL2p1cHl0ZXJTZXJ2ZXJcIik7XHJcbmNvbnN0IHN0YXR1c1Byb3ZpZGVyXzEgPSByZXF1aXJlKFwiLi9zdGF0dXNQcm92aWRlclwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xyXG5mdW5jdGlvbiByZWdpc3RlclR5cGVzKHNlcnZpY2VNYW5hZ2VyKSB7XHJcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfMS5JRGF0YVNjaWVuY2VDb2RlTGVuc1Byb3ZpZGVyLCBjb2RlbGVuc3Byb3ZpZGVyXzEuRGF0YVNjaWVuY2VDb2RlTGVuc1Byb3ZpZGVyKTtcclxuICAgIHNlcnZpY2VNYW5hZ2VyLmFkZFNpbmdsZXRvbih0eXBlc18xLklEYXRhU2NpZW5jZSwgZGF0YXNjaWVuY2VfMS5EYXRhU2NpZW5jZSk7XHJcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfMS5JSnVweXRlckV4ZWN1dGlvbiwganVweXRlckV4ZWN1dGlvbl8xLkp1cHl0ZXJFeGVjdXRpb24pO1xyXG4gICAgc2VydmljZU1hbmFnZXIuYWRkKHR5cGVzXzEuSURhdGFTY2llbmNlQ29tbWFuZExpc3RlbmVyLCBoaXN0b3J5Y29tbWFuZGxpc3RlbmVyXzEuSGlzdG9yeUNvbW1hbmRMaXN0ZW5lcik7XHJcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfMS5JSGlzdG9yeVByb3ZpZGVyLCBoaXN0b3J5UHJvdmlkZXJfMS5IaXN0b3J5UHJvdmlkZXIpO1xyXG4gICAgc2VydmljZU1hbmFnZXIuYWRkKHR5cGVzXzEuSUhpc3RvcnksIGhpc3RvcnlfMS5IaXN0b3J5KTtcclxuICAgIHNlcnZpY2VNYW5hZ2VyLmFkZCh0eXBlc18xLklOb3RlYm9va0ltcG9ydGVyLCBqdXB5dGVySW1wb3J0ZXJfMS5KdXB5dGVySW1wb3J0ZXIpO1xyXG4gICAgc2VydmljZU1hbmFnZXIuYWRkKHR5cGVzXzEuSU5vdGVib29rU2VydmVyLCBqdXB5dGVyU2VydmVyXzEuSnVweXRlclNlcnZlcik7XHJcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGQodHlwZXNfMS5JTm90ZWJvb2tQcm9jZXNzLCBqdXB5dGVyUHJvY2Vzc18xLkp1cHl0ZXJQcm9jZXNzKTtcclxuICAgIHNlcnZpY2VNYW5hZ2VyLmFkZFNpbmdsZXRvbih0eXBlc18xLklDb2RlQ3NzR2VuZXJhdG9yLCBjb2RlQ3NzR2VuZXJhdG9yXzEuQ29kZUNzc0dlbmVyYXRvcik7XHJcbiAgICBzZXJ2aWNlTWFuYWdlci5hZGRTaW5nbGV0b24odHlwZXNfMS5JU3RhdHVzUHJvdmlkZXIsIHN0YXR1c1Byb3ZpZGVyXzEuU3RhdHVzUHJvdmlkZXIpO1xyXG59XHJcbmV4cG9ydHMucmVnaXN0ZXJUeXBlcyA9IHJlZ2lzdGVyVHlwZXM7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlcnZpY2VSZWdpc3RyeS5qcy5tYXAiXX0=