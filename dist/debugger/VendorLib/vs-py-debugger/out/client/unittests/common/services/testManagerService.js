"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const configSettings_1 = require("../../../common/configSettings");

const types_1 = require("../../../common/types");

const types_2 = require("./../types");

class TestManagerService {
  constructor(wkspace, testsHelper, serviceContainer) {
    this.wkspace = wkspace;
    this.testsHelper = testsHelper;
    this.serviceContainer = serviceContainer;
    this.cachedTestManagers = new Map();
    const disposables = serviceContainer.get(types_1.IDisposableRegistry);
    disposables.push(this);
  }

  dispose() {
    this.cachedTestManagers.forEach(info => {
      info.dispose();
    });
  }

  getTestManager() {
    const preferredTestManager = this.getPreferredTestManager();

    if (typeof preferredTestManager !== 'number') {
      return;
    } // tslint:disable-next-line:no-non-null-assertion


    if (!this.cachedTestManagers.has(preferredTestManager)) {
      const testDirectory = this.getTestWorkingDirectory();
      const testProvider = this.testsHelper.parseProviderName(preferredTestManager);
      const factory = this.serviceContainer.get(types_2.ITestManagerFactory);
      this.cachedTestManagers.set(preferredTestManager, factory(testProvider, this.wkspace, testDirectory));
    }

    const testManager = this.cachedTestManagers.get(preferredTestManager);
    return testManager.enabled ? testManager : undefined;
  }

  getTestWorkingDirectory() {
    const settings = configSettings_1.PythonSettings.getInstance(this.wkspace);
    return settings.unitTest.cwd && settings.unitTest.cwd.length > 0 ? settings.unitTest.cwd : this.wkspace.fsPath;
  }

  getPreferredTestManager() {
    const settings = configSettings_1.PythonSettings.getInstance(this.wkspace);

    if (settings.unitTest.nosetestsEnabled) {
      return types_1.Product.nosetest;
    } else if (settings.unitTest.pyTestEnabled) {
      return types_1.Product.pytest;
    } else if (settings.unitTest.unittestEnabled) {
      return types_1.Product.unittest;
    }

    return undefined;
  }

}

exports.TestManagerService = TestManagerService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RNYW5hZ2VyU2VydmljZS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNvbmZpZ1NldHRpbmdzXzEiLCJyZXF1aXJlIiwidHlwZXNfMSIsInR5cGVzXzIiLCJUZXN0TWFuYWdlclNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsIndrc3BhY2UiLCJ0ZXN0c0hlbHBlciIsInNlcnZpY2VDb250YWluZXIiLCJjYWNoZWRUZXN0TWFuYWdlcnMiLCJNYXAiLCJkaXNwb3NhYmxlcyIsImdldCIsIklEaXNwb3NhYmxlUmVnaXN0cnkiLCJwdXNoIiwiZGlzcG9zZSIsImZvckVhY2giLCJpbmZvIiwiZ2V0VGVzdE1hbmFnZXIiLCJwcmVmZXJyZWRUZXN0TWFuYWdlciIsImdldFByZWZlcnJlZFRlc3RNYW5hZ2VyIiwiaGFzIiwidGVzdERpcmVjdG9yeSIsImdldFRlc3RXb3JraW5nRGlyZWN0b3J5IiwidGVzdFByb3ZpZGVyIiwicGFyc2VQcm92aWRlck5hbWUiLCJmYWN0b3J5IiwiSVRlc3RNYW5hZ2VyRmFjdG9yeSIsInNldCIsInRlc3RNYW5hZ2VyIiwiZW5hYmxlZCIsInVuZGVmaW5lZCIsInNldHRpbmdzIiwiUHl0aG9uU2V0dGluZ3MiLCJnZXRJbnN0YW5jZSIsInVuaXRUZXN0IiwiY3dkIiwibGVuZ3RoIiwiZnNQYXRoIiwibm9zZXRlc3RzRW5hYmxlZCIsIlByb2R1Y3QiLCJub3NldGVzdCIsInB5VGVzdEVuYWJsZWQiLCJweXRlc3QiLCJ1bml0dGVzdEVuYWJsZWQiLCJ1bml0dGVzdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUdDLE9BQU8sQ0FBQyxnQ0FBRCxDQUFoQzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQUF2Qjs7QUFDQSxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxZQUFELENBQXZCOztBQUNBLE1BQU1HLGtCQUFOLENBQXlCO0FBQ3JCQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBVUMsV0FBVixFQUF1QkMsZ0JBQXZCLEVBQXlDO0FBQ2hELFNBQUtGLE9BQUwsR0FBZUEsT0FBZjtBQUNBLFNBQUtDLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0EsU0FBS0MsZ0JBQUwsR0FBd0JBLGdCQUF4QjtBQUNBLFNBQUtDLGtCQUFMLEdBQTBCLElBQUlDLEdBQUosRUFBMUI7QUFDQSxVQUFNQyxXQUFXLEdBQUdILGdCQUFnQixDQUFDSSxHQUFqQixDQUFxQlYsT0FBTyxDQUFDVyxtQkFBN0IsQ0FBcEI7QUFDQUYsSUFBQUEsV0FBVyxDQUFDRyxJQUFaLENBQWlCLElBQWpCO0FBQ0g7O0FBQ0RDLEVBQUFBLE9BQU8sR0FBRztBQUNOLFNBQUtOLGtCQUFMLENBQXdCTyxPQUF4QixDQUFnQ0MsSUFBSSxJQUFJO0FBQ3BDQSxNQUFBQSxJQUFJLENBQUNGLE9BQUw7QUFDSCxLQUZEO0FBR0g7O0FBQ0RHLEVBQUFBLGNBQWMsR0FBRztBQUNiLFVBQU1DLG9CQUFvQixHQUFHLEtBQUtDLHVCQUFMLEVBQTdCOztBQUNBLFFBQUksT0FBT0Qsb0JBQVAsS0FBZ0MsUUFBcEMsRUFBOEM7QUFDMUM7QUFDSCxLQUpZLENBS2I7OztBQUNBLFFBQUksQ0FBQyxLQUFLVixrQkFBTCxDQUF3QlksR0FBeEIsQ0FBNEJGLG9CQUE1QixDQUFMLEVBQXdEO0FBQ3BELFlBQU1HLGFBQWEsR0FBRyxLQUFLQyx1QkFBTCxFQUF0QjtBQUNBLFlBQU1DLFlBQVksR0FBRyxLQUFLakIsV0FBTCxDQUFpQmtCLGlCQUFqQixDQUFtQ04sb0JBQW5DLENBQXJCO0FBQ0EsWUFBTU8sT0FBTyxHQUFHLEtBQUtsQixnQkFBTCxDQUFzQkksR0FBdEIsQ0FBMEJULE9BQU8sQ0FBQ3dCLG1CQUFsQyxDQUFoQjtBQUNBLFdBQUtsQixrQkFBTCxDQUF3Qm1CLEdBQXhCLENBQTRCVCxvQkFBNUIsRUFBa0RPLE9BQU8sQ0FBQ0YsWUFBRCxFQUFlLEtBQUtsQixPQUFwQixFQUE2QmdCLGFBQTdCLENBQXpEO0FBQ0g7O0FBQ0QsVUFBTU8sV0FBVyxHQUFHLEtBQUtwQixrQkFBTCxDQUF3QkcsR0FBeEIsQ0FBNEJPLG9CQUE1QixDQUFwQjtBQUNBLFdBQU9VLFdBQVcsQ0FBQ0MsT0FBWixHQUFzQkQsV0FBdEIsR0FBb0NFLFNBQTNDO0FBQ0g7O0FBQ0RSLEVBQUFBLHVCQUF1QixHQUFHO0FBQ3RCLFVBQU1TLFFBQVEsR0FBR2hDLGdCQUFnQixDQUFDaUMsY0FBakIsQ0FBZ0NDLFdBQWhDLENBQTRDLEtBQUs1QixPQUFqRCxDQUFqQjtBQUNBLFdBQU8wQixRQUFRLENBQUNHLFFBQVQsQ0FBa0JDLEdBQWxCLElBQXlCSixRQUFRLENBQUNHLFFBQVQsQ0FBa0JDLEdBQWxCLENBQXNCQyxNQUF0QixHQUErQixDQUF4RCxHQUE0REwsUUFBUSxDQUFDRyxRQUFULENBQWtCQyxHQUE5RSxHQUFvRixLQUFLOUIsT0FBTCxDQUFhZ0MsTUFBeEc7QUFDSDs7QUFDRGxCLEVBQUFBLHVCQUF1QixHQUFHO0FBQ3RCLFVBQU1ZLFFBQVEsR0FBR2hDLGdCQUFnQixDQUFDaUMsY0FBakIsQ0FBZ0NDLFdBQWhDLENBQTRDLEtBQUs1QixPQUFqRCxDQUFqQjs7QUFDQSxRQUFJMEIsUUFBUSxDQUFDRyxRQUFULENBQWtCSSxnQkFBdEIsRUFBd0M7QUFDcEMsYUFBT3JDLE9BQU8sQ0FBQ3NDLE9BQVIsQ0FBZ0JDLFFBQXZCO0FBQ0gsS0FGRCxNQUdLLElBQUlULFFBQVEsQ0FBQ0csUUFBVCxDQUFrQk8sYUFBdEIsRUFBcUM7QUFDdEMsYUFBT3hDLE9BQU8sQ0FBQ3NDLE9BQVIsQ0FBZ0JHLE1BQXZCO0FBQ0gsS0FGSSxNQUdBLElBQUlYLFFBQVEsQ0FBQ0csUUFBVCxDQUFrQlMsZUFBdEIsRUFBdUM7QUFDeEMsYUFBTzFDLE9BQU8sQ0FBQ3NDLE9BQVIsQ0FBZ0JLLFFBQXZCO0FBQ0g7O0FBQ0QsV0FBT2QsU0FBUDtBQUNIOztBQTdDb0I7O0FBK0N6QmpDLE9BQU8sQ0FBQ00sa0JBQVIsR0FBNkJBLGtCQUE3QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGNvbmZpZ1NldHRpbmdzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY29tbW9uL2NvbmZpZ1NldHRpbmdzXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi90eXBlc1wiKTtcclxuY29uc3QgdHlwZXNfMiA9IHJlcXVpcmUoXCIuLy4uL3R5cGVzXCIpO1xyXG5jbGFzcyBUZXN0TWFuYWdlclNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3Iod2tzcGFjZSwgdGVzdHNIZWxwZXIsIHNlcnZpY2VDb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLndrc3BhY2UgPSB3a3NwYWNlO1xyXG4gICAgICAgIHRoaXMudGVzdHNIZWxwZXIgPSB0ZXN0c0hlbHBlcjtcclxuICAgICAgICB0aGlzLnNlcnZpY2VDb250YWluZXIgPSBzZXJ2aWNlQ29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY2FjaGVkVGVzdE1hbmFnZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGNvbnN0IGRpc3Bvc2FibGVzID0gc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfMS5JRGlzcG9zYWJsZVJlZ2lzdHJ5KTtcclxuICAgICAgICBkaXNwb3NhYmxlcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLmNhY2hlZFRlc3RNYW5hZ2Vycy5mb3JFYWNoKGluZm8gPT4ge1xyXG4gICAgICAgICAgICBpbmZvLmRpc3Bvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGdldFRlc3RNYW5hZ2VyKCkge1xyXG4gICAgICAgIGNvbnN0IHByZWZlcnJlZFRlc3RNYW5hZ2VyID0gdGhpcy5nZXRQcmVmZXJyZWRUZXN0TWFuYWdlcigpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgcHJlZmVycmVkVGVzdE1hbmFnZXIgIT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW5vbi1udWxsLWFzc2VydGlvblxyXG4gICAgICAgIGlmICghdGhpcy5jYWNoZWRUZXN0TWFuYWdlcnMuaGFzKHByZWZlcnJlZFRlc3RNYW5hZ2VyKSkge1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0RGlyZWN0b3J5ID0gdGhpcy5nZXRUZXN0V29ya2luZ0RpcmVjdG9yeSgpO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXN0UHJvdmlkZXIgPSB0aGlzLnRlc3RzSGVscGVyLnBhcnNlUHJvdmlkZXJOYW1lKHByZWZlcnJlZFRlc3RNYW5hZ2VyKTtcclxuICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuc2VydmljZUNvbnRhaW5lci5nZXQodHlwZXNfMi5JVGVzdE1hbmFnZXJGYWN0b3J5KTtcclxuICAgICAgICAgICAgdGhpcy5jYWNoZWRUZXN0TWFuYWdlcnMuc2V0KHByZWZlcnJlZFRlc3RNYW5hZ2VyLCBmYWN0b3J5KHRlc3RQcm92aWRlciwgdGhpcy53a3NwYWNlLCB0ZXN0RGlyZWN0b3J5KSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRlc3RNYW5hZ2VyID0gdGhpcy5jYWNoZWRUZXN0TWFuYWdlcnMuZ2V0KHByZWZlcnJlZFRlc3RNYW5hZ2VyKTtcclxuICAgICAgICByZXR1cm4gdGVzdE1hbmFnZXIuZW5hYmxlZCA/IHRlc3RNYW5hZ2VyIDogdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgZ2V0VGVzdFdvcmtpbmdEaXJlY3RvcnkoKSB7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBjb25maWdTZXR0aW5nc18xLlB5dGhvblNldHRpbmdzLmdldEluc3RhbmNlKHRoaXMud2tzcGFjZSk7XHJcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzLnVuaXRUZXN0LmN3ZCAmJiBzZXR0aW5ncy51bml0VGVzdC5jd2QubGVuZ3RoID4gMCA/IHNldHRpbmdzLnVuaXRUZXN0LmN3ZCA6IHRoaXMud2tzcGFjZS5mc1BhdGg7XHJcbiAgICB9XHJcbiAgICBnZXRQcmVmZXJyZWRUZXN0TWFuYWdlcigpIHtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IGNvbmZpZ1NldHRpbmdzXzEuUHl0aG9uU2V0dGluZ3MuZ2V0SW5zdGFuY2UodGhpcy53a3NwYWNlKTtcclxuICAgICAgICBpZiAoc2V0dGluZ3MudW5pdFRlc3Qubm9zZXRlc3RzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZXNfMS5Qcm9kdWN0Lm5vc2V0ZXN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzZXR0aW5ncy51bml0VGVzdC5weVRlc3RFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0eXBlc18xLlByb2R1Y3QucHl0ZXN0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzZXR0aW5ncy51bml0VGVzdC51bml0dGVzdEVuYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVzXzEuUHJvZHVjdC51bml0dGVzdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRlc3RNYW5hZ2VyU2VydmljZSA9IFRlc3RNYW5hZ2VyU2VydmljZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVzdE1hbmFnZXJTZXJ2aWNlLmpzLm1hcCJdfQ==