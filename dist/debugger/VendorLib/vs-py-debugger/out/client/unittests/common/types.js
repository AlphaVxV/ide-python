"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TestStatus;

(function (TestStatus) {
  TestStatus[TestStatus["Unknown"] = 0] = "Unknown";
  TestStatus[TestStatus["Discovering"] = 1] = "Discovering";
  TestStatus[TestStatus["Idle"] = 2] = "Idle";
  TestStatus[TestStatus["Running"] = 3] = "Running";
  TestStatus[TestStatus["Fail"] = 4] = "Fail";
  TestStatus[TestStatus["Error"] = 5] = "Error";
  TestStatus[TestStatus["Skipped"] = 6] = "Skipped";
  TestStatus[TestStatus["Pass"] = 7] = "Pass";
})(TestStatus = exports.TestStatus || (exports.TestStatus = {}));

exports.ITestConfigSettingsService = Symbol('ITestConfigSettingsService');
exports.IWorkspaceTestManagerService = Symbol('IWorkspaceTestManagerService');
exports.ITestsHelper = Symbol('ITestsHelper');
exports.ITestVisitor = Symbol('ITestVisitor');
exports.ITestCollectionStorageService = Symbol('ITestCollectionStorageService');
exports.ITestResultsService = Symbol('ITestResultsService');
exports.ITestDebugLauncher = Symbol('ITestDebugLauncher');
exports.ITestManagerFactory = Symbol('ITestManagerFactory');
exports.ITestManagerServiceFactory = Symbol('TestManagerServiceFactory');
exports.ITestManager = Symbol('ITestManager');
exports.ITestDiscoveryService = Symbol('ITestDiscoveryService');
exports.ITestsParser = Symbol('ITestsParser');
exports.IUnitTestSocketServer = Symbol('IUnitTestSocketServer');
exports.ITestRunner = Symbol('ITestRunner');
var PassCalculationFormulae;

(function (PassCalculationFormulae) {
  PassCalculationFormulae[PassCalculationFormulae["pytest"] = 0] = "pytest";
  PassCalculationFormulae[PassCalculationFormulae["nosetests"] = 1] = "nosetests";
})(PassCalculationFormulae = exports.PassCalculationFormulae || (exports.PassCalculationFormulae = {}));

exports.IXUnitParser = Symbol('IXUnitParser');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR5cGVzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVGVzdFN0YXR1cyIsIklUZXN0Q29uZmlnU2V0dGluZ3NTZXJ2aWNlIiwiU3ltYm9sIiwiSVdvcmtzcGFjZVRlc3RNYW5hZ2VyU2VydmljZSIsIklUZXN0c0hlbHBlciIsIklUZXN0VmlzaXRvciIsIklUZXN0Q29sbGVjdGlvblN0b3JhZ2VTZXJ2aWNlIiwiSVRlc3RSZXN1bHRzU2VydmljZSIsIklUZXN0RGVidWdMYXVuY2hlciIsIklUZXN0TWFuYWdlckZhY3RvcnkiLCJJVGVzdE1hbmFnZXJTZXJ2aWNlRmFjdG9yeSIsIklUZXN0TWFuYWdlciIsIklUZXN0RGlzY292ZXJ5U2VydmljZSIsIklUZXN0c1BhcnNlciIsIklVbml0VGVzdFNvY2tldFNlcnZlciIsIklUZXN0UnVubmVyIiwiUGFzc0NhbGN1bGF0aW9uRm9ybXVsYWUiLCJJWFVuaXRQYXJzZXIiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDO0FBQ0EsSUFBSUMsVUFBSjs7QUFDQSxDQUFDLFVBQVVBLFVBQVYsRUFBc0I7QUFDbkJBLEVBQUFBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQUQsQ0FBVixHQUF3QixDQUF6QixDQUFWLEdBQXdDLFNBQXhDO0FBQ0FBLEVBQUFBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLGFBQUQsQ0FBVixHQUE0QixDQUE3QixDQUFWLEdBQTRDLGFBQTVDO0FBQ0FBLEVBQUFBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLE1BQUQsQ0FBVixHQUFxQixDQUF0QixDQUFWLEdBQXFDLE1BQXJDO0FBQ0FBLEVBQUFBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQUQsQ0FBVixHQUF3QixDQUF6QixDQUFWLEdBQXdDLFNBQXhDO0FBQ0FBLEVBQUFBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLE1BQUQsQ0FBVixHQUFxQixDQUF0QixDQUFWLEdBQXFDLE1BQXJDO0FBQ0FBLEVBQUFBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLE9BQUQsQ0FBVixHQUFzQixDQUF2QixDQUFWLEdBQXNDLE9BQXRDO0FBQ0FBLEVBQUFBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQUQsQ0FBVixHQUF3QixDQUF6QixDQUFWLEdBQXdDLFNBQXhDO0FBQ0FBLEVBQUFBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLE1BQUQsQ0FBVixHQUFxQixDQUF0QixDQUFWLEdBQXFDLE1BQXJDO0FBQ0gsQ0FURCxFQVNHQSxVQUFVLEdBQUdGLE9BQU8sQ0FBQ0UsVUFBUixLQUF1QkYsT0FBTyxDQUFDRSxVQUFSLEdBQXFCLEVBQTVDLENBVGhCOztBQVVBRixPQUFPLENBQUNHLDBCQUFSLEdBQXFDQyxNQUFNLENBQUMsNEJBQUQsQ0FBM0M7QUFDQUosT0FBTyxDQUFDSyw0QkFBUixHQUF1Q0QsTUFBTSxDQUFDLDhCQUFELENBQTdDO0FBQ0FKLE9BQU8sQ0FBQ00sWUFBUixHQUF1QkYsTUFBTSxDQUFDLGNBQUQsQ0FBN0I7QUFDQUosT0FBTyxDQUFDTyxZQUFSLEdBQXVCSCxNQUFNLENBQUMsY0FBRCxDQUE3QjtBQUNBSixPQUFPLENBQUNRLDZCQUFSLEdBQXdDSixNQUFNLENBQUMsK0JBQUQsQ0FBOUM7QUFDQUosT0FBTyxDQUFDUyxtQkFBUixHQUE4QkwsTUFBTSxDQUFDLHFCQUFELENBQXBDO0FBQ0FKLE9BQU8sQ0FBQ1Usa0JBQVIsR0FBNkJOLE1BQU0sQ0FBQyxvQkFBRCxDQUFuQztBQUNBSixPQUFPLENBQUNXLG1CQUFSLEdBQThCUCxNQUFNLENBQUMscUJBQUQsQ0FBcEM7QUFDQUosT0FBTyxDQUFDWSwwQkFBUixHQUFxQ1IsTUFBTSxDQUFDLDJCQUFELENBQTNDO0FBQ0FKLE9BQU8sQ0FBQ2EsWUFBUixHQUF1QlQsTUFBTSxDQUFDLGNBQUQsQ0FBN0I7QUFDQUosT0FBTyxDQUFDYyxxQkFBUixHQUFnQ1YsTUFBTSxDQUFDLHVCQUFELENBQXRDO0FBQ0FKLE9BQU8sQ0FBQ2UsWUFBUixHQUF1QlgsTUFBTSxDQUFDLGNBQUQsQ0FBN0I7QUFDQUosT0FBTyxDQUFDZ0IscUJBQVIsR0FBZ0NaLE1BQU0sQ0FBQyx1QkFBRCxDQUF0QztBQUNBSixPQUFPLENBQUNpQixXQUFSLEdBQXNCYixNQUFNLENBQUMsYUFBRCxDQUE1QjtBQUNBLElBQUljLHVCQUFKOztBQUNBLENBQUMsVUFBVUEsdUJBQVYsRUFBbUM7QUFDaENBLEVBQUFBLHVCQUF1QixDQUFDQSx1QkFBdUIsQ0FBQyxRQUFELENBQXZCLEdBQW9DLENBQXJDLENBQXZCLEdBQWlFLFFBQWpFO0FBQ0FBLEVBQUFBLHVCQUF1QixDQUFDQSx1QkFBdUIsQ0FBQyxXQUFELENBQXZCLEdBQXVDLENBQXhDLENBQXZCLEdBQW9FLFdBQXBFO0FBQ0gsQ0FIRCxFQUdHQSx1QkFBdUIsR0FBR2xCLE9BQU8sQ0FBQ2tCLHVCQUFSLEtBQW9DbEIsT0FBTyxDQUFDa0IsdUJBQVIsR0FBa0MsRUFBdEUsQ0FIN0I7O0FBSUFsQixPQUFPLENBQUNtQixZQUFSLEdBQXVCZixNQUFNLENBQUMsY0FBRCxDQUE3QiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBUZXN0U3RhdHVzO1xyXG4oZnVuY3Rpb24gKFRlc3RTdGF0dXMpIHtcclxuICAgIFRlc3RTdGF0dXNbVGVzdFN0YXR1c1tcIlVua25vd25cIl0gPSAwXSA9IFwiVW5rbm93blwiO1xyXG4gICAgVGVzdFN0YXR1c1tUZXN0U3RhdHVzW1wiRGlzY292ZXJpbmdcIl0gPSAxXSA9IFwiRGlzY292ZXJpbmdcIjtcclxuICAgIFRlc3RTdGF0dXNbVGVzdFN0YXR1c1tcIklkbGVcIl0gPSAyXSA9IFwiSWRsZVwiO1xyXG4gICAgVGVzdFN0YXR1c1tUZXN0U3RhdHVzW1wiUnVubmluZ1wiXSA9IDNdID0gXCJSdW5uaW5nXCI7XHJcbiAgICBUZXN0U3RhdHVzW1Rlc3RTdGF0dXNbXCJGYWlsXCJdID0gNF0gPSBcIkZhaWxcIjtcclxuICAgIFRlc3RTdGF0dXNbVGVzdFN0YXR1c1tcIkVycm9yXCJdID0gNV0gPSBcIkVycm9yXCI7XHJcbiAgICBUZXN0U3RhdHVzW1Rlc3RTdGF0dXNbXCJTa2lwcGVkXCJdID0gNl0gPSBcIlNraXBwZWRcIjtcclxuICAgIFRlc3RTdGF0dXNbVGVzdFN0YXR1c1tcIlBhc3NcIl0gPSA3XSA9IFwiUGFzc1wiO1xyXG59KShUZXN0U3RhdHVzID0gZXhwb3J0cy5UZXN0U3RhdHVzIHx8IChleHBvcnRzLlRlc3RTdGF0dXMgPSB7fSkpO1xyXG5leHBvcnRzLklUZXN0Q29uZmlnU2V0dGluZ3NTZXJ2aWNlID0gU3ltYm9sKCdJVGVzdENvbmZpZ1NldHRpbmdzU2VydmljZScpO1xyXG5leHBvcnRzLklXb3Jrc3BhY2VUZXN0TWFuYWdlclNlcnZpY2UgPSBTeW1ib2woJ0lXb3Jrc3BhY2VUZXN0TWFuYWdlclNlcnZpY2UnKTtcclxuZXhwb3J0cy5JVGVzdHNIZWxwZXIgPSBTeW1ib2woJ0lUZXN0c0hlbHBlcicpO1xyXG5leHBvcnRzLklUZXN0VmlzaXRvciA9IFN5bWJvbCgnSVRlc3RWaXNpdG9yJyk7XHJcbmV4cG9ydHMuSVRlc3RDb2xsZWN0aW9uU3RvcmFnZVNlcnZpY2UgPSBTeW1ib2woJ0lUZXN0Q29sbGVjdGlvblN0b3JhZ2VTZXJ2aWNlJyk7XHJcbmV4cG9ydHMuSVRlc3RSZXN1bHRzU2VydmljZSA9IFN5bWJvbCgnSVRlc3RSZXN1bHRzU2VydmljZScpO1xyXG5leHBvcnRzLklUZXN0RGVidWdMYXVuY2hlciA9IFN5bWJvbCgnSVRlc3REZWJ1Z0xhdW5jaGVyJyk7XHJcbmV4cG9ydHMuSVRlc3RNYW5hZ2VyRmFjdG9yeSA9IFN5bWJvbCgnSVRlc3RNYW5hZ2VyRmFjdG9yeScpO1xyXG5leHBvcnRzLklUZXN0TWFuYWdlclNlcnZpY2VGYWN0b3J5ID0gU3ltYm9sKCdUZXN0TWFuYWdlclNlcnZpY2VGYWN0b3J5Jyk7XHJcbmV4cG9ydHMuSVRlc3RNYW5hZ2VyID0gU3ltYm9sKCdJVGVzdE1hbmFnZXInKTtcclxuZXhwb3J0cy5JVGVzdERpc2NvdmVyeVNlcnZpY2UgPSBTeW1ib2woJ0lUZXN0RGlzY292ZXJ5U2VydmljZScpO1xyXG5leHBvcnRzLklUZXN0c1BhcnNlciA9IFN5bWJvbCgnSVRlc3RzUGFyc2VyJyk7XHJcbmV4cG9ydHMuSVVuaXRUZXN0U29ja2V0U2VydmVyID0gU3ltYm9sKCdJVW5pdFRlc3RTb2NrZXRTZXJ2ZXInKTtcclxuZXhwb3J0cy5JVGVzdFJ1bm5lciA9IFN5bWJvbCgnSVRlc3RSdW5uZXInKTtcclxudmFyIFBhc3NDYWxjdWxhdGlvbkZvcm11bGFlO1xyXG4oZnVuY3Rpb24gKFBhc3NDYWxjdWxhdGlvbkZvcm11bGFlKSB7XHJcbiAgICBQYXNzQ2FsY3VsYXRpb25Gb3JtdWxhZVtQYXNzQ2FsY3VsYXRpb25Gb3JtdWxhZVtcInB5dGVzdFwiXSA9IDBdID0gXCJweXRlc3RcIjtcclxuICAgIFBhc3NDYWxjdWxhdGlvbkZvcm11bGFlW1Bhc3NDYWxjdWxhdGlvbkZvcm11bGFlW1wibm9zZXRlc3RzXCJdID0gMV0gPSBcIm5vc2V0ZXN0c1wiO1xyXG59KShQYXNzQ2FsY3VsYXRpb25Gb3JtdWxhZSA9IGV4cG9ydHMuUGFzc0NhbGN1bGF0aW9uRm9ybXVsYWUgfHwgKGV4cG9ydHMuUGFzc0NhbGN1bGF0aW9uRm9ybXVsYWUgPSB7fSkpO1xyXG5leHBvcnRzLklYVW5pdFBhcnNlciA9IFN5bWJvbCgnSVhVbml0UGFyc2VyJyk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdfQ==