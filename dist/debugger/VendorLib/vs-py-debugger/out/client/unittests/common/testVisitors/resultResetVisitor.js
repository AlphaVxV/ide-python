"use strict";

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const types_1 = require("../types");

let TestResultResetVisitor = class TestResultResetVisitor {
  visitTestFunction(testFunction) {
    testFunction.passed = undefined;
    testFunction.time = 0;
    testFunction.message = '';
    testFunction.traceback = '';
    testFunction.status = types_1.TestStatus.Unknown;
    testFunction.functionsFailed = 0;
    testFunction.functionsPassed = 0;
    testFunction.functionsDidNotRun = 0;
  }

  visitTestSuite(testSuite) {
    testSuite.passed = undefined;
    testSuite.time = 0;
    testSuite.status = types_1.TestStatus.Unknown;
    testSuite.functionsFailed = 0;
    testSuite.functionsPassed = 0;
    testSuite.functionsDidNotRun = 0;
  }

  visitTestFile(testFile) {
    testFile.passed = undefined;
    testFile.time = 0;
    testFile.status = types_1.TestStatus.Unknown;
    testFile.functionsFailed = 0;
    testFile.functionsPassed = 0;
    testFile.functionsDidNotRun = 0;
  }

  visitTestFolder(testFolder) {
    testFolder.functionsDidNotRun = 0;
    testFolder.functionsFailed = 0;
    testFolder.functionsPassed = 0;
    testFolder.passed = undefined;
    testFolder.status = types_1.TestStatus.Unknown;
  }

};
TestResultResetVisitor = __decorate([inversify_1.injectable()], TestResultResetVisitor);
exports.TestResultResetVisitor = TestResultResetVisitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc3VsdFJlc2V0VmlzaXRvci5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJ0eXBlc18xIiwiVGVzdFJlc3VsdFJlc2V0VmlzaXRvciIsInZpc2l0VGVzdEZ1bmN0aW9uIiwidGVzdEZ1bmN0aW9uIiwicGFzc2VkIiwidW5kZWZpbmVkIiwidGltZSIsIm1lc3NhZ2UiLCJ0cmFjZWJhY2siLCJzdGF0dXMiLCJUZXN0U3RhdHVzIiwiVW5rbm93biIsImZ1bmN0aW9uc0ZhaWxlZCIsImZ1bmN0aW9uc1Bhc3NlZCIsImZ1bmN0aW9uc0RpZE5vdFJ1biIsInZpc2l0VGVzdFN1aXRlIiwidGVzdFN1aXRlIiwidmlzaXRUZXN0RmlsZSIsInRlc3RGaWxlIiwidmlzaXRUZXN0Rm9sZGVyIiwidGVzdEZvbGRlciIsImluamVjdGFibGUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFVBQVUsR0FBSSxVQUFRLFNBQUtBLFVBQWQsSUFBNkIsVUFBVUMsVUFBVixFQUFzQkMsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUNuRixNQUFJQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBbEI7QUFBQSxNQUEwQkMsQ0FBQyxHQUFHSCxDQUFDLEdBQUcsQ0FBSixHQUFRSCxNQUFSLEdBQWlCRSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBSSxHQUFHSyxNQUFNLENBQUNDLHdCQUFQLENBQWdDUixNQUFoQyxFQUF3Q0MsR0FBeEMsQ0FBdkIsR0FBc0VDLElBQXJIO0FBQUEsTUFBMkhPLENBQTNIO0FBQ0EsTUFBSSxPQUFPQyxPQUFQLEtBQW1CLFFBQW5CLElBQStCLE9BQU9BLE9BQU8sQ0FBQ0MsUUFBZixLQUE0QixVQUEvRCxFQUEyRUwsQ0FBQyxHQUFHSSxPQUFPLENBQUNDLFFBQVIsQ0FBaUJaLFVBQWpCLEVBQTZCQyxNQUE3QixFQUFxQ0MsR0FBckMsRUFBMENDLElBQTFDLENBQUosQ0FBM0UsS0FDSyxLQUFLLElBQUlVLENBQUMsR0FBR2IsVUFBVSxDQUFDTSxNQUFYLEdBQW9CLENBQWpDLEVBQW9DTyxDQUFDLElBQUksQ0FBekMsRUFBNENBLENBQUMsRUFBN0MsRUFBaUQsSUFBSUgsQ0FBQyxHQUFHVixVQUFVLENBQUNhLENBQUQsQ0FBbEIsRUFBdUJOLENBQUMsR0FBRyxDQUFDSCxDQUFDLEdBQUcsQ0FBSixHQUFRTSxDQUFDLENBQUNILENBQUQsQ0FBVCxHQUFlSCxDQUFDLEdBQUcsQ0FBSixHQUFRTSxDQUFDLENBQUNULE1BQUQsRUFBU0MsR0FBVCxFQUFjSyxDQUFkLENBQVQsR0FBNEJHLENBQUMsQ0FBQ1QsTUFBRCxFQUFTQyxHQUFULENBQTdDLEtBQStESyxDQUFuRTtBQUM3RSxTQUFPSCxDQUFDLEdBQUcsQ0FBSixJQUFTRyxDQUFULElBQWNDLE1BQU0sQ0FBQ00sY0FBUCxDQUFzQmIsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DSyxDQUFuQyxDQUFkLEVBQXFEQSxDQUE1RDtBQUNILENBTEQ7O0FBTUFDLE1BQU0sQ0FBQ00sY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUEzQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQXZCOztBQUNBLElBQUlFLHNCQUFzQixHQUFHLE1BQU1BLHNCQUFOLENBQTZCO0FBQ3REQyxFQUFBQSxpQkFBaUIsQ0FBQ0MsWUFBRCxFQUFlO0FBQzVCQSxJQUFBQSxZQUFZLENBQUNDLE1BQWIsR0FBc0JDLFNBQXRCO0FBQ0FGLElBQUFBLFlBQVksQ0FBQ0csSUFBYixHQUFvQixDQUFwQjtBQUNBSCxJQUFBQSxZQUFZLENBQUNJLE9BQWIsR0FBdUIsRUFBdkI7QUFDQUosSUFBQUEsWUFBWSxDQUFDSyxTQUFiLEdBQXlCLEVBQXpCO0FBQ0FMLElBQUFBLFlBQVksQ0FBQ00sTUFBYixHQUFzQlQsT0FBTyxDQUFDVSxVQUFSLENBQW1CQyxPQUF6QztBQUNBUixJQUFBQSxZQUFZLENBQUNTLGVBQWIsR0FBK0IsQ0FBL0I7QUFDQVQsSUFBQUEsWUFBWSxDQUFDVSxlQUFiLEdBQStCLENBQS9CO0FBQ0FWLElBQUFBLFlBQVksQ0FBQ1csa0JBQWIsR0FBa0MsQ0FBbEM7QUFDSDs7QUFDREMsRUFBQUEsY0FBYyxDQUFDQyxTQUFELEVBQVk7QUFDdEJBLElBQUFBLFNBQVMsQ0FBQ1osTUFBVixHQUFtQkMsU0FBbkI7QUFDQVcsSUFBQUEsU0FBUyxDQUFDVixJQUFWLEdBQWlCLENBQWpCO0FBQ0FVLElBQUFBLFNBQVMsQ0FBQ1AsTUFBVixHQUFtQlQsT0FBTyxDQUFDVSxVQUFSLENBQW1CQyxPQUF0QztBQUNBSyxJQUFBQSxTQUFTLENBQUNKLGVBQVYsR0FBNEIsQ0FBNUI7QUFDQUksSUFBQUEsU0FBUyxDQUFDSCxlQUFWLEdBQTRCLENBQTVCO0FBQ0FHLElBQUFBLFNBQVMsQ0FBQ0Ysa0JBQVYsR0FBK0IsQ0FBL0I7QUFDSDs7QUFDREcsRUFBQUEsYUFBYSxDQUFDQyxRQUFELEVBQVc7QUFDcEJBLElBQUFBLFFBQVEsQ0FBQ2QsTUFBVCxHQUFrQkMsU0FBbEI7QUFDQWEsSUFBQUEsUUFBUSxDQUFDWixJQUFULEdBQWdCLENBQWhCO0FBQ0FZLElBQUFBLFFBQVEsQ0FBQ1QsTUFBVCxHQUFrQlQsT0FBTyxDQUFDVSxVQUFSLENBQW1CQyxPQUFyQztBQUNBTyxJQUFBQSxRQUFRLENBQUNOLGVBQVQsR0FBMkIsQ0FBM0I7QUFDQU0sSUFBQUEsUUFBUSxDQUFDTCxlQUFULEdBQTJCLENBQTNCO0FBQ0FLLElBQUFBLFFBQVEsQ0FBQ0osa0JBQVQsR0FBOEIsQ0FBOUI7QUFDSDs7QUFDREssRUFBQUEsZUFBZSxDQUFDQyxVQUFELEVBQWE7QUFDeEJBLElBQUFBLFVBQVUsQ0FBQ04sa0JBQVgsR0FBZ0MsQ0FBaEM7QUFDQU0sSUFBQUEsVUFBVSxDQUFDUixlQUFYLEdBQTZCLENBQTdCO0FBQ0FRLElBQUFBLFVBQVUsQ0FBQ1AsZUFBWCxHQUE2QixDQUE3QjtBQUNBTyxJQUFBQSxVQUFVLENBQUNoQixNQUFYLEdBQW9CQyxTQUFwQjtBQUNBZSxJQUFBQSxVQUFVLENBQUNYLE1BQVgsR0FBb0JULE9BQU8sQ0FBQ1UsVUFBUixDQUFtQkMsT0FBdkM7QUFDSDs7QUFqQ3FELENBQTFEO0FBbUNBVixzQkFBc0IsR0FBR3JCLFVBQVUsQ0FBQyxDQUNoQ2tCLFdBQVcsQ0FBQ3VCLFVBQVosRUFEZ0MsQ0FBRCxFQUVoQ3BCLHNCQUZnQyxDQUFuQztBQUdBTCxPQUFPLENBQUNLLHNCQUFSLEdBQWlDQSxzQkFBakMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBpbnZlcnNpZnlfMSA9IHJlcXVpcmUoXCJpbnZlcnNpZnlcIik7XHJcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XHJcbmxldCBUZXN0UmVzdWx0UmVzZXRWaXNpdG9yID0gY2xhc3MgVGVzdFJlc3VsdFJlc2V0VmlzaXRvciB7XHJcbiAgICB2aXNpdFRlc3RGdW5jdGlvbih0ZXN0RnVuY3Rpb24pIHtcclxuICAgICAgICB0ZXN0RnVuY3Rpb24ucGFzc2VkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRlc3RGdW5jdGlvbi50aW1lID0gMDtcclxuICAgICAgICB0ZXN0RnVuY3Rpb24ubWVzc2FnZSA9ICcnO1xyXG4gICAgICAgIHRlc3RGdW5jdGlvbi50cmFjZWJhY2sgPSAnJztcclxuICAgICAgICB0ZXN0RnVuY3Rpb24uc3RhdHVzID0gdHlwZXNfMS5UZXN0U3RhdHVzLlVua25vd247XHJcbiAgICAgICAgdGVzdEZ1bmN0aW9uLmZ1bmN0aW9uc0ZhaWxlZCA9IDA7XHJcbiAgICAgICAgdGVzdEZ1bmN0aW9uLmZ1bmN0aW9uc1Bhc3NlZCA9IDA7XHJcbiAgICAgICAgdGVzdEZ1bmN0aW9uLmZ1bmN0aW9uc0RpZE5vdFJ1biA9IDA7XHJcbiAgICB9XHJcbiAgICB2aXNpdFRlc3RTdWl0ZSh0ZXN0U3VpdGUpIHtcclxuICAgICAgICB0ZXN0U3VpdGUucGFzc2VkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRlc3RTdWl0ZS50aW1lID0gMDtcclxuICAgICAgICB0ZXN0U3VpdGUuc3RhdHVzID0gdHlwZXNfMS5UZXN0U3RhdHVzLlVua25vd247XHJcbiAgICAgICAgdGVzdFN1aXRlLmZ1bmN0aW9uc0ZhaWxlZCA9IDA7XHJcbiAgICAgICAgdGVzdFN1aXRlLmZ1bmN0aW9uc1Bhc3NlZCA9IDA7XHJcbiAgICAgICAgdGVzdFN1aXRlLmZ1bmN0aW9uc0RpZE5vdFJ1biA9IDA7XHJcbiAgICB9XHJcbiAgICB2aXNpdFRlc3RGaWxlKHRlc3RGaWxlKSB7XHJcbiAgICAgICAgdGVzdEZpbGUucGFzc2VkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRlc3RGaWxlLnRpbWUgPSAwO1xyXG4gICAgICAgIHRlc3RGaWxlLnN0YXR1cyA9IHR5cGVzXzEuVGVzdFN0YXR1cy5Vbmtub3duO1xyXG4gICAgICAgIHRlc3RGaWxlLmZ1bmN0aW9uc0ZhaWxlZCA9IDA7XHJcbiAgICAgICAgdGVzdEZpbGUuZnVuY3Rpb25zUGFzc2VkID0gMDtcclxuICAgICAgICB0ZXN0RmlsZS5mdW5jdGlvbnNEaWROb3RSdW4gPSAwO1xyXG4gICAgfVxyXG4gICAgdmlzaXRUZXN0Rm9sZGVyKHRlc3RGb2xkZXIpIHtcclxuICAgICAgICB0ZXN0Rm9sZGVyLmZ1bmN0aW9uc0RpZE5vdFJ1biA9IDA7XHJcbiAgICAgICAgdGVzdEZvbGRlci5mdW5jdGlvbnNGYWlsZWQgPSAwO1xyXG4gICAgICAgIHRlc3RGb2xkZXIuZnVuY3Rpb25zUGFzc2VkID0gMDtcclxuICAgICAgICB0ZXN0Rm9sZGVyLnBhc3NlZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0ZXN0Rm9sZGVyLnN0YXR1cyA9IHR5cGVzXzEuVGVzdFN0YXR1cy5Vbmtub3duO1xyXG4gICAgfVxyXG59O1xyXG5UZXN0UmVzdWx0UmVzZXRWaXNpdG9yID0gX19kZWNvcmF0ZShbXHJcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKClcclxuXSwgVGVzdFJlc3VsdFJlc2V0VmlzaXRvcik7XHJcbmV4cG9ydHMuVGVzdFJlc3VsdFJlc2V0VmlzaXRvciA9IFRlc3RSZXN1bHRSZXNldFZpc2l0b3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3VsdFJlc2V0VmlzaXRvci5qcy5tYXAiXX0=