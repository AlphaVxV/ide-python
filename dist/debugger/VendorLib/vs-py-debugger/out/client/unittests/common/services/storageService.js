"use strict";

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const vscode_1 = require("vscode");

const types_1 = require("../../../common/types");

let TestCollectionStorageService = class TestCollectionStorageService {
  constructor(disposables) {
    this.testsIndexedByWorkspaceUri = new Map();
    disposables.push(this);
  }

  getTests(wkspace) {
    const workspaceFolder = this.getWorkspaceFolderPath(wkspace) || '';
    return this.testsIndexedByWorkspaceUri.has(workspaceFolder) ? this.testsIndexedByWorkspaceUri.get(workspaceFolder) : undefined;
  }

  storeTests(wkspace, tests) {
    const workspaceFolder = this.getWorkspaceFolderPath(wkspace) || '';
    this.testsIndexedByWorkspaceUri.set(workspaceFolder, tests);
  }

  dispose() {
    this.testsIndexedByWorkspaceUri.clear();
  }

  getWorkspaceFolderPath(resource) {
    const folder = vscode_1.workspace.getWorkspaceFolder(resource);
    return folder ? folder.uri.path : undefined;
  }

};
TestCollectionStorageService = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.IDisposableRegistry))], TestCollectionStorageService);
exports.TestCollectionStorageService = TestCollectionStorageService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0b3JhZ2VTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZCIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiZXhwb3J0cyIsInZhbHVlIiwiaW52ZXJzaWZ5XzEiLCJyZXF1aXJlIiwidnNjb2RlXzEiLCJ0eXBlc18xIiwiVGVzdENvbGxlY3Rpb25TdG9yYWdlU2VydmljZSIsImNvbnN0cnVjdG9yIiwiZGlzcG9zYWJsZXMiLCJ0ZXN0c0luZGV4ZWRCeVdvcmtzcGFjZVVyaSIsIk1hcCIsInB1c2giLCJnZXRUZXN0cyIsIndrc3BhY2UiLCJ3b3Jrc3BhY2VGb2xkZXIiLCJnZXRXb3Jrc3BhY2VGb2xkZXJQYXRoIiwiaGFzIiwiZ2V0IiwidW5kZWZpbmVkIiwic3RvcmVUZXN0cyIsInRlc3RzIiwic2V0IiwiZGlzcG9zZSIsImNsZWFyIiwicmVzb3VyY2UiLCJmb2xkZXIiLCJ3b3Jrc3BhY2UiLCJnZXRXb3Jrc3BhY2VGb2xkZXIiLCJ1cmkiLCJwYXRoIiwiaW5qZWN0YWJsZSIsImluamVjdCIsIklEaXNwb3NhYmxlUmVnaXN0cnkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFVBQVUsR0FBSSxVQUFRLFNBQUtBLFVBQWQsSUFBNkIsVUFBVUMsVUFBVixFQUFzQkMsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUNuRixNQUFJQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBbEI7QUFBQSxNQUEwQkMsQ0FBQyxHQUFHSCxDQUFDLEdBQUcsQ0FBSixHQUFRSCxNQUFSLEdBQWlCRSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBSSxHQUFH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a0JBQW5CLENBQXNDSCxRQUF0QyxDQUFmO0FBQ0EsV0FBT0MsTUFBTSxHQUFHQSxNQUFNLENBQUNHLEdBQVAsQ0FBV0MsSUFBZCxHQUFxQlgsU0FBbEM7QUFDSDs7QUFuQmlFLENBQXRFO0FBcUJBWiw0QkFBNEIsR0FBR3pCLFVBQVUsQ0FBQyxDQUN0Q3FCLFdBQVcsQ0FBQzRCLFVBQVosRUFEc0MsRUFFdENqQyxPQUFPLENBQUMsQ0FBRCxFQUFJSyxXQUFXLENBQUM2QixNQUFaLENBQW1CMUIsT0FBTyxDQUFDMkIsbUJBQTNCLENBQUosQ0FGK0IsQ0FBRCxFQUd0QzFCLDRCQUhzQyxDQUF6QztBQUlBTixPQUFPLENBQUNNLDRCQUFSLEdBQXVDQSw0QkFBdkMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi90eXBlc1wiKTtcclxubGV0IFRlc3RDb2xsZWN0aW9uU3RvcmFnZVNlcnZpY2UgPSBjbGFzcyBUZXN0Q29sbGVjdGlvblN0b3JhZ2VTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGRpc3Bvc2FibGVzKSB7XHJcbiAgICAgICAgdGhpcy50ZXN0c0luZGV4ZWRCeVdvcmtzcGFjZVVyaSA9IG5ldyBNYXAoKTtcclxuICAgICAgICBkaXNwb3NhYmxlcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZ2V0VGVzdHMod2tzcGFjZSkge1xyXG4gICAgICAgIGNvbnN0IHdvcmtzcGFjZUZvbGRlciA9IHRoaXMuZ2V0V29ya3NwYWNlRm9sZGVyUGF0aCh3a3NwYWNlKSB8fCAnJztcclxuICAgICAgICByZXR1cm4gdGhpcy50ZXN0c0luZGV4ZWRCeVdvcmtzcGFjZVVyaS5oYXMod29ya3NwYWNlRm9sZGVyKSA/IHRoaXMudGVzdHNJbmRleGVkQnlXb3Jrc3BhY2VVcmkuZ2V0KHdvcmtzcGFjZUZvbGRlcikgOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBzdG9yZVRlc3RzKHdrc3BhY2UsIHRlc3RzKSB7XHJcbiAgICAgICAgY29uc3Qgd29ya3NwYWNlRm9sZGVyID0gdGhpcy5nZXRXb3Jrc3BhY2VGb2xkZXJQYXRoKHdrc3BhY2UpIHx8ICcnO1xyXG4gICAgICAgIHRoaXMudGVzdHNJbmRleGVkQnlXb3Jrc3BhY2VVcmkuc2V0KHdvcmtzcGFjZUZvbGRlciwgdGVzdHMpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLnRlc3RzSW5kZXhlZEJ5V29ya3NwYWNlVXJpLmNsZWFyKCk7XHJcbiAgICB9XHJcbiAgICBnZXRXb3Jrc3BhY2VGb2xkZXJQYXRoKHJlc291cmNlKSB7XHJcbiAgICAgICAgY29uc3QgZm9sZGVyID0gdnNjb2RlXzEud29ya3NwYWNlLmdldFdvcmtzcGFjZUZvbGRlcihyZXNvdXJjZSk7XHJcbiAgICAgICAgcmV0dXJuIGZvbGRlciA/IGZvbGRlci51cmkucGF0aCA6IHVuZGVmaW5lZDtcclxuICAgIH1cclxufTtcclxuVGVzdENvbGxlY3Rpb25TdG9yYWdlU2VydmljZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpLFxyXG4gICAgX19wYXJhbSgwLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMS5JRGlzcG9zYWJsZVJlZ2lzdHJ5KSlcclxuXSwgVGVzdENvbGxlY3Rpb25TdG9yYWdlU2VydmljZSk7XHJcbmV4cG9ydHMuVGVzdENvbGxlY3Rpb25TdG9yYWdlU2VydmljZSA9IFRlc3RDb2xsZWN0aW9uU3RvcmFnZVNlcnZpY2U7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JhZ2VTZXJ2aWNlLmpzLm1hcCJdfQ==