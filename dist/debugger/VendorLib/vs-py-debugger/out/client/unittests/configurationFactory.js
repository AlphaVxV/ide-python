// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const types_1 = require("../common/types");

const types_2 = require("../ioc/types");

const nose = require("./nosetest/testConfigurationManager");

const pytest = require("./pytest/testConfigurationManager");

const unittest = require("./unittest/testConfigurationManager");

let TestConfigurationManagerFactory = class TestConfigurationManagerFactory {
  constructor(serviceContainer) {
    this.serviceContainer = serviceContainer;
  }

  create(wkspace, product) {
    switch (product) {
      case types_1.Product.unittest:
        {
          return new unittest.ConfigurationManager(wkspace, this.serviceContainer);
        }

      case types_1.Product.pytest:
        {
          return new pytest.ConfigurationManager(wkspace, this.serviceContainer);
        }

      case types_1.Product.nosetest:
        {
          return new nose.ConfigurationManager(wkspace, this.serviceContainer);
        }

      default:
        {
          throw new Error('Invalid test configuration');
        }
    }
  }

};
TestConfigurationManagerFactory = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_2.IServiceContainer))], TestConfigurationManagerFactory);
exports.TestConfigurationManagerFactory = TestConfigurationManagerFactory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ3VyYXRpb25GYWN0b3J5LmpzIl0sIm5hbWVzIjpbIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZCIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fcGFyYW0iLCJwYXJhbUluZGV4IiwiZGVjb3JhdG9yIiwiZXhwb3J0cyIsInZhbHVlIiwiaW52ZXJzaWZ5XzEiLCJyZXF1aXJlIiwidHlwZXNfMSIsInR5cGVzXzIiLCJub3NlIiwicHl0ZXN0IiwidW5pdHRlc3QiLCJUZXN0Q29uZmlndXJhdGlvbk1hbmFnZXJGYWN0b3J5IiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlQ29udGFpbmVyIiwiY3JlYXRlIiwid2tzcGFjZSIsInByb2R1Y3QiLCJQcm9kdWN0IiwiQ29uZmlndXJhdGlvbk1hbmFnZXIiLCJub3NldGVzdCIsIkVycm9yIiwiaW5qZWN0YWJsZSIsImluamVjdCIsIklTZXJ2aWNlQ29udGFpbmVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsVUFBVSxHQUFJLFVBQVEsU0FBS0EsVUFBZCxJQUE2QixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ25GLE1BQUlDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFsQjtBQUFBLE1BQTBCQyxDQUFDLEdBQUdILENBQUMsR0FBRyxDQUFKLEdBQVFILE1BQVIsR0FBaUJFLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFJLEdBQUdLLE1BQU0sQ0FBQ0Msd0JBQVAsQ0FBZ0NSLE1BQWhDLEVBQXdDQyxHQUF4QyxDQUF2QixHQUFzRUMsSUFBckg7QUFBQSxNQUEySE8sQ0FBM0g7QUFDQSxNQUFJLE9BQU9DLE9BQVAsS0FBbUIsUUFB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QUMsQ0FDekNxQixXQUFXLENBQUNpQixVQUFaLEVBRHlDLEVBRXpDdEIsT0FBTyxDQUFDLENBQUQsRUFBSUssV0FBVyxDQUFDa0IsTUFBWixDQUFtQmYsT0FBTyxDQUFDZ0IsaUJBQTNCLENBQUosQ0FGa0MsQ0FBRCxFQUd6Q1osK0JBSHlDLENBQTVDO0FBSUFULE9BQU8sQ0FBQ1MsK0JBQVIsR0FBMENBLCtCQUExQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vdHlwZXNcIik7XHJcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vaW9jL3R5cGVzXCIpO1xyXG5jb25zdCBub3NlID0gcmVxdWlyZShcIi4vbm9zZXRlc3QvdGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyXCIpO1xyXG5jb25zdCBweXRlc3QgPSByZXF1aXJlKFwiLi9weXRlc3QvdGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyXCIpO1xyXG5jb25zdCB1bml0dGVzdCA9IHJlcXVpcmUoXCIuL3VuaXR0ZXN0L3Rlc3RDb25maWd1cmF0aW9uTWFuYWdlclwiKTtcclxubGV0IFRlc3RDb25maWd1cmF0aW9uTWFuYWdlckZhY3RvcnkgPSBjbGFzcyBUZXN0Q29uZmlndXJhdGlvbk1hbmFnZXJGYWN0b3J5IHtcclxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VDb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2VDb250YWluZXIgPSBzZXJ2aWNlQ29udGFpbmVyO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlKHdrc3BhY2UsIHByb2R1Y3QpIHtcclxuICAgICAgICBzd2l0Y2ggKHByb2R1Y3QpIHtcclxuICAgICAgICAgICAgY2FzZSB0eXBlc18xLlByb2R1Y3QudW5pdHRlc3Q6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdW5pdHRlc3QuQ29uZmlndXJhdGlvbk1hbmFnZXIod2tzcGFjZSwgdGhpcy5zZXJ2aWNlQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIHR5cGVzXzEuUHJvZHVjdC5weXRlc3Q6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgcHl0ZXN0LkNvbmZpZ3VyYXRpb25NYW5hZ2VyKHdrc3BhY2UsIHRoaXMuc2VydmljZUNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSB0eXBlc18xLlByb2R1Y3Qubm9zZXRlc3Q6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbm9zZS5Db25maWd1cmF0aW9uTWFuYWdlcih3a3NwYWNlLCB0aGlzLnNlcnZpY2VDb250YWluZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB0ZXN0IGNvbmZpZ3VyYXRpb24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuVGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyRmFjdG9yeSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgaW52ZXJzaWZ5XzEuaW5qZWN0YWJsZSgpLFxyXG4gICAgX19wYXJhbSgwLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMi5JU2VydmljZUNvbnRhaW5lcikpXHJcbl0sIFRlc3RDb25maWd1cmF0aW9uTWFuYWdlckZhY3RvcnkpO1xyXG5leHBvcnRzLlRlc3RDb25maWd1cmF0aW9uTWFuYWdlckZhY3RvcnkgPSBUZXN0Q29uZmlndXJhdGlvbk1hbmFnZXJGYWN0b3J5O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWd1cmF0aW9uRmFjdG9yeS5qcy5tYXAiXX0=