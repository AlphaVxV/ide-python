"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const path = require("path");

const types_1 = require("../../common/types");

let TestsParser = class TestsParser {
  constructor(testsHelper) {
    this.testsHelper = testsHelper;
  }

  parse(content, options) {
    const testIds = this.getTestIds(content);
    let testsDirectory = options.cwd;

    if (options.startDirectory.length > 1) {
      testsDirectory = path.isAbsolute(options.startDirectory) ? options.startDirectory : path.resolve(options.cwd, options.startDirectory);
    }

    return this.parseTestIds(testsDirectory, testIds);
  }

  getTestIds(content) {
    let startedCollecting = false;
    return content.split(/\r?\n/g).map(line => {
      if (!startedCollecting) {
        if (line === 'start') {
          startedCollecting = true;
        }

        return '';
      }

      return line.trim();
    }).filter(line => line.length > 0);
  }

  parseTestIds(rootDirectory, testIds) {
    const testFiles = [];
    testIds.forEach(testId => this.addTestId(rootDirectory, testId, testFiles));
    return this.testsHelper.flattenTestFiles(testFiles);
  }
  /**
   * Add the test Ids into the array provided.
   * TestIds are fully qualified including the method names.
   * E.g. tone_test.Failing2Tests.test_failure
   * Where tone_test = folder, Failing2Tests = class/suite, test_failure = method.
   * @private
   * @param {string} rootDirectory
   * @param {string[]} testIds
   * @returns {Tests}
   * @memberof TestsParser
   */


  addTestId(rootDirectory, testId, testFiles) {
    const testIdParts = testId.split('.'); // We must have a file, class and function name

    if (testIdParts.length <= 2) {
      return null;
    }

    const paths = testIdParts.slice(0, testIdParts.length - 2);
    const filePath = `${path.join(rootDirectory, ...paths)}.py`;
    const functionName = testIdParts.pop();
    const suiteToRun = testIdParts.join('.');
    const className = testIdParts.pop(); // Check if we already have this test file

    let testFile = testFiles.find(test => test.fullPath === filePath);

    if (!testFile) {
      testFile = {
        name: path.basename(filePath),
        fullPath: filePath,
        functions: [],
        suites: [],
        nameToRun: `${suiteToRun}.${functionName}`,
        xmlName: '',
        status: types_1.TestStatus.Idle,
        time: 0
      };
      testFiles.push(testFile);
    } // Check if we already have this suite
    // nameToRun = testId - method name


    let testSuite = testFile.suites.find(cls => cls.nameToRun === suiteToRun);

    if (!testSuite) {
      testSuite = {
        name: className,
        functions: [],
        suites: [],
        isUnitTest: true,
        isInstance: false,
        nameToRun: suiteToRun,
        xmlName: '',
        status: types_1.TestStatus.Idle,
        time: 0
      };
      testFile.suites.push(testSuite);
    }

    const testFunction = {
      name: functionName,
      nameToRun: testId,
      status: types_1.TestStatus.Idle,
      time: 0
    };
    testSuite.functions.push(testFunction);
  }

};
TestsParser = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.ITestsHelper))], TestsParser);
exports.TestsParser = TestsParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlclNlcnZpY2UuanMiXSwibmFtZXMiOlsiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19wYXJhbSIsInBhcmFtSW5kZXgiLCJkZWNvcmF0b3IiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZlcnNpZnlfMSIsInJlcXVpcmUiLCJwYXRoIiwidHlwZXNfMSIsIlRlc3RzUGFyc2VyIiwiY29uc3RydWN0b3IiLCJ0ZXN0c0hlbHBlciIsInBhcnNlIiwiY29udGVudCIsIm9wdGlvbnMiLCJ0ZXN0SWRzIiwiZ2V0VGVzdElkcyIsInRlc3RzRGlyZWN0b3J5IiwiY3dkIiwic3RhcnREaXJlY3RvcnkiLCJpc0Fic29sdXRlIiwicmVzb2x2ZSIsInBhcnNlVGVzdElkcyIsInN0YXJ0ZWRDb2xsZWN0aW5nIiwic3BsaXQiLCJtYXAiLCJsaW5lIiwidHJpbSIsImZpbHRlciIsInJvb3REaXJlY3RvcnkiLCJ0ZXN0RmlsZXMiLCJmb3JFYWNoIiwidGVzdElkIiwiYWRkVGVzdElkIiwiZmxhdHRlblRlc3RGaWxlcyIsInRlc3RJZFBhcnRzIiwicGF0aHMiLCJzbGljZSIsImZpbGVQYXRoIiwiam9pbiIsImZ1bmN0aW9uTmFtZSIsInBvcCIsInN1aXRlVG9SdW4iLCJjbGFzc05hbWUiLCJ0ZXN0RmlsZSIsImZpbmQiLCJ0ZXN0IiwiZnVsbFBhdGgiLCJuYW1lIiwiYmFzZW5hbWUiLCJmdW5jdGlvbnMiLCJzdWl0ZXMiLCJuYW1lVG9SdW4iLCJ4bWxOYW1lIiwic3RhdHVzIiwiVGVzdFN0YXR1cyIsIklkbGUiLCJ0aW1lIiwicHVzaCIsInRlc3RTdWl0ZSIsImNscyIsImlzVW5pdFRlc3QiLCJpc0luc3RhbmNlIiwidGVzdEZ1bmN0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MEQsWUFBM0IsQ0FBSixDQUZjLENBQUQsRUFHckJ6RCxXQUhxQixDQUF4QjtBQUlBTixPQUFPLENBQUNNLFdBQVIsR0FBc0JBLFdBQXRCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn07XHJcbnZhciBfX3BhcmFtID0gKHRoaXMgJiYgdGhpcy5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBpbnZlcnNpZnlfMSA9IHJlcXVpcmUoXCJpbnZlcnNpZnlcIik7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vdHlwZXNcIik7XHJcbmxldCBUZXN0c1BhcnNlciA9IGNsYXNzIFRlc3RzUGFyc2VyIHtcclxuICAgIGNvbnN0cnVjdG9yKHRlc3RzSGVscGVyKSB7XHJcbiAgICAgICAgdGhpcy50ZXN0c0hlbHBlciA9IHRlc3RzSGVscGVyO1xyXG4gICAgfVxyXG4gICAgcGFyc2UoY29udGVudCwgb3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHRlc3RJZHMgPSB0aGlzLmdldFRlc3RJZHMoY29udGVudCk7XHJcbiAgICAgICAgbGV0IHRlc3RzRGlyZWN0b3J5ID0gb3B0aW9ucy5jd2Q7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnREaXJlY3RvcnkubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICB0ZXN0c0RpcmVjdG9yeSA9IHBhdGguaXNBYnNvbHV0ZShvcHRpb25zLnN0YXJ0RGlyZWN0b3J5KSA/IG9wdGlvbnMuc3RhcnREaXJlY3RvcnkgOiBwYXRoLnJlc29sdmUob3B0aW9ucy5jd2QsIG9wdGlvbnMuc3RhcnREaXJlY3RvcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVRlc3RJZHModGVzdHNEaXJlY3RvcnksIHRlc3RJZHMpO1xyXG4gICAgfVxyXG4gICAgZ2V0VGVzdElkcyhjb250ZW50KSB7XHJcbiAgICAgICAgbGV0IHN0YXJ0ZWRDb2xsZWN0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQuc3BsaXQoL1xccj9cXG4vZylcclxuICAgICAgICAgICAgLm1hcChsaW5lID0+IHtcclxuICAgICAgICAgICAgaWYgKCFzdGFydGVkQ29sbGVjdGluZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmUgPT09ICdzdGFydCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydGVkQ29sbGVjdGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGxpbmUudHJpbSgpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIobGluZSA9PiBsaW5lLmxlbmd0aCA+IDApO1xyXG4gICAgfVxyXG4gICAgcGFyc2VUZXN0SWRzKHJvb3REaXJlY3RvcnksIHRlc3RJZHMpIHtcclxuICAgICAgICBjb25zdCB0ZXN0RmlsZXMgPSBbXTtcclxuICAgICAgICB0ZXN0SWRzLmZvckVhY2godGVzdElkID0+IHRoaXMuYWRkVGVzdElkKHJvb3REaXJlY3RvcnksIHRlc3RJZCwgdGVzdEZpbGVzKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVzdHNIZWxwZXIuZmxhdHRlblRlc3RGaWxlcyh0ZXN0RmlsZXMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgdGhlIHRlc3QgSWRzIGludG8gdGhlIGFycmF5IHByb3ZpZGVkLlxyXG4gICAgICogVGVzdElkcyBhcmUgZnVsbHkgcXVhbGlmaWVkIGluY2x1ZGluZyB0aGUgbWV0aG9kIG5hbWVzLlxyXG4gICAgICogRS5nLiB0b25lX3Rlc3QuRmFpbGluZzJUZXN0cy50ZXN0X2ZhaWx1cmVcclxuICAgICAqIFdoZXJlIHRvbmVfdGVzdCA9IGZvbGRlciwgRmFpbGluZzJUZXN0cyA9IGNsYXNzL3N1aXRlLCB0ZXN0X2ZhaWx1cmUgPSBtZXRob2QuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvb3REaXJlY3RvcnlcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRlc3RJZHNcclxuICAgICAqIEByZXR1cm5zIHtUZXN0c31cclxuICAgICAqIEBtZW1iZXJvZiBUZXN0c1BhcnNlclxyXG4gICAgICovXHJcbiAgICBhZGRUZXN0SWQocm9vdERpcmVjdG9yeSwgdGVzdElkLCB0ZXN0RmlsZXMpIHtcclxuICAgICAgICBjb25zdCB0ZXN0SWRQYXJ0cyA9IHRlc3RJZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIC8vIFdlIG11c3QgaGF2ZSBhIGZpbGUsIGNsYXNzIGFuZCBmdW5jdGlvbiBuYW1lXHJcbiAgICAgICAgaWYgKHRlc3RJZFBhcnRzLmxlbmd0aCA8PSAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXRocyA9IHRlc3RJZFBhcnRzLnNsaWNlKDAsIHRlc3RJZFBhcnRzLmxlbmd0aCAtIDIpO1xyXG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gYCR7cGF0aC5qb2luKHJvb3REaXJlY3RvcnksIC4uLnBhdGhzKX0ucHlgO1xyXG4gICAgICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IHRlc3RJZFBhcnRzLnBvcCgpO1xyXG4gICAgICAgIGNvbnN0IHN1aXRlVG9SdW4gPSB0ZXN0SWRQYXJ0cy5qb2luKCcuJyk7XHJcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gdGVzdElkUGFydHMucG9wKCk7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIHRoaXMgdGVzdCBmaWxlXHJcbiAgICAgICAgbGV0IHRlc3RGaWxlID0gdGVzdEZpbGVzLmZpbmQodGVzdCA9PiB0ZXN0LmZ1bGxQYXRoID09PSBmaWxlUGF0aCk7XHJcbiAgICAgICAgaWYgKCF0ZXN0RmlsZSkge1xyXG4gICAgICAgICAgICB0ZXN0RmlsZSA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHBhdGguYmFzZW5hbWUoZmlsZVBhdGgpLFxyXG4gICAgICAgICAgICAgICAgZnVsbFBhdGg6IGZpbGVQYXRoLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb25zOiBbXSxcclxuICAgICAgICAgICAgICAgIHN1aXRlczogW10sXHJcbiAgICAgICAgICAgICAgICBuYW1lVG9SdW46IGAke3N1aXRlVG9SdW59LiR7ZnVuY3Rpb25OYW1lfWAsXHJcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgIHN0YXR1czogdHlwZXNfMS5UZXN0U3RhdHVzLklkbGUsXHJcbiAgICAgICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRlc3RGaWxlcy5wdXNoKHRlc3RGaWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBoYXZlIHRoaXMgc3VpdGVcclxuICAgICAgICAvLyBuYW1lVG9SdW4gPSB0ZXN0SWQgLSBtZXRob2QgbmFtZVxyXG4gICAgICAgIGxldCB0ZXN0U3VpdGUgPSB0ZXN0RmlsZS5zdWl0ZXMuZmluZChjbHMgPT4gY2xzLm5hbWVUb1J1biA9PT0gc3VpdGVUb1J1bik7XHJcbiAgICAgICAgaWYgKCF0ZXN0U3VpdGUpIHtcclxuICAgICAgICAgICAgdGVzdFN1aXRlID0ge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogY2xhc3NOYW1lLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb25zOiBbXSxcclxuICAgICAgICAgICAgICAgIHN1aXRlczogW10sXHJcbiAgICAgICAgICAgICAgICBpc1VuaXRUZXN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaXNJbnN0YW5jZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBuYW1lVG9SdW46IHN1aXRlVG9SdW4sXHJcbiAgICAgICAgICAgICAgICB4bWxOYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgIHN0YXR1czogdHlwZXNfMS5UZXN0U3RhdHVzLklkbGUsXHJcbiAgICAgICAgICAgICAgICB0aW1lOiAwXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRlc3RGaWxlLnN1aXRlcy5wdXNoKHRlc3RTdWl0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRlc3RGdW5jdGlvbiA9IHtcclxuICAgICAgICAgICAgbmFtZTogZnVuY3Rpb25OYW1lLFxyXG4gICAgICAgICAgICBuYW1lVG9SdW46IHRlc3RJZCxcclxuICAgICAgICAgICAgc3RhdHVzOiB0eXBlc18xLlRlc3RTdGF0dXMuSWRsZSxcclxuICAgICAgICAgICAgdGltZTogMFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGVzdFN1aXRlLmZ1bmN0aW9ucy5wdXNoKHRlc3RGdW5jdGlvbik7XHJcbiAgICB9XHJcbn07XHJcblRlc3RzUGFyc2VyID0gX19kZWNvcmF0ZShbXHJcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKCksXHJcbiAgICBfX3BhcmFtKDAsIGludmVyc2lmeV8xLmluamVjdCh0eXBlc18xLklUZXN0c0hlbHBlcikpXHJcbl0sIFRlc3RzUGFyc2VyKTtcclxuZXhwb3J0cy5UZXN0c1BhcnNlciA9IFRlc3RzUGFyc2VyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZXJTZXJ2aWNlLmpzLm1hcCJdfQ==