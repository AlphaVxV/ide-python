"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const vscode_1 = require("vscode");

const types_1 = require("../../../ioc/types");

const constants_1 = require("../../common/constants");

const types_2 = require("../../common/types");

const types_3 = require("../../types");

let TestDiscoveryService = class TestDiscoveryService {
  constructor(serviceContainer, testParser) {
    this.serviceContainer = serviceContainer;
    this.testParser = testParser;
    this.argsService = this.serviceContainer.get(types_3.IArgumentsService, constants_1.PYTEST_PROVIDER);
    this.helper = this.serviceContainer.get(types_2.ITestsHelper);
    this.runner = this.serviceContainer.get(types_2.ITestRunner);
  }

  discoverTests(options) {
    return __awaiter(this, void 0, void 0, function* () {
      const args = this.buildTestCollectionArgs(options); // Collect tests for each test directory separately and merge.

      const testDirectories = this.argsService.getTestFolders(options.args);

      if (testDirectories.length === 0) {
        const opts = Object.assign({}, options, {
          args
        });
        return this.discoverTestsInTestDirectory(opts);
      }

      const results = yield Promise.all(testDirectories.map(testDir => {
        // Add test directory as a positional argument.
        const opts = Object.assign({}, options, {
          args: [...args, testDir]
        });
        return this.discoverTestsInTestDirectory(opts);
      }));
      return this.helper.mergeTests(results);
    });
  }

  buildTestCollectionArgs(options) {
    // Remove unwnted arguments (which happen to be test directories & test specific args).
    const args = this.argsService.filterArguments(options.args, types_3.TestFilter.discovery);

    if (options.ignoreCache && args.indexOf('--cache-clear') === -1) {
      args.splice(0, 0, '--cache-clear');
    }

    if (args.indexOf('-s') === -1) {
      args.splice(0, 0, '-s');
    }

    args.splice(0, 0, '--collect-only');
    return args;
  }

  discoverTestsInTestDirectory(options) {
    return __awaiter(this, void 0, void 0, function* () {
      const token = options.token ? options.token : new vscode_1.CancellationTokenSource().token;
      const runOptions = {
        args: options.args,
        cwd: options.cwd,
        workspaceFolder: options.workspaceFolder,
        token,
        outChannel: options.outChannel
      };
      const data = yield this.runner.run(constants_1.PYTEST_PROVIDER, runOptions);

      if (options.token && options.token.isCancellationRequested) {
        return Promise.reject('cancelled');
      }

      return this.testParser.parse(data, options);
    });
  }

};
TestDiscoveryService = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.IServiceContainer)), __param(1, inversify_1.inject(types_2.ITestsParser)), __param(1, inversify_1.named(constants_1.PYTEST_PROVIDER))], TestDiscoveryService);
exports.TestDiscoveryService = TestDiscoveryService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,