// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("../../../common/types");

const async_1 = require("../../../common/utils/async");

const BaseDebugServer_1 = require("./BaseDebugServer");

class LocalDebugServerV2 extends BaseDebugServer_1.BaseDebugServer {
  constructor(debugSession, args, serviceContainer) {
    super(debugSession);
    this.args = args;
    this.serviceContainer = serviceContainer;
    this.clientSocket = async_1.createDeferred();
  }

  Stop() {
    if (this.socketServer) {
      try {
        this.socketServer.dispose(); // tslint:disable-next-line:no-empty
      } catch (_a) {}

      this.socketServer = undefined;
    }
  }

  Start() {
    return __awaiter(this, void 0, void 0, function* () {
      const host = typeof this.args.host === 'string' && this.args.host.trim().length > 0 ? this.args.host.trim() : 'localhost';
      const socketServer = this.socketServer = this.serviceContainer.get(types_1.ISocketServer);
      const port = yield socketServer.Start({
        port: this.args.port,
        host
      });
      socketServer.client.then(socket => {
        // This is required to prevent the launcher from aborting if the PTVSD process spits out any errors in stderr stream.
        this.isRunning = true;
        this.debugClientConnected.resolve(true);
        this.clientSocket.resolve(socket);
      }).catch(ex => {
        this.debugClientConnected.reject(ex);
        this.clientSocket.reject(ex);
      });
      return {
        port,
        host
      };
    });
  }

}

exports.LocalDebugServerV2 = LocalDebugServerV2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxvY2FsRGVidWdTZXJ2ZXJWMi5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidHlwZXNfMSIsInJlcXVpcmUiLCJhc3luY18xIiwiQmFzZURlYnVnU2VydmVyXzEiLCJMb2NhbERlYnVnU2VydmVyVjIiLCJCYXNlRGVidWdTZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsImRlYnVnU2Vzc2lvbiIsImFyZ3MiLCJzZXJ2aWNlQ29udGFpbmVyIiwiY2xpZW50U29ja2V0IiwiY3JlYXRlRGVmZXJyZWQiLCJTdG9wIiwic29ja2V0U2VydmVyIiwiZGlzcG9zZSIsIl9hIiwidW5kZWZpbmVkIiwiU3RhcnQiLCJob3N0IiwidHJpbSIsImxlbmd0aCIsImdldCIsIklTb2NrZXRTZXJ2ZXIiLCJwb3J0IiwiY2xpZW50Iiwic29ja2V0IiwiaXNSdW5uaW5nIiwiZGVidWdDbGllbnRDb25uZWN0ZWQiLCJjYXRjaCIsImV4Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElB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QUF4QixPQUFuQixDQUFuQjtBQUNBTCxNQUFBQSxZQUFZLENBQUNXLE1BQWIsQ0FBb0I3QixJQUFwQixDQUF5QjhCLE1BQU0sSUFBSTtBQUMvQjtBQUNBLGFBQUtDLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxhQUFLQyxvQkFBTCxDQUEwQjFDLE9BQTFCLENBQWtDLElBQWxDO0FBQ0EsYUFBS3lCLFlBQUwsQ0FBa0J6QixPQUFsQixDQUEwQndDLE1BQTFCO0FBQ0gsT0FMRCxFQUtHRyxLQUxILENBS1NDLEVBQUUsSUFBSTtBQUNYLGFBQUtGLG9CQUFMLENBQTBCekMsTUFBMUIsQ0FBaUMyQyxFQUFqQztBQUNBLGFBQUtuQixZQUFMLENBQWtCeEIsTUFBbEIsQ0FBeUIyQyxFQUF6QjtBQUNILE9BUkQ7QUFTQSxhQUFPO0FBQUVOLFFBQUFBLElBQUY7QUFBUUwsUUFBQUE7QUFBUixPQUFQO0FBQ0gsS0FkZSxDQUFoQjtBQWVIOztBQWpDOEQ7O0FBbUNuRW5CLE9BQU8sQ0FBQ0ssa0JBQVIsR0FBNkJBLGtCQUE3QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NvbW1vbi90eXBlc1wiKTtcclxuY29uc3QgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jb21tb24vdXRpbHMvYXN5bmNcIik7XHJcbmNvbnN0IEJhc2VEZWJ1Z1NlcnZlcl8xID0gcmVxdWlyZShcIi4vQmFzZURlYnVnU2VydmVyXCIpO1xyXG5jbGFzcyBMb2NhbERlYnVnU2VydmVyVjIgZXh0ZW5kcyBCYXNlRGVidWdTZXJ2ZXJfMS5CYXNlRGVidWdTZXJ2ZXIge1xyXG4gICAgY29uc3RydWN0b3IoZGVidWdTZXNzaW9uLCBhcmdzLCBzZXJ2aWNlQ29udGFpbmVyKSB7XHJcbiAgICAgICAgc3VwZXIoZGVidWdTZXNzaW9uKTtcclxuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xyXG4gICAgICAgIHRoaXMuc2VydmljZUNvbnRhaW5lciA9IHNlcnZpY2VDb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5jbGllbnRTb2NrZXQgPSBhc3luY18xLmNyZWF0ZURlZmVycmVkKCk7XHJcbiAgICB9XHJcbiAgICBTdG9wKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNvY2tldFNlcnZlcikge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb2NrZXRTZXJ2ZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7IH1cclxuICAgICAgICAgICAgdGhpcy5zb2NrZXRTZXJ2ZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgU3RhcnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgaG9zdCA9IHR5cGVvZiB0aGlzLmFyZ3MuaG9zdCA9PT0gJ3N0cmluZycgJiYgdGhpcy5hcmdzLmhvc3QudHJpbSgpLmxlbmd0aCA+IDAgPyB0aGlzLmFyZ3MuaG9zdC50cmltKCkgOiAnbG9jYWxob3N0JztcclxuICAgICAgICAgICAgY29uc3Qgc29ja2V0U2VydmVyID0gdGhpcy5zb2NrZXRTZXJ2ZXIgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzEuSVNvY2tldFNlcnZlcik7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvcnQgPSB5aWVsZCBzb2NrZXRTZXJ2ZXIuU3RhcnQoeyBwb3J0OiB0aGlzLmFyZ3MucG9ydCwgaG9zdCB9KTtcclxuICAgICAgICAgICAgc29ja2V0U2VydmVyLmNsaWVudC50aGVuKHNvY2tldCA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgdGhlIGxhdW5jaGVyIGZyb20gYWJvcnRpbmcgaWYgdGhlIFBUVlNEIHByb2Nlc3Mgc3BpdHMgb3V0IGFueSBlcnJvcnMgaW4gc3RkZXJyIHN0cmVhbS5cclxuICAgICAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVidWdDbGllbnRDb25uZWN0ZWQucmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50U29ja2V0LnJlc29sdmUoc29ja2V0KTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZXggPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWJ1Z0NsaWVudENvbm5lY3RlZC5yZWplY3QoZXgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGllbnRTb2NrZXQucmVqZWN0KGV4KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHBvcnQsIGhvc3QgfTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkxvY2FsRGVidWdTZXJ2ZXJWMiA9IExvY2FsRGVidWdTZXJ2ZXJWMjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TG9jYWxEZWJ1Z1NlcnZlclYyLmpzLm1hcCJdfQ==