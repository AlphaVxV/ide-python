// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const LocalDebugClient_1 = require("./LocalDebugClient");

class LocalDebugClientV2 extends LocalDebugClient_1.LocalDebugClient {
  constructor(args, debugSession, canLaunchTerminal, launcherScriptProvider) {
    super(args, debugSession, canLaunchTerminal, launcherScriptProvider);
  }

  buildDebugArguments(cwd, debugPort) {
    const launcher = this.launcherScriptProvider.getLauncherFilePath();
    const additionalPtvsdArgs = [];

    if (this.args.noDebug) {
      additionalPtvsdArgs.push('--nodebug');
    }

    return [launcher, ...additionalPtvsdArgs, '--client', '--host', 'localhost', '--port', debugPort.toString()];
  }

  buildStandardArguments() {
    const programArgs = Array.isArray(this.args.args) && this.args.args.length > 0 ? this.args.args : [];

    if (typeof this.args.module === 'string' && this.args.module.length > 0) {
      return ['-m', this.args.module, ...programArgs];
    }

    if (this.args.program && this.args.program.length > 0) {
      return [this.args.program, ...programArgs];
    }

    return programArgs;
  }

}

exports.LocalDebugClientV2 = LocalDebugClientV2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvY2FsRGVidWdDbGllbnRWMi5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkxvY2FsRGVidWdDbGllbnRfMSIsInJlcXVpcmUiLCJMb2NhbERlYnVnQ2xpZW50VjIiLCJMb2NhbERlYnVnQ2xpZW50IiwiY29uc3RydWN0b3IiLCJhcmdzIiwiZGVidWdTZXNzaW9uIiwiY2FuTGF1bmNoVGVybWluYWwiLCJsYXVuY2hlclNjcmlwdFByb3ZpZGVyIiwiYnVpbGREZWJ1Z0FyZ3VtZW50cyIsImN3ZCIsImRlYnVnUG9ydCIsImxhdW5jaGVyIiwiZ2V0TGF1bmNoZXJGaWxlUGF0aCIsImFkZGl0aW9uYWxQdHZzZEFyZ3MiLCJub0RlYnVnIiwicHVzaCIsInRvU3RyaW5nIiwiYnVpbGRTdGFuZGFyZEFyZ3VtZW50cyIsInByb2dyYW1BcmdzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwibW9kdWxlIiwicHJvZ3JhbSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLGtCQUFrQixHQUFHQyxPQUFPLENBQUMsb0JBQUQsQ0FBbEM7O0FBQ0EsTUFBTUMsa0JBQU4sU0FBaUNGLGtCQUFrQixDQUFDRyxnQkFBcEQsQ0FBcUU7QUFDakVDLEVBQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxZQUFQLEVBQXFCQyxpQkFBckIsRUFBd0NDLHNCQUF4QyxFQUFnRTtBQUN2RSxVQUFNSCxJQUFOLEVBQVlDLFlBQVosRUFBMEJDLGlCQUExQixFQUE2Q0Msc0JBQTdDO0FBQ0g7O0FBQ0RDLEVBQUFBLG1CQUFtQixDQUFDQyxHQUFELEVBQU1DLFNBQU4sRUFBaUI7QUFDaEMsVUFBTUMsUUFBUSxHQUFHLEtBQUtKLHNCQUFMLENBQTRCSyxtQkFBNUIsRUFBakI7QUFDQSxVQUFNQyxtQkFBbUIsR0FBRyxFQUE1Qjs7QUFDQSxRQUFJLEtBQUtULElBQUwsQ0FBVVUsT0FBZCxFQUF1QjtBQUNuQkQsTUFBQUEsbUJBQW1CLENBQUNFLElBQXBCLENBQXlCLFdBQXpCO0FBQ0g7O0FBQ0QsV0FBTyxDQUFDSixRQUFELEVBQVcsR0FBR0UsbUJBQWQsRUFBbUMsVUFBbkMsRUFBK0MsUUFBL0MsRUFBeUQsV0FBekQsRUFBc0UsUUFBdEUsRUFBZ0ZILFNBQVMsQ0FBQ00sUUFBVixFQUFoRixDQUFQO0FBQ0g7O0FBQ0RDLEVBQUFBLHNCQUFzQixHQUFHO0FBQ3JCLFVBQU1DLFdBQVcsR0FBR0MsS0FBSyxDQUFDQyxPQUFOLENBQWMsS0FBS2hCLElBQUwsQ0FBVUEsSUFBeEIsS0FBaUMsS0FBS0EsSUFBTCxDQUFVQSxJQUFWLENBQWVpQixNQUFmLEdBQXdCLENBQXpELEdBQTZELEtBQUtqQixJQUFMLENBQVVBLElBQXZFLEdBQThFLEVBQWxHOztBQUNBLFFBQUksT0FBTyxLQUFLQSxJQUFMLENBQVVrQixNQUFqQixLQUE0QixRQUE1QixJQUF3QyxLQUFLbEIsSUFBTCxDQUFVa0IsTUFBVixDQUFpQkQsTUFBakIsR0FBMEIsQ0FBdEUsRUFBeUU7QUFDckUsYUFBTyxDQUFDLElBQUQsRUFBTyxLQUFLakIsSUFBTCxDQUFVa0IsTUFBakIsRUFBeUIsR0FBR0osV0FBNUIsQ0FBUDtBQUNIOztBQUNELFFBQUksS0FBS2QsSUFBTCxDQUFVbUIsT0FBVixJQUFxQixLQUFLbkIsSUFBTCxDQUFVbUIsT0FBVixDQUFrQkYsTUFBbEIsR0FBMkIsQ0FBcEQsRUFBdUQ7QUFDbkQsYUFBTyxDQUFDLEtBQUtqQixJQUFMLENBQVVtQixPQUFYLEVBQW9CLEdBQUdMLFdBQXZCLENBQVA7QUFDSDs7QUFDRCxXQUFPQSxXQUFQO0FBQ0g7O0FBckJnRTs7QUF1QnJFckIsT0FBTyxDQUFDSSxrQkFBUixHQUE2QkEsa0JBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IExvY2FsRGVidWdDbGllbnRfMSA9IHJlcXVpcmUoXCIuL0xvY2FsRGVidWdDbGllbnRcIik7XHJcbmNsYXNzIExvY2FsRGVidWdDbGllbnRWMiBleHRlbmRzIExvY2FsRGVidWdDbGllbnRfMS5Mb2NhbERlYnVnQ2xpZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGFyZ3MsIGRlYnVnU2Vzc2lvbiwgY2FuTGF1bmNoVGVybWluYWwsIGxhdW5jaGVyU2NyaXB0UHJvdmlkZXIpIHtcclxuICAgICAgICBzdXBlcihhcmdzLCBkZWJ1Z1Nlc3Npb24sIGNhbkxhdW5jaFRlcm1pbmFsLCBsYXVuY2hlclNjcmlwdFByb3ZpZGVyKTtcclxuICAgIH1cclxuICAgIGJ1aWxkRGVidWdBcmd1bWVudHMoY3dkLCBkZWJ1Z1BvcnQpIHtcclxuICAgICAgICBjb25zdCBsYXVuY2hlciA9IHRoaXMubGF1bmNoZXJTY3JpcHRQcm92aWRlci5nZXRMYXVuY2hlckZpbGVQYXRoKCk7XHJcbiAgICAgICAgY29uc3QgYWRkaXRpb25hbFB0dnNkQXJncyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLmFyZ3Mubm9EZWJ1Zykge1xyXG4gICAgICAgICAgICBhZGRpdGlvbmFsUHR2c2RBcmdzLnB1c2goJy0tbm9kZWJ1ZycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW2xhdW5jaGVyLCAuLi5hZGRpdGlvbmFsUHR2c2RBcmdzLCAnLS1jbGllbnQnLCAnLS1ob3N0JywgJ2xvY2FsaG9zdCcsICctLXBvcnQnLCBkZWJ1Z1BvcnQudG9TdHJpbmcoKV07XHJcbiAgICB9XHJcbiAgICBidWlsZFN0YW5kYXJkQXJndW1lbnRzKCkge1xyXG4gICAgICAgIGNvbnN0IHByb2dyYW1BcmdzID0gQXJyYXkuaXNBcnJheSh0aGlzLmFyZ3MuYXJncykgJiYgdGhpcy5hcmdzLmFyZ3MubGVuZ3RoID4gMCA/IHRoaXMuYXJncy5hcmdzIDogW107XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFyZ3MubW9kdWxlID09PSAnc3RyaW5nJyAmJiB0aGlzLmFyZ3MubW9kdWxlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsnLW0nLCB0aGlzLmFyZ3MubW9kdWxlLCAuLi5wcm9ncmFtQXJnc107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmFyZ3MucHJvZ3JhbSAmJiB0aGlzLmFyZ3MucHJvZ3JhbS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5hcmdzLnByb2dyYW0sIC4uLnByb2dyYW1BcmdzXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb2dyYW1BcmdzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuTG9jYWxEZWJ1Z0NsaWVudFYyID0gTG9jYWxEZWJ1Z0NsaWVudFYyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2NhbERlYnVnQ2xpZW50VjIuanMubWFwIl19