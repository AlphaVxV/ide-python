// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const net_1 = require("net");

const BaseDebugServer_1 = require("./BaseDebugServer");

class RemoteDebugServerV2 extends BaseDebugServer_1.BaseDebugServer {
  constructor(debugSession, args) {
    super(debugSession);
    this.args = args;
  }

  Stop() {
    if (this.socket) {
      this.socket.destroy();
    }
  }

  Start() {
    return new Promise((resolve, reject) => {
      const port = this.args.port;
      const options = {
        port
      };

      if (typeof this.args.host === 'string' && this.args.host.length > 0) {
        // tslint:disable-next-line:no-any
        options.host = this.args.host;
      }

      try {
        let connected = false;
        const socket = new net_1.Socket();
        socket.on('error', ex => {
          if (connected) {
            return;
          }

          reject(ex);
        });
        socket.connect(options, () => {
          connected = true;
          this.socket = socket;
          this.clientSocket.resolve(socket);
          resolve(options);
        });
      } catch (ex) {
        reject(ex);
      }
    });
  }

}

exports.RemoteDebugServerV2 = RemoteDebugServerV2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlbW90ZURlYnVnU2VydmVydjIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJuZXRfMSIsInJlcXVpcmUiLCJCYXNlRGVidWdTZXJ2ZXJfMSIsIlJlbW90ZURlYnVnU2VydmVyVjIiLCJCYXNlRGVidWdTZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsImRlYnVnU2Vzc2lvbiIsImFyZ3MiLCJTdG9wIiwic29ja2V0IiwiZGVzdHJveSIsIlN0YXJ0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwb3J0Iiwib3B0aW9ucyIsImhvc3QiLCJsZW5ndGgiLCJjb25uZWN0ZWQiLCJTb2NrZXQiLCJvbiIsImV4IiwiY29ubmVjdCIsImNsaWVudFNvY2tldCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLEtBQUQsQ0FBckI7O0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUdELE9BQU8sQ0FBQyxtQkFBRCxDQUFqQzs7QUFDQSxNQUFNRSxtQkFBTixTQUFrQ0QsaUJBQWlCLENBQUNFLGVBQXBELENBQW9FO0FBQ2hFQyxFQUFBQSxXQUFXLENBQUNDLFlBQUQsRUFBZUMsSUFBZixFQUFxQjtBQUM1QixVQUFNRCxZQUFOO0FBQ0EsU0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0g7O0FBQ0RDLEVBQUFBLElBQUksR0FBRztBQUNILFFBQUksS0FBS0MsTUFBVCxFQUFpQjtBQUNiLFdBQUtBLE1BQUwsQ0FBWUMsT0FBWjtBQUNIO0FBQ0o7O0FBQ0RDLEVBQUFBLEtBQUssR0FBRztBQUNKLFdBQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUNwQyxZQUFNQyxJQUFJLEdBQUcsS0FBS1IsSUFBTCxDQUFVUSxJQUF2QjtBQUNBLFlBQU1DLE9BQU8sR0FBRztBQUFFRCxRQUFBQTtBQUFGLE9BQWhCOztBQUNBLFVBQUksT0FBTyxLQUFLUixJQUFMLENBQVVVLElBQWpCLEtBQTBCLFFBQTFCLElBQXNDLEtBQUtWLElBQUwsQ0FBVVUsSUFBVixDQUFlQyxNQUFmLEdBQXdCLENBQWxFLEVBQXFFO0FBQ2pFO0FBQ0FGLFFBQUFBLE9BQU8sQ0FBQ0MsSUFBUixHQUFlLEtBQUtWLElBQUwsQ0FBVVUsSUFBekI7QUFDSDs7QUFDRCxVQUFJO0FBQ0EsWUFBSUUsU0FBUyxHQUFHLEtBQWhCO0FBQ0EsY0FBTVYsTUFBTSxHQUFHLElBQUlULEtBQUssQ0FBQ29CLE1BQVYsRUFBZjtBQUNBWCxRQUFBQSxNQUFNLENBQUNZLEVBQVAsQ0FBVSxPQUFWLEVBQW1CQyxFQUFFLElBQUk7QUFDckIsY0FBSUgsU0FBSixFQUFlO0FBQ1g7QUFDSDs7QUFDREwsVUFBQUEsTUFBTSxDQUFDUSxFQUFELENBQU47QUFDSCxTQUxEO0FBTUFiLFFBQUFBLE1BQU0sQ0FBQ2MsT0FBUCxDQUFlUCxPQUFmLEVBQXdCLE1BQU07QUFDMUJHLFVBQUFBLFNBQVMsR0FBRyxJQUFaO0FBQ0EsZUFBS1YsTUFBTCxHQUFjQSxNQUFkO0FBQ0EsZUFBS2UsWUFBTCxDQUFrQlgsT0FBbEIsQ0FBMEJKLE1BQTFCO0FBQ0FJLFVBQUFBLE9BQU8sQ0FBQ0csT0FBRCxDQUFQO0FBQ0gsU0FMRDtBQU1ILE9BZkQsQ0FnQkEsT0FBT00sRUFBUCxFQUFXO0FBQ1BSLFFBQUFBLE1BQU0sQ0FBQ1EsRUFBRCxDQUFOO0FBQ0g7QUFDSixLQTFCTSxDQUFQO0FBMkJIOztBQXRDK0Q7O0FBd0NwRXhCLE9BQU8sQ0FBQ0ssbUJBQVIsR0FBOEJBLG1CQUE5QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBuZXRfMSA9IHJlcXVpcmUoXCJuZXRcIik7XHJcbmNvbnN0IEJhc2VEZWJ1Z1NlcnZlcl8xID0gcmVxdWlyZShcIi4vQmFzZURlYnVnU2VydmVyXCIpO1xyXG5jbGFzcyBSZW1vdGVEZWJ1Z1NlcnZlclYyIGV4dGVuZHMgQmFzZURlYnVnU2VydmVyXzEuQmFzZURlYnVnU2VydmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGRlYnVnU2Vzc2lvbiwgYXJncykge1xyXG4gICAgICAgIHN1cGVyKGRlYnVnU2Vzc2lvbik7XHJcbiAgICAgICAgdGhpcy5hcmdzID0gYXJncztcclxuICAgIH1cclxuICAgIFN0b3AoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc29ja2V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBTdGFydCgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwb3J0ID0gdGhpcy5hcmdzLnBvcnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IHBvcnQgfTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmFyZ3MuaG9zdCA9PT0gJ3N0cmluZycgJiYgdGhpcy5hcmdzLmhvc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5ob3N0ID0gdGhpcy5hcmdzLmhvc3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGxldCBjb25uZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNvY2tldCA9IG5ldyBuZXRfMS5Tb2NrZXQoKTtcclxuICAgICAgICAgICAgICAgIHNvY2tldC5vbignZXJyb3InLCBleCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChleCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHNvY2tldC5jb25uZWN0KG9wdGlvbnMsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50U29ja2V0LnJlc29sdmUoc29ja2V0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5SZW1vdGVEZWJ1Z1NlcnZlclYyID0gUmVtb3RlRGVidWdTZXJ2ZXJWMjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVtb3RlRGVidWdTZXJ2ZXJ2Mi5qcy5tYXAiXX0=