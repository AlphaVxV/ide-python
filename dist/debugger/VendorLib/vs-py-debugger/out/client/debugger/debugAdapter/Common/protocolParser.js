"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-constant-condition no-typeof-undefined

const events_1 = require("events");

const inversify_1 = require("inversify");

const PROTOCOL_START_INDENTIFIER = '\r\n\r\n';
/**
 * Parsers the debugger Protocol messages and raises the following events:
 * 1. 'data', message (for all protocol messages)
 * 1. 'event_<event name>', message (for all protocol events)
 * 1. 'request_<command name>', message (for all protocol requests)
 * 1. 'response_<command name>', message (for all protocol responses)
 * 1. '<type>', message (for all protocol messages that are not events, requests nor responses)
 * @export
 * @class ProtocolParser
 * @extends {EventEmitter}
 * @implements {IProtocolParser}
 */

let ProtocolParser = class ProtocolParser extends events_1.EventEmitter {
  constructor() {
    super();
    this.rawData = new Buffer(0);
    this.contentLength = -1;
    this.disposed = false;

    this.dataCallbackHandler = data => {
      this.handleData(data);
    };
  }

  dispose() {
    if (this.stream) {
      this.stream.removeListener('data', this.dataCallbackHandler);
      this.stream = undefined;
    }
  }

  connect(stream) {
    this.stream = stream;
    stream.addListener('data', this.dataCallbackHandler);
  }

  dispatch(body) {
    const message = JSON.parse(body);

    switch (message.type) {
      case 'event':
        {
          const event = message;

          if (typeof event.event === 'string') {
            this.emit(`${message.type}_${event.event}`, event);
            break;
          }
        }

      case 'request':
        {
          const request = message;

          if (typeof request.command === 'string') {
            this.emit(`${message.type}_${request.command}`, request);
            break;
          }
        }

      case 'response':
        {
          const reponse = message;

          if (typeof reponse.command === 'string') {
            this.emit(`${message.type}_${reponse.command}`, reponse);
            break;
          }
        }

      default:
        {
          this.emit(`${message.type}`, message);
        }
    }

    this.emit('data', message);
  }

  handleData(data) {
    if (this.disposed) {
      return;
    }

    this.rawData = Buffer.concat([this.rawData, data]);

    while (true) {
      if (this.contentLength >= 0) {
        if (this.rawData.length >= this.contentLength) {
          const message = this.rawData.toString('utf8', 0, this.contentLength);
          this.rawData = this.rawData.slice(this.contentLength);
          this.contentLength = -1;

          if (message.length > 0) {
            this.dispatch(message);
          } // there may be more complete messages to process.


          continue;
        }
      } else {
        const idx = this.rawData.indexOf(PROTOCOL_START_INDENTIFIER);

        if (idx !== -1) {
          const header = this.rawData.toString('utf8', 0, idx);
          const lines = header.split('\r\n');

          for (const line of lines) {
            const pair = line.split(/: +/);

            if (pair[0] === 'Content-Length') {
              this.contentLength = +pair[1];
            }
          }

          this.rawData = this.rawData.slice(idx + PROTOCOL_START_INDENTIFIER.length);
          continue;
        }
      }

      break;
    }
  }

};
ProtocolParser = __decorate([inversify_1.injectable()], ProtocolParser);
exports.ProtocolParser = ProtocolParser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3RvY29sUGFyc2VyLmpzIl0sIm5hbWVzIjpbIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZCIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImkiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV2ZW50c18xIiwicmVxdWlyZSIsImludmVyc2lmeV8xIiwiUFJPVE9DT0xfU1RBUlRfSU5ERU5USUZJRVIiLCJQcm90b2NvbFBhcnNlciIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwicmF3RGF0YSIsIkJ1ZmZlciIsImNvbnRlbnRMZW5ndGgiLCJkaXNwb3NlZCIsImRhdGFDYWxsYmFja0hhbmRsZXIiLCJkYXRhIiwiaGFuZGxlRGF0YSIsImRpc3Bvc2UiLCJzdHJlYW0iLCJyZW1vdmVMaXN0ZW5lciIsInVuZGVmaW5lZCIsImNvbm5lY3QiLCJhZGRMaXN0ZW5lciIsImRpc3BhdGNoIiwiYm9keSIsIm1lc3NhZ2UiLCJKU09OIiwicGFyc2UiLCJ0eXBlIiwiZXZlbnQiLCJlbWl0IiwicmVxdWVzdCIsImNvbW1hbmQiLCJyZXBvbnNlIiwiY29uY2F0IiwidG9TdHJpbmciLCJzbGljZSIsImlkeCIsImluZGV4T2YiLCJoZWFkZXIiLCJsaW5lcyIsInNwbGl0IiwibGluZSIsInBhaXIiLCJpbmplY3RhYmxlIl0sIm1hcHBpbmdzIjoiQUFBQSxhLENBQ0E7QUFDQTs7QUFDQSxJQUFJQSxVQUFVLEdBQUksVUFBUSxTQUFLQSxVQUFkLElBQTZCLFVBQVVDLFVBQVYsRUFBc0JDLE1BQXRCLEVBQThCQyxHQUE5QixFQUFtQ0MsSUFBbkMsRUFBeUM7QUFDbkYsTUFBSUMsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQWxCO0FBQUEsTUFBMEJDLENBQUMsR0FBR0gsQ0FBQyxHQUFHLENBQUos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QXJGbUUsQ0FBeEU7QUF1RkFlLGNBQWMsR0FBR3RCLFVBQVUsQ0FBQyxDQUN4Qm9CLFdBQVcsQ0FBQ3VDLFVBQVosRUFEd0IsQ0FBRCxFQUV4QnJDLGNBRndCLENBQTNCO0FBR0FOLE9BQU8sQ0FBQ00sY0FBUixHQUF5QkEsY0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1jb25zdGFudC1jb25kaXRpb24gbm8tdHlwZW9mLXVuZGVmaW5lZFxyXG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XHJcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcclxuY29uc3QgUFJPVE9DT0xfU1RBUlRfSU5ERU5USUZJRVIgPSAnXFxyXFxuXFxyXFxuJztcclxuLyoqXHJcbiAqIFBhcnNlcnMgdGhlIGRlYnVnZ2VyIFByb3RvY29sIG1lc3NhZ2VzIGFuZCByYWlzZXMgdGhlIGZvbGxvd2luZyBldmVudHM6XHJcbiAqIDEuICdkYXRhJywgbWVzc2FnZSAoZm9yIGFsbCBwcm90b2NvbCBtZXNzYWdlcylcclxuICogMS4gJ2V2ZW50XzxldmVudCBuYW1lPicsIG1lc3NhZ2UgKGZvciBhbGwgcHJvdG9jb2wgZXZlbnRzKVxyXG4gKiAxLiAncmVxdWVzdF88Y29tbWFuZCBuYW1lPicsIG1lc3NhZ2UgKGZvciBhbGwgcHJvdG9jb2wgcmVxdWVzdHMpXHJcbiAqIDEuICdyZXNwb25zZV88Y29tbWFuZCBuYW1lPicsIG1lc3NhZ2UgKGZvciBhbGwgcHJvdG9jb2wgcmVzcG9uc2VzKVxyXG4gKiAxLiAnPHR5cGU+JywgbWVzc2FnZSAoZm9yIGFsbCBwcm90b2NvbCBtZXNzYWdlcyB0aGF0IGFyZSBub3QgZXZlbnRzLCByZXF1ZXN0cyBub3IgcmVzcG9uc2VzKVxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBQcm90b2NvbFBhcnNlclxyXG4gKiBAZXh0ZW5kcyB7RXZlbnRFbWl0dGVyfVxyXG4gKiBAaW1wbGVtZW50cyB7SVByb3RvY29sUGFyc2VyfVxyXG4gKi9cclxubGV0IFByb3RvY29sUGFyc2VyID0gY2xhc3MgUHJvdG9jb2xQYXJzZXIgZXh0ZW5kcyBldmVudHNfMS5FdmVudEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnJhd0RhdGEgPSBuZXcgQnVmZmVyKDApO1xyXG4gICAgICAgIHRoaXMuY29udGVudExlbmd0aCA9IC0xO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmRhdGFDYWxsYmFja0hhbmRsZXIgPSAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZURhdGEoZGF0YSk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RyZWFtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgdGhpcy5kYXRhQ2FsbGJhY2tIYW5kbGVyKTtcclxuICAgICAgICAgICAgdGhpcy5zdHJlYW0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29ubmVjdChzdHJlYW0pIHtcclxuICAgICAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcclxuICAgICAgICBzdHJlYW0uYWRkTGlzdGVuZXIoJ2RhdGEnLCB0aGlzLmRhdGFDYWxsYmFja0hhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZGlzcGF0Y2goYm9keSkge1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGJvZHkpO1xyXG4gICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2V2ZW50Jzoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBtZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudC5ldmVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoYCR7bWVzc2FnZS50eXBlfV8ke2V2ZW50LmV2ZW50fWAsIGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdyZXF1ZXN0Jzoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3QuY29tbWFuZCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoYCR7bWVzc2FnZS50eXBlfV8ke3JlcXVlc3QuY29tbWFuZH1gLCByZXF1ZXN0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdyZXNwb25zZSc6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlcG9uc2UgPSBtZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBvbnNlLmNvbW1hbmQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KGAke21lc3NhZ2UudHlwZX1fJHtyZXBvbnNlLmNvbW1hbmR9YCwgcmVwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KGAke21lc3NhZ2UudHlwZX1gLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmVtaXQoJ2RhdGEnLCBtZXNzYWdlKTtcclxuICAgIH1cclxuICAgIGhhbmRsZURhdGEoZGF0YSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRpc3Bvc2VkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yYXdEYXRhID0gQnVmZmVyLmNvbmNhdChbdGhpcy5yYXdEYXRhLCBkYXRhXSk7XHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGVudExlbmd0aCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yYXdEYXRhLmxlbmd0aCA+PSB0aGlzLmNvbnRlbnRMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5yYXdEYXRhLnRvU3RyaW5nKCd1dGY4JywgMCwgdGhpcy5jb250ZW50TGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhd0RhdGEgPSB0aGlzLnJhd0RhdGEuc2xpY2UodGhpcy5jb250ZW50TGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRMZW5ndGggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2gobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIG1heSBiZSBtb3JlIGNvbXBsZXRlIG1lc3NhZ2VzIHRvIHByb2Nlc3MuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZHggPSB0aGlzLnJhd0RhdGEuaW5kZXhPZihQUk9UT0NPTF9TVEFSVF9JTkRFTlRJRklFUik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHRoaXMucmF3RGF0YS50b1N0cmluZygndXRmOCcsIDAsIGlkeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSBoZWFkZXIuc3BsaXQoJ1xcclxcbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWlyID0gbGluZS5zcGxpdCgvOiArLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYWlyWzBdID09PSAnQ29udGVudC1MZW5ndGgnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRMZW5ndGggPSArcGFpclsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJhd0RhdGEgPSB0aGlzLnJhd0RhdGEuc2xpY2UoaWR4ICsgUFJPVE9DT0xfU1RBUlRfSU5ERU5USUZJRVIubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblByb3RvY29sUGFyc2VyID0gX19kZWNvcmF0ZShbXHJcbiAgICBpbnZlcnNpZnlfMS5pbmplY3RhYmxlKClcclxuXSwgUHJvdG9jb2xQYXJzZXIpO1xyXG5leHBvcnRzLlByb3RvY29sUGFyc2VyID0gUHJvdG9jb2xQYXJzZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3RvY29sUGFyc2VyLmpzLm1hcCJdfQ==