"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const path = require("path");

class WorkspacePythonPathUpdaterService {
  constructor(workspace, workspaceService) {
    this.workspace = workspace;
    this.workspaceService = workspaceService;
  }

  updatePythonPath(pythonPath) {
    return __awaiter(this, void 0, void 0, function* () {
      const pythonConfig = this.workspaceService.getConfiguration('python', this.workspace);
      const pythonPathValue = pythonConfig.inspect('pythonPath');

      if (pythonPathValue && pythonPathValue.workspaceValue === pythonPath) {
        return;
      }

      if (pythonPath.startsWith(this.workspace.fsPath)) {
        pythonPath = path.relative(this.workspace.fsPath, pythonPath);
      }

      yield pythonConfig.update('pythonPath', pythonPath, false);
    });
  }

}

exports.WorkspacePythonPathUpdaterService = WorkspacePythonPathUpdaterService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndvcmtzcGFjZVVwZGF0ZXJTZXJ2aWNlLmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJwYXRoIiwicmVxdWlyZSIsIldvcmtzcGFjZVB5dGhvblBhdGhVcGRhdGVyU2VydmljZSIsImNvbnN0cnVjdG9yIiwid29ya3NwYWNlIiwid29ya3NwYWNlU2VydmljZSIsInVwZGF0ZVB5dGhvblBhdGgiLCJweXRob25QYXRoIiwicHl0aG9uQ29uZmlnIiwiZ2V0Q29uZmlndXJhdGlvbiIsInB5dGhvblBhdGhWYWx1ZSIsImluc3BlY3QiLCJ3b3Jrc3BhY2VWYWx1ZSIsInN0YXJ0c1dpdGgiLCJmc1BhdGgiLCJyZWxhdGl2ZSIsInVwZGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFBeUI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDLE9BQUQsQ0FBVCxDQUFtQkssS0FBbkIsQ0FBRCxDQUFKO0FBQWtDLE9BQXhDLENBQXlDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZO0FBQUU7O0FBQzlGLGFBQVNGLElBQVQsQ0FBY0ksTUFBZCxFQUFzQjtBQUFFQSxNQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY1QsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBckIsR0FBc0MsSUFBSU4sQ0FBSixDQUFNLFVBQVVHLE9BQVYsRUFBbUI7QUFBRUEsUUFBQUEsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBUDtBQUF3QixPQUFuRCxFQUFxRE8sSUFBckQsQ0FBMERSLFNBQTFELEVBQXFFSyxRQUFyRSxDQUF0QztBQUF1SDs7QUFDL0lILElBQUFBLElBQUksQ0FBQyxDQUFDTixTQUFTLEdBQUdBLFNBQVMsQ0FBQ2EsS0FBVixDQUFnQmhCLE9BQWhCLEVBQXlCQyxVQUFVLElBQUksRUFBdkMsQ0FBYixFQUF5RFMsSUFBekQsRUFBRCxDQUFKO0FBQ0gsR0FMTSxDQUFQO0FBTUgsQ0FQRDs7QUFRQU8sTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFWCxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNWSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1DLGlDQUFOLENBQXdDO0FBQ3BDQyxFQUFBQSxXQUFXLENBQUNDLFNBQUQsRUFBWUMsZ0JBQVosRUFBOEI7QUFDckMsU0FBS0QsU0FBTCxHQUFpQkEsU0FBakI7QUFDQSxTQUFLQyxnQkFBTCxHQUF3QkEsZ0JBQXhCO0FBQ0g7O0FBQ0RDLEVBQUFBLGdCQUFnQixDQUFDQyxVQUFELEVBQWE7QUFDekIsV0FBTzVCLFNBQVMsQ0FBQyxJQUFELEVBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ2hELFlBQU02QixZQUFZLEdBQUcsS0FBS0gsZ0JBQUwsQ0FBc0JJLGdCQUF0QixDQUF1QyxRQUF2QyxFQUFpRCxLQUFLTCxTQUF0RCxDQUFyQjtBQUNBLFlBQU1NLGVBQWUsR0FBR0YsWUFBWSxDQUFDRyxPQUFiLENBQXFCLFlBQXJCLENBQXhCOztBQUNBLFVBQUlELGVBQWUsSUFBSUEsZUFBZSxDQUFDRSxjQUFoQixLQUFtQ0wsVUFBMUQsRUFBc0U7QUFDbEU7QUFDSDs7QUFDRCxVQUFJQSxVQUFVLENBQUNNLFVBQVgsQ0FBc0IsS0FBS1QsU0FBTCxDQUFlVSxNQUFyQyxDQUFKLEVBQWtEO0FBQzlDUCxRQUFBQSxVQUFVLEdBQUdQLElBQUksQ0FBQ2UsUUFBTCxDQUFjLEtBQUtYLFNBQUwsQ0FBZVUsTUFBN0IsRUFBcUNQLFVBQXJDLENBQWI7QUFDSDs7QUFDRCxZQUFNQyxZQUFZLENBQUNRLE1BQWIsQ0FBb0IsWUFBcEIsRUFBa0NULFVBQWxDLEVBQThDLEtBQTlDLENBQU47QUFDSCxLQVZlLENBQWhCO0FBV0g7O0FBakJtQzs7QUFtQnhDUixPQUFPLENBQUNHLGlDQUFSLEdBQTRDQSxpQ0FBNUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNsYXNzIFdvcmtzcGFjZVB5dGhvblBhdGhVcGRhdGVyU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih3b3Jrc3BhY2UsIHdvcmtzcGFjZVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLndvcmtzcGFjZSA9IHdvcmtzcGFjZTtcclxuICAgICAgICB0aGlzLndvcmtzcGFjZVNlcnZpY2UgPSB3b3Jrc3BhY2VTZXJ2aWNlO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlUHl0aG9uUGF0aChweXRob25QYXRoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgcHl0aG9uQ29uZmlnID0gdGhpcy53b3Jrc3BhY2VTZXJ2aWNlLmdldENvbmZpZ3VyYXRpb24oJ3B5dGhvbicsIHRoaXMud29ya3NwYWNlKTtcclxuICAgICAgICAgICAgY29uc3QgcHl0aG9uUGF0aFZhbHVlID0gcHl0aG9uQ29uZmlnLmluc3BlY3QoJ3B5dGhvblBhdGgnKTtcclxuICAgICAgICAgICAgaWYgKHB5dGhvblBhdGhWYWx1ZSAmJiBweXRob25QYXRoVmFsdWUud29ya3NwYWNlVmFsdWUgPT09IHB5dGhvblBhdGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocHl0aG9uUGF0aC5zdGFydHNXaXRoKHRoaXMud29ya3NwYWNlLmZzUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHB5dGhvblBhdGggPSBwYXRoLnJlbGF0aXZlKHRoaXMud29ya3NwYWNlLmZzUGF0aCwgcHl0aG9uUGF0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgeWllbGQgcHl0aG9uQ29uZmlnLnVwZGF0ZSgncHl0aG9uUGF0aCcsIHB5dGhvblBhdGgsIGZhbHNlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLldvcmtzcGFjZVB5dGhvblBhdGhVcGRhdGVyU2VydmljZSA9IFdvcmtzcGFjZVB5dGhvblBhdGhVcGRhdGVyU2VydmljZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29ya3NwYWNlVXBkYXRlclNlcnZpY2UuanMubWFwIl19