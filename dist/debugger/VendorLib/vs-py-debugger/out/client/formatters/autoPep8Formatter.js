"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const productInstaller_1 = require("../common/installer/productInstaller");

const types_1 = require("../common/types");

const stopWatch_1 = require("../common/utils/stopWatch");

const telemetry_1 = require("../telemetry");

const constants_1 = require("../telemetry/constants");

const baseFormatter_1 = require("./baseFormatter");

class AutoPep8Formatter extends baseFormatter_1.BaseFormatter {
  constructor(serviceContainer) {
    super('autopep8', productInstaller_1.Product.autopep8, serviceContainer);
  }

  formatDocument(document, options, token, range) {
    const stopWatch = new stopWatch_1.StopWatch();
    const settings = this.serviceContainer.get(types_1.IConfigurationService).getSettings(document.uri);
    const hasCustomArgs = Array.isArray(settings.formatting.autopep8Args) && settings.formatting.autopep8Args.length > 0;
    const formatSelection = range ? !range.isEmpty : false;
    const autoPep8Args = ['--diff'];

    if (formatSelection) {
      // tslint:disable-next-line:no-non-null-assertion
      autoPep8Args.push(...['--line-range', (range.start.line + 1).toString(), (range.end.line + 1).toString()]);
    }

    const promise = super.provideDocumentFormattingEdits(document, options, token, autoPep8Args);
    telemetry_1.sendTelemetryWhenDone(constants_1.FORMAT, promise, stopWatch, {
      tool: 'autopep8',
      hasCustomArgs,
      formatSelection
    });
    return promise;
  }

}

exports.AutoPep8Formatter = AutoPep8Formatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dG9QZXA4Rm9ybWF0dGVyLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicHJvZHVjdEluc3RhbGxlcl8xIiwicmVxdWlyZSIsInR5cGVzXzEiLCJzdG9wV2F0Y2hfMSIsInRlbGVtZXRyeV8xIiwiY29uc3RhbnRzXzEiLCJiYXNlRm9ybWF0dGVyXzEiLCJBdXRvUGVwOEZvcm1hdHRlciIsIkJhc2VGb3JtYXR0ZXIiLCJjb25zdHJ1Y3RvciIsInNlcnZpY2VDb250YWluZXIiLCJQcm9kdWN0IiwiYXV0b3BlcDgiLCJmb3JtYXREb2N1bWVudCIsImRvY3VtZW50Iiwib3B0aW9ucyIsInRva2VuIiwicmFuZ2UiLCJzdG9wV2F0Y2giLCJTdG9wV2F0Y2giLCJzZXR0aW5ncyIsImdldCIsIklDb25maWd1cmF0aW9uU2VydmljZSIsImdldFNldHRpbmdzIiwidXJpIiwiaGFzQ3VzdG9tQXJncyIsIkFycmF5IiwiaXNBcnJheSIsImZvcm1hdHRpbmciLCJhdXRvcGVwOEFyZ3MiLCJsZW5ndGgiLCJmb3JtYXRTZWxlY3Rpb24iLCJpc0VtcHR5IiwiYXV0b1BlcDhBcmdzIiwicHVzaCIsInN0YXJ0IiwibGluZSIsInRvU3RyaW5nIiwiZW5kIiwicHJvbWlzZSIsInByb3ZpZGVEb2N1bWVudEZvcm1hdHRpbmdFZGl0cyIsInNlbmRUZWxlbWV0cnlXaGVuRG9uZSIsIkZPUk1BVCIsInRvb2wiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLGtCQUFrQixHQUFHQyxPQUFPLENBQUMsc0NBQUQsQ0FBbEM7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUUsV0FBVyxHQUFHRixPQUFPLENBQUMsMkJBQUQsQ0FBM0I7O0FBQ0EsTUFBTUcsV0FBVyxHQUFHSCxPQUFPLENBQUMsY0FBRCxDQUEzQjs7QUFDQSxNQUFNSSxXQUFXLEdBQUdKLE9BQU8sQ0FBQyx3QkFBRCxDQUEzQjs7QUFDQSxNQUFNSyxlQUFlLEdBQUdMLE9BQU8sQ0FBQyxpQkFBRCxDQUEvQjs7QUFDQSxNQUFNTSxpQkFBTixTQUFnQ0QsZUFBZSxDQUFDRSxhQUFoRCxDQUE4RDtBQUMxREMsRUFBQUEsV0FBVyxDQUFDQyxnQkFBRCxFQUFtQjtBQUMxQixVQUFNLFVBQU4sRUFBa0JWLGtCQUFrQixDQUFDVyxPQUFuQixDQUEyQkMsUUFBN0MsRUFBdURGLGdCQUF2RDtBQUNIOztBQUNERyxFQUFBQSxjQUFjLENBQUNDLFFBQUQsRUFBV0MsT0FBWCxFQUFvQkMsS0FBcEIsRUFBMkJDLEtBQTNCLEVBQWtDO0FBQzVDLFVBQU1DLFNBQVMsR0FBRyxJQUFJZixXQUFXLENBQUNnQixTQUFoQixFQUFsQjtBQUNBLFVBQU1DLFFBQVEsR0FBRyxLQUFLVixnQkFBTCxDQUFzQlcsR0FBdEIsQ0FBMEJuQixPQUFPLENBQUNvQixxQkFBbEMsRUFBeURDLFdBQXpELENBQXFFVCxRQUFRLENBQUNVLEdBQTlFLENBQWpCO0FBQ0EsVUFBTUMsYUFBYSxHQUFHQyxLQUFLLENBQUNDLE9BQU4sQ0FBY1AsUUFBUSxDQUFDUSxVQUFULENBQW9CQyxZQUFsQyxLQUFtRFQsUUFBUSxDQUFDUSxVQUFULENBQW9CQyxZQUFwQixDQUFpQ0MsTUFBakMsR0FBMEMsQ0FBbkg7QUFDQSxVQUFNQyxlQUFlLEdBQUdkLEtBQUssR0FBRyxDQUFDQSxLQUFLLENBQUNlLE9BQVYsR0FBb0IsS0FBakQ7QUFDQSxVQUFNQyxZQUFZLEdBQUcsQ0FBQyxRQUFELENBQXJCOztBQUNBLFFBQUlGLGVBQUosRUFBcUI7QUFDakI7QUFDQUUsTUFBQUEsWUFBWSxDQUFDQyxJQUFiLENBQWtCLEdBQUcsQ0FBQyxjQUFELEVBQWlCLENBQUNqQixLQUFLLENBQUNrQixLQUFOLENBQVlDLElBQVosR0FBbUIsQ0FBcEIsRUFBdUJDLFFBQXZCLEVBQWpCLEVBQW9ELENBQUNwQixLQUFLLENBQUNxQixHQUFOLENBQVVGLElBQVYsR0FBaUIsQ0FBbEIsRUFBcUJDLFFBQXJCLEVBQXBELENBQXJCO0FBQ0g7O0FBQ0QsVUFBTUUsT0FBTyxHQUFHLE1BQU1DLDhCQUFOLENBQXFDMUIsUUFBckMsRUFBK0NDLE9BQS9DLEVBQXdEQyxLQUF4RCxFQUErRGlCLFlBQS9ELENBQWhCO0FBQ0E3QixJQUFBQSxXQUFXLENBQUNxQyxxQkFBWixDQUFrQ3BDLFdBQVcsQ0FBQ3FDLE1BQTlDLEVBQXNESCxPQUF0RCxFQUErRHJCLFNBQS9ELEVBQTBFO0FBQUV5QixNQUFBQSxJQUFJLEVBQUUsVUFBUjtBQUFvQmxCLE1BQUFBLGFBQXBCO0FBQW1DTSxNQUFBQTtBQUFuQyxLQUExRTtBQUNBLFdBQU9RLE9BQVA7QUFDSDs7QUFqQnlEOztBQW1COUR6QyxPQUFPLENBQUNTLGlCQUFSLEdBQTRCQSxpQkFBNUIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBwcm9kdWN0SW5zdGFsbGVyXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2luc3RhbGxlci9wcm9kdWN0SW5zdGFsbGVyXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi90eXBlc1wiKTtcclxuY29uc3Qgc3RvcFdhdGNoXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL3V0aWxzL3N0b3BXYXRjaFwiKTtcclxuY29uc3QgdGVsZW1ldHJ5XzEgPSByZXF1aXJlKFwiLi4vdGVsZW1ldHJ5XCIpO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi90ZWxlbWV0cnkvY29uc3RhbnRzXCIpO1xyXG5jb25zdCBiYXNlRm9ybWF0dGVyXzEgPSByZXF1aXJlKFwiLi9iYXNlRm9ybWF0dGVyXCIpO1xyXG5jbGFzcyBBdXRvUGVwOEZvcm1hdHRlciBleHRlbmRzIGJhc2VGb3JtYXR0ZXJfMS5CYXNlRm9ybWF0dGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VDb250YWluZXIpIHtcclxuICAgICAgICBzdXBlcignYXV0b3BlcDgnLCBwcm9kdWN0SW5zdGFsbGVyXzEuUHJvZHVjdC5hdXRvcGVwOCwgc2VydmljZUNvbnRhaW5lcik7XHJcbiAgICB9XHJcbiAgICBmb3JtYXREb2N1bWVudChkb2N1bWVudCwgb3B0aW9ucywgdG9rZW4sIHJhbmdlKSB7XHJcbiAgICAgICAgY29uc3Qgc3RvcFdhdGNoID0gbmV3IHN0b3BXYXRjaF8xLlN0b3BXYXRjaCgpO1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0gdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18xLklDb25maWd1cmF0aW9uU2VydmljZSkuZ2V0U2V0dGluZ3MoZG9jdW1lbnQudXJpKTtcclxuICAgICAgICBjb25zdCBoYXNDdXN0b21BcmdzID0gQXJyYXkuaXNBcnJheShzZXR0aW5ncy5mb3JtYXR0aW5nLmF1dG9wZXA4QXJncykgJiYgc2V0dGluZ3MuZm9ybWF0dGluZy5hdXRvcGVwOEFyZ3MubGVuZ3RoID4gMDtcclxuICAgICAgICBjb25zdCBmb3JtYXRTZWxlY3Rpb24gPSByYW5nZSA/ICFyYW5nZS5pc0VtcHR5IDogZmFsc2U7XHJcbiAgICAgICAgY29uc3QgYXV0b1BlcDhBcmdzID0gWyctLWRpZmYnXTtcclxuICAgICAgICBpZiAoZm9ybWF0U2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1ub24tbnVsbC1hc3NlcnRpb25cclxuICAgICAgICAgICAgYXV0b1BlcDhBcmdzLnB1c2goLi4uWyctLWxpbmUtcmFuZ2UnLCAocmFuZ2Uuc3RhcnQubGluZSArIDEpLnRvU3RyaW5nKCksIChyYW5nZS5lbmQubGluZSArIDEpLnRvU3RyaW5nKCldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHN1cGVyLnByb3ZpZGVEb2N1bWVudEZvcm1hdHRpbmdFZGl0cyhkb2N1bWVudCwgb3B0aW9ucywgdG9rZW4sIGF1dG9QZXA4QXJncyk7XHJcbiAgICAgICAgdGVsZW1ldHJ5XzEuc2VuZFRlbGVtZXRyeVdoZW5Eb25lKGNvbnN0YW50c18xLkZPUk1BVCwgcHJvbWlzZSwgc3RvcFdhdGNoLCB7IHRvb2w6ICdhdXRvcGVwOCcsIGhhc0N1c3RvbUFyZ3MsIGZvcm1hdFNlbGVjdGlvbiB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkF1dG9QZXA4Rm9ybWF0dGVyID0gQXV0b1BlcDhGb3JtYXR0ZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dG9QZXA4Rm9ybWF0dGVyLmpzLm1hcCJdfQ==