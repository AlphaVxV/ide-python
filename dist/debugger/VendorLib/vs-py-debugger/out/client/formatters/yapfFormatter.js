"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("../common/types");

const stopWatch_1 = require("../common/utils/stopWatch");

const telemetry_1 = require("../telemetry");

const constants_1 = require("../telemetry/constants");

const baseFormatter_1 = require("./baseFormatter");

class YapfFormatter extends baseFormatter_1.BaseFormatter {
  constructor(serviceContainer) {
    super('yapf', types_1.Product.yapf, serviceContainer);
  }

  formatDocument(document, options, token, range) {
    const stopWatch = new stopWatch_1.StopWatch();
    const settings = this.serviceContainer.get(types_1.IConfigurationService).getSettings(document.uri);
    const hasCustomArgs = Array.isArray(settings.formatting.yapfArgs) && settings.formatting.yapfArgs.length > 0;
    const formatSelection = range ? !range.isEmpty : false;
    const yapfArgs = ['--diff'];

    if (formatSelection) {
      // tslint:disable-next-line:no-non-null-assertion
      yapfArgs.push(...['--lines', `${range.start.line + 1}-${range.end.line + 1}`]);
    } // Yapf starts looking for config file starting from the file path.


    const fallbarFolder = this.getWorkspaceUri(document).fsPath;
    const cwd = this.getDocumentPath(document, fallbarFolder);
    const promise = super.provideDocumentFormattingEdits(document, options, token, yapfArgs, cwd);
    telemetry_1.sendTelemetryWhenDone(constants_1.FORMAT, promise, stopWatch, {
      tool: 'yapf',
      hasCustomArgs,
      formatSelection
    });
    return promise;
  }

}

exports.YapfFormatter = YapfFormatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInlhcGZGb3JtYXR0ZXIuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0eXBlc18xIiwicmVxdWlyZSIsInN0b3BXYXRjaF8xIiwidGVsZW1ldHJ5XzEiLCJjb25zdGFudHNfMSIsImJhc2VGb3JtYXR0ZXJfMSIsIllhcGZGb3JtYXR0ZXIiLCJCYXNlRm9ybWF0dGVyIiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlQ29udGFpbmVyIiwiUHJvZHVjdCIsInlhcGYiLCJmb3JtYXREb2N1bWVudCIsImRvY3VtZW50Iiwib3B0aW9ucyIsInRva2VuIiwicmFuZ2UiLCJzdG9wV2F0Y2giLCJTdG9wV2F0Y2giLCJzZXR0aW5ncyIsImdldCIsIklDb25maWd1cmF0aW9uU2VydmljZSIsImdldFNldHRpbmdzIiwidXJpIiwiaGFzQ3VzdG9tQXJncyIsIkFycmF5IiwiaXNBcnJheSIsImZvcm1hdHRpbmciLCJ5YXBmQXJncyIsImxlbmd0aCIsImZvcm1hdFNlbGVjdGlvbiIsImlzRW1wdHkiLCJwdXNoIiwic3RhcnQiLCJsaW5lIiwiZW5kIiwiZmFsbGJhckZvbGRlciIsImdldFdvcmtzcGFjZVVyaSIsImZzUGF0aCIsImN3ZCIsImdldERvY3VtZW50UGF0aCIsInByb21pc2UiLCJwcm92aWRlRG9jdW1lbnRGb3JtYXR0aW5nRWRpdHMiLCJzZW5kVGVsZW1ldHJ5V2hlbkRvbmUiLCJGT1JNQVQiLCJ0b29sIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQywyQkFBRCxDQUEzQjs7QUFDQSxNQUFNRSxXQUFXLEdBQUdGLE9BQU8sQ0FBQyxjQUFELENBQTNCOztBQUNBLE1BQU1HLFdBQVcsR0FBR0gsT0FBTyxDQUFDLHdCQUFELENBQTNCOztBQUNBLE1BQU1JLGVBQWUsR0FBR0osT0FBTyxDQUFDLGlCQUFELENBQS9COztBQUNBLE1BQU1LLGFBQU4sU0FBNEJELGVBQWUsQ0FBQ0UsYUFBNUMsQ0FBMEQ7QUFDdERDLEVBQUFBLFdBQVcsQ0FBQ0MsZ0JBQUQsRUFBbUI7QUFDMUIsVUFBTSxNQUFOLEVBQWNULE9BQU8sQ0FBQ1UsT0FBUixDQUFnQkMsSUFBOUIsRUFBb0NGLGdCQUFwQztBQUNIOztBQUNERyxFQUFBQSxjQUFjLENBQUNDLFFBQUQsRUFBV0MsT0FBWCxFQUFvQkMsS0FBcEIsRUFBMkJDLEtBQTNCLEVBQWtDO0FBQzVDLFVBQU1DLFNBQVMsR0FBRyxJQUFJZixXQUFXLENBQUNnQixTQUFoQixFQUFsQjtBQUNBLFVBQU1DLFFBQVEsR0FBRyxLQUFLVixnQkFBTCxDQUFzQlcsR0FBdEIsQ0FBMEJwQixPQUFPLENBQUNxQixxQkFBbEMsRUFBeURDLFdBQXpELENBQXFFVCxRQUFRLENBQUNVLEdBQTlFLENBQWpCO0FBQ0EsVUFBTUMsYUFBYSxHQUFHQyxLQUFLLENBQUNDLE9BQU4sQ0FBY1AsUUFBUSxDQUFDUSxVQUFULENBQW9CQyxRQUFsQyxLQUErQ1QsUUFBUSxDQUFDUSxVQUFULENBQW9CQyxRQUFwQixDQUE2QkMsTUFBN0IsR0FBc0MsQ0FBM0c7QUFDQSxVQUFNQyxlQUFlLEdBQUdkLEtBQUssR0FBRyxDQUFDQSxLQUFLLENBQUNlLE9BQVYsR0FBb0IsS0FBakQ7QUFDQSxVQUFNSCxRQUFRLEdBQUcsQ0FBQyxRQUFELENBQWpCOztBQUNBLFFBQUlFLGVBQUosRUFBcUI7QUFDakI7QUFDQUYsTUFBQUEsUUFBUSxDQUFDSSxJQUFULENBQWMsR0FBRyxDQUFDLFNBQUQsRUFBYSxHQUFFaEIsS0FBSyxDQUFDaUIsS0FBTixDQUFZQyxJQUFaLEdBQW1CLENBQUUsSUFBR2xCLEtBQUssQ0FBQ21CLEdBQU4sQ0FBVUQsSUFBVixHQUFpQixDQUFFLEVBQTFELENBQWpCO0FBQ0gsS0FUMkMsQ0FVNUM7OztBQUNBLFVBQU1FLGFBQWEsR0FBRyxLQUFLQyxlQUFMLENBQXFCeEIsUUFBckIsRUFBK0J5QixNQUFyRDtBQUNBLFVBQU1DLEdBQUcsR0FBRyxLQUFLQyxlQUFMLENBQXFCM0IsUUFBckIsRUFBK0J1QixhQUEvQixDQUFaO0FBQ0EsVUFBTUssT0FBTyxHQUFHLE1BQU1DLDhCQUFOLENBQXFDN0IsUUFBckMsRUFBK0NDLE9BQS9DLEVBQXdEQyxLQUF4RCxFQUErRGEsUUFBL0QsRUFBeUVXLEdBQXpFLENBQWhCO0FBQ0FwQyxJQUFBQSxXQUFXLENBQUN3QyxxQkFBWixDQUFrQ3ZDLFdBQVcsQ0FBQ3dDLE1BQTlDLEVBQXNESCxPQUF0RCxFQUErRHhCLFNBQS9ELEVBQTBFO0FBQUU0QixNQUFBQSxJQUFJLEVBQUUsTUFBUjtBQUFnQnJCLE1BQUFBLGFBQWhCO0FBQStCTSxNQUFBQTtBQUEvQixLQUExRTtBQUNBLFdBQU9XLE9BQVA7QUFDSDs7QUFwQnFEOztBQXNCMUQzQyxPQUFPLENBQUNRLGFBQVIsR0FBd0JBLGFBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vdHlwZXNcIik7XHJcbmNvbnN0IHN0b3BXYXRjaF8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi91dGlscy9zdG9wV2F0Y2hcIik7XHJcbmNvbnN0IHRlbGVtZXRyeV8xID0gcmVxdWlyZShcIi4uL3RlbGVtZXRyeVwiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vdGVsZW1ldHJ5L2NvbnN0YW50c1wiKTtcclxuY29uc3QgYmFzZUZvcm1hdHRlcl8xID0gcmVxdWlyZShcIi4vYmFzZUZvcm1hdHRlclwiKTtcclxuY2xhc3MgWWFwZkZvcm1hdHRlciBleHRlbmRzIGJhc2VGb3JtYXR0ZXJfMS5CYXNlRm9ybWF0dGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VDb250YWluZXIpIHtcclxuICAgICAgICBzdXBlcigneWFwZicsIHR5cGVzXzEuUHJvZHVjdC55YXBmLCBzZXJ2aWNlQ29udGFpbmVyKTtcclxuICAgIH1cclxuICAgIGZvcm1hdERvY3VtZW50KGRvY3VtZW50LCBvcHRpb25zLCB0b2tlbiwgcmFuZ2UpIHtcclxuICAgICAgICBjb25zdCBzdG9wV2F0Y2ggPSBuZXcgc3RvcFdhdGNoXzEuU3RvcFdhdGNoKCk7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzEuSUNvbmZpZ3VyYXRpb25TZXJ2aWNlKS5nZXRTZXR0aW5ncyhkb2N1bWVudC51cmkpO1xyXG4gICAgICAgIGNvbnN0IGhhc0N1c3RvbUFyZ3MgPSBBcnJheS5pc0FycmF5KHNldHRpbmdzLmZvcm1hdHRpbmcueWFwZkFyZ3MpICYmIHNldHRpbmdzLmZvcm1hdHRpbmcueWFwZkFyZ3MubGVuZ3RoID4gMDtcclxuICAgICAgICBjb25zdCBmb3JtYXRTZWxlY3Rpb24gPSByYW5nZSA/ICFyYW5nZS5pc0VtcHR5IDogZmFsc2U7XHJcbiAgICAgICAgY29uc3QgeWFwZkFyZ3MgPSBbJy0tZGlmZiddO1xyXG4gICAgICAgIGlmIChmb3JtYXRTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW5vbi1udWxsLWFzc2VydGlvblxyXG4gICAgICAgICAgICB5YXBmQXJncy5wdXNoKC4uLlsnLS1saW5lcycsIGAke3JhbmdlLnN0YXJ0LmxpbmUgKyAxfS0ke3JhbmdlLmVuZC5saW5lICsgMX1gXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFlhcGYgc3RhcnRzIGxvb2tpbmcgZm9yIGNvbmZpZyBmaWxlIHN0YXJ0aW5nIGZyb20gdGhlIGZpbGUgcGF0aC5cclxuICAgICAgICBjb25zdCBmYWxsYmFyRm9sZGVyID0gdGhpcy5nZXRXb3Jrc3BhY2VVcmkoZG9jdW1lbnQpLmZzUGF0aDtcclxuICAgICAgICBjb25zdCBjd2QgPSB0aGlzLmdldERvY3VtZW50UGF0aChkb2N1bWVudCwgZmFsbGJhckZvbGRlcik7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IHN1cGVyLnByb3ZpZGVEb2N1bWVudEZvcm1hdHRpbmdFZGl0cyhkb2N1bWVudCwgb3B0aW9ucywgdG9rZW4sIHlhcGZBcmdzLCBjd2QpO1xyXG4gICAgICAgIHRlbGVtZXRyeV8xLnNlbmRUZWxlbWV0cnlXaGVuRG9uZShjb25zdGFudHNfMS5GT1JNQVQsIHByb21pc2UsIHN0b3BXYXRjaCwgeyB0b29sOiAneWFwZicsIGhhc0N1c3RvbUFyZ3MsIGZvcm1hdFNlbGVjdGlvbiB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLllhcGZGb3JtYXR0ZXIgPSBZYXBmRm9ybWF0dGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD15YXBmRm9ybWF0dGVyLmpzLm1hcCJdfQ==