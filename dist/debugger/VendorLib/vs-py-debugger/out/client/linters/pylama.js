"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("../common/extensions");

const types_1 = require("../common/types");

const baseLinter_1 = require("./baseLinter");

const types_2 = require("./types");

const REGEX = '(?<file>.py):(?<line>\\d+):(?<column>\\d+): \\[(?<type>\\w+)\\] (?<code>\\w\\d+):? (?<message>.*)\\r?(\\n|$)';
const COLUMN_OFF_SET = 1;

class PyLama extends baseLinter_1.BaseLinter {
  constructor(outputChannel, serviceContainer) {
    super(types_1.Product.pylama, outputChannel, serviceContainer, COLUMN_OFF_SET);
  }

  runLinter(document, cancellation) {
    return __awaiter(this, void 0, void 0, function* () {
      const messages = yield this.run(['--format=parsable', document.uri.fsPath], document, cancellation, REGEX); // All messages in pylama are treated as warnings for now.

      messages.forEach(msg => {
        msg.severity = types_2.LintMessageSeverity.Warning;
      });
      return messages;
    });
  }

}

exports.PyLama = PyLama;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB5bGFtYS5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwicmVxdWlyZSIsInR5cGVzXzEiLCJiYXNlTGludGVyXzEiLCJ0eXBlc18yIiwiUkVHRVgiLCJDT0xVTU5fT0ZGX1NFVCIsIlB5TGFtYSIsIkJhc2VMaW50ZXIiLCJjb25zdHJ1Y3RvciIsIm91dHB1dENoYW5uZWwiLCJzZXJ2aWNlQ29udGFpbmVyIiwiUHJvZHVjdCIsInB5bGFtYSIsInJ1bkxpbnRlciIsImRvY3VtZW50IiwiY2FuY2VsbGF0aW9uIiwibWVzc2FnZXMiLCJydW4iLCJ1cmkiLCJmc1BhdGgiLCJmb3JFYWNoIiwibXNnIiwic2V2ZXJpdHkiLCJMaW50TWVzc2FnZVNldmVyaXR5IiwiV2FybmluZyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFBeUI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDLE9BQUQsQ0FBVCxDQUFtQkssS0FBbkIsQ0FBRCxDQUFKO0FBQWtDLE9BQXhDLENBQXlDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZO0FBQUU7O0FBQzlGLGFBQVNGLElBQVQsQ0FBY0ksTUFBZCxFQUFzQjtBQUFFQSxNQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY1QsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBckIsR0FBc0MsSUFBSU4sQ0FBSixDQUFNLFVBQVVHLE9BQVYsRUFBbUI7QUFBRUEsUUFBQUEsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBUDtBQUF3QixPQUFuRCxFQUFxRE8sSUFBckQsQ0FBMERSLFNBQTFELEVBQXFFSyxRQUFyRSxDQUF0QztBQUF1SDs7QUFDL0lILElBQUFBLElBQUksQ0FBQyxDQUFDTixTQUFTLEdBQUdBLFNBQVMsQ0FBQ2EsS0FBVixDQUFnQmhCLE9BQWhCLEVBQXlCQyxVQUFVLElBQUksRUFBdkMsQ0FBYixFQUF5RFMsSUFBekQsRUFBRCxDQUFKO0FBQ0gsR0FMTSxDQUFQO0FBTUgsQ0FQRDs7QUFRQU8sTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFWCxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQVksT0FBTyxDQUFDLHNCQUFELENBQVA7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHRixPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxNQUFNRyxPQUFPLEdBQUdILE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUNBLE1BQU1JLEtBQUssR0FBRyw4R0FBZDtBQUNBLE1BQU1DLGNBQWMsR0FBRyxDQUF2Qjs7QUFDQSxNQUFNQyxNQUFOLFNBQXFCSixZQUFZLENBQUNLLFVBQWxDLENBQTZDO0FBQ3pDQyxFQUFBQSxXQUFXLENBQUNDLGFBQUQsRUFBZ0JDLGdCQUFoQixFQUFrQztBQUN6QyxVQUFNVCxPQUFPLENBQUNVLE9BQVIsQ0FBZ0JDLE1BQXRCLEVBQThCSCxhQUE5QixFQUE2Q0MsZ0JBQTdDLEVBQStETCxjQUEvRDtBQUNIOztBQUNEUSxFQUFBQSxTQUFTLENBQUNDLFFBQUQsRUFBV0MsWUFBWCxFQUF5QjtBQUM5QixXQUFPcEMsU0FBUyxDQUFDLElBQUQsRUFBTyxLQUFLLENBQVosRUFBZSxLQUFLLENBQXBCLEVBQXVCLGFBQWE7QUFDaEQsWUFBTXFDLFFBQVEsR0FBRyxNQUFNLEtBQUtDLEdBQUwsQ0FBUyxDQUFDLG1CQUFELEVBQXNCSCxRQUFRLENBQUNJLEdBQVQsQ0FBYUMsTUFBbkMsQ0FBVCxFQUFxREwsUUFBckQsRUFBK0RDLFlBQS9ELEVBQTZFWCxLQUE3RSxDQUF2QixDQURnRCxDQUVoRDs7QUFDQVksTUFBQUEsUUFBUSxDQUFDSSxPQUFULENBQWlCQyxHQUFHLElBQUk7QUFDcEJBLFFBQUFBLEdBQUcsQ0FBQ0MsUUFBSixHQUFlbkIsT0FBTyxDQUFDb0IsbUJBQVIsQ0FBNEJDLE9BQTNDO0FBQ0gsT0FGRDtBQUdBLGFBQU9SLFFBQVA7QUFDSCxLQVBlLENBQWhCO0FBUUg7O0FBYndDOztBQWU3Q2pCLE9BQU8sQ0FBQ08sTUFBUixHQUFpQkEsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5yZXF1aXJlKFwiLi4vY29tbW9uL2V4dGVuc2lvbnNcIik7XHJcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL3R5cGVzXCIpO1xyXG5jb25zdCBiYXNlTGludGVyXzEgPSByZXF1aXJlKFwiLi9iYXNlTGludGVyXCIpO1xyXG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XHJcbmNvbnN0IFJFR0VYID0gJyg/PGZpbGU+LnB5KTooPzxsaW5lPlxcXFxkKyk6KD88Y29sdW1uPlxcXFxkKyk6IFxcXFxbKD88dHlwZT5cXFxcdyspXFxcXF0gKD88Y29kZT5cXFxcd1xcXFxkKyk6PyAoPzxtZXNzYWdlPi4qKVxcXFxyPyhcXFxcbnwkKSc7XHJcbmNvbnN0IENPTFVNTl9PRkZfU0VUID0gMTtcclxuY2xhc3MgUHlMYW1hIGV4dGVuZHMgYmFzZUxpbnRlcl8xLkJhc2VMaW50ZXIge1xyXG4gICAgY29uc3RydWN0b3Iob3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcikge1xyXG4gICAgICAgIHN1cGVyKHR5cGVzXzEuUHJvZHVjdC5weWxhbWEsIG91dHB1dENoYW5uZWwsIHNlcnZpY2VDb250YWluZXIsIENPTFVNTl9PRkZfU0VUKTtcclxuICAgIH1cclxuICAgIHJ1bkxpbnRlcihkb2N1bWVudCwgY2FuY2VsbGF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB5aWVsZCB0aGlzLnJ1bihbJy0tZm9ybWF0PXBhcnNhYmxlJywgZG9jdW1lbnQudXJpLmZzUGF0aF0sIGRvY3VtZW50LCBjYW5jZWxsYXRpb24sIFJFR0VYKTtcclxuICAgICAgICAgICAgLy8gQWxsIG1lc3NhZ2VzIGluIHB5bGFtYSBhcmUgdHJlYXRlZCBhcyB3YXJuaW5ncyBmb3Igbm93LlxyXG4gICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XHJcbiAgICAgICAgICAgICAgICBtc2cuc2V2ZXJpdHkgPSB0eXBlc18yLkxpbnRNZXNzYWdlU2V2ZXJpdHkuV2FybmluZztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlcztcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlB5TGFtYSA9IFB5TGFtYTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHlsYW1hLmpzLm1hcCJdfQ==