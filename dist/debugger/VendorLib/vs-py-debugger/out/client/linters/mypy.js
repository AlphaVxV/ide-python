"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("../common/extensions");

const types_1 = require("../common/types");

const baseLinter_1 = require("./baseLinter");

exports.REGEX = '(?<file>.+):(?<line>\\d+): (?<type>\\w+): (?<message>.*)\\r?(\\n|$)';

class MyPy extends baseLinter_1.BaseLinter {
  constructor(outputChannel, serviceContainer) {
    super(types_1.Product.mypy, outputChannel, serviceContainer);
  }

  runLinter(document, cancellation) {
    return __awaiter(this, void 0, void 0, function* () {
      const messages = yield this.run([document.uri.fsPath], document, cancellation, exports.REGEX);
      messages.forEach(msg => {
        msg.severity = this.parseMessagesSeverity(msg.type, this.pythonSettings.linting.mypyCategorySeverity);
        msg.code = msg.type;
      });
      return messages;
    });
  }

}

exports.MyPy = MyPy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm15cHkuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInJlcXVpcmUiLCJ0eXBlc18xIiwiYmFzZUxpbnRlcl8xIiwiUkVHRVgiLCJNeVB5IiwiQmFzZUxpbnRlciIsImNvbnN0cnVjdG9yIiwib3V0cHV0Q2hhbm5lbCIsInNlcnZpY2VDb250YWluZXIiLCJQcm9kdWN0IiwibXlweSIsInJ1bkxpbnRlciIsImRvY3VtZW50IiwiY2FuY2VsbGF0aW9uIiwibWVzc2FnZXMiLCJydW4iLCJ1cmkiLCJmc1BhdGgiLCJmb3JFYWNoIiwibXNnIiwic2V2ZXJpdHkiLCJwYXJzZU1lc3NhZ2VzU2V2ZXJpdHkiLCJ0eXBlIiwicHl0aG9uU2V0dGluZ3MiLCJsaW50aW5nIiwibXlweUNhdGVnb3J5U2V2ZXJpdHkiLCJjb2RlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDOUYsYUFBU0YsSUFBVCxDQUFjSSxNQUFkLEVBQXNCO0FBQUVBLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjVCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFyQixHQUFzQyxJQUFJTixDQUFKLENBQU0sVUFBVUcsT0FBVixFQUFtQjtBQUFFQSxRQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFQO0FBQXdCLE9BQW5ELEVBQXFETyxJQUFyRCxDQUEwRFIsU0FBMUQsRUFBcUVLLFFBQXJFLENBQXRDO0FBQXVIOztBQUMvSUgsSUFBQUEsSUFBSSxDQUFDLENBQUNOLFNBQVMsR0FBR0EsU0FBUyxDQUFDYSxLQUFWLENBQWdCaEIsT0FBaEIsRUFBeUJDLFVBQVUsSUFBSSxFQUF2QyxDQUFiLEVBQXlEUyxJQUF6RCxFQUFELENBQUo7QUFDSCxHQUxNLENBQVA7QUFNSCxDQVBEOztBQVFBTyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVYLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBWSxPQUFPLENBQUMsc0JBQUQsQ0FBUDs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxNQUFNRSxZQUFZLEdBQUdGLE9BQU8sQ0FBQyxjQUFELENBQTVCOztBQUNBRCxPQUFPLENBQUNJLEtBQVIsR0FBZ0IscUVBQWhCOztBQUNBLE1BQU1DLElBQU4sU0FBbUJGLFlBQVksQ0FBQ0csVUFBaEMsQ0FBMkM7QUFDdkNDLEVBQUFBLFdBQVcsQ0FBQ0MsYUFBRCxFQUFnQkMsZ0JBQWhCLEVBQWtDO0FBQ3pDLFVBQU1QLE9BQU8sQ0FBQ1EsT0FBUixDQUFnQkMsSUFBdEIsRUFBNEJILGFBQTVCLEVBQTJDQyxnQkFBM0M7QUFDSDs7QUFDREcsRUFBQUEsU0FBUyxDQUFDQyxRQUFELEVBQVdDLFlBQVgsRUFBeUI7QUFDOUIsV0FBT2xDLFNBQVMsQ0FBQyxJQUFELEVBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ2hELFlBQU1tQyxRQUFRLEdBQUcsTUFBTSxLQUFLQyxHQUFMLENBQVMsQ0FBQ0gsUUFBUSxDQUFDSSxHQUFULENBQWFDLE1BQWQsQ0FBVCxFQUFnQ0wsUUFBaEMsRUFBMENDLFlBQTFDLEVBQXdEZCxPQUFPLENBQUNJLEtBQWhFLENBQXZCO0FBQ0FXLE1BQUFBLFFBQVEsQ0FBQ0ksT0FBVCxDQUFpQkMsR0FBRyxJQUFJO0FBQ3BCQSxRQUFBQSxHQUFHLENBQUNDLFFBQUosR0FBZSxLQUFLQyxxQkFBTCxDQUEyQkYsR0FBRyxDQUFDRyxJQUEvQixFQUFxQyxLQUFLQyxjQUFMLENBQW9CQyxPQUFwQixDQUE0QkMsb0JBQWpFLENBQWY7QUFDQU4sUUFBQUEsR0FBRyxDQUFDTyxJQUFKLEdBQVdQLEdBQUcsQ0FBQ0csSUFBZjtBQUNILE9BSEQ7QUFJQSxhQUFPUixRQUFQO0FBQ0gsS0FQZSxDQUFoQjtBQVFIOztBQWJzQzs7QUFlM0NmLE9BQU8sQ0FBQ0ssSUFBUixHQUFlQSxJQUFmIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxucmVxdWlyZShcIi4uL2NvbW1vbi9leHRlbnNpb25zXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi90eXBlc1wiKTtcclxuY29uc3QgYmFzZUxpbnRlcl8xID0gcmVxdWlyZShcIi4vYmFzZUxpbnRlclwiKTtcclxuZXhwb3J0cy5SRUdFWCA9ICcoPzxmaWxlPi4rKTooPzxsaW5lPlxcXFxkKyk6ICg/PHR5cGU+XFxcXHcrKTogKD88bWVzc2FnZT4uKilcXFxccj8oXFxcXG58JCknO1xyXG5jbGFzcyBNeVB5IGV4dGVuZHMgYmFzZUxpbnRlcl8xLkJhc2VMaW50ZXIge1xyXG4gICAgY29uc3RydWN0b3Iob3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcikge1xyXG4gICAgICAgIHN1cGVyKHR5cGVzXzEuUHJvZHVjdC5teXB5LCBvdXRwdXRDaGFubmVsLCBzZXJ2aWNlQ29udGFpbmVyKTtcclxuICAgIH1cclxuICAgIHJ1bkxpbnRlcihkb2N1bWVudCwgY2FuY2VsbGF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB5aWVsZCB0aGlzLnJ1bihbZG9jdW1lbnQudXJpLmZzUGF0aF0sIGRvY3VtZW50LCBjYW5jZWxsYXRpb24sIGV4cG9ydHMuUkVHRVgpO1xyXG4gICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XHJcbiAgICAgICAgICAgICAgICBtc2cuc2V2ZXJpdHkgPSB0aGlzLnBhcnNlTWVzc2FnZXNTZXZlcml0eShtc2cudHlwZSwgdGhpcy5weXRob25TZXR0aW5ncy5saW50aW5nLm15cHlDYXRlZ29yeVNldmVyaXR5KTtcclxuICAgICAgICAgICAgICAgIG1zZy5jb2RlID0gbXNnLnR5cGU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZXM7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5NeVB5ID0gTXlQeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXlweS5qcy5tYXAiXX0=