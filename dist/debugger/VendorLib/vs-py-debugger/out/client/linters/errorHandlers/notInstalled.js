"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const types_1 = require("../../common/process/types");

const types_2 = require("../types");

const baseErrorHandler_1 = require("./baseErrorHandler");

class NotInstalledErrorHandler extends baseErrorHandler_1.BaseErrorHandler {
  constructor(product, outputChannel, serviceContainer) {
    super(product, outputChannel, serviceContainer);
  }

  handleError(error, resource, execInfo) {
    return __awaiter(this, void 0, void 0, function* () {
      const pythonExecutionService = yield this.serviceContainer.get(types_1.IPythonExecutionFactory).create({
        resource
      });
      const isModuleInstalled = yield pythonExecutionService.isModuleInstalled(execInfo.moduleName);

      if (isModuleInstalled) {
        return this.nextHandler ? this.nextHandler.handleError(error, resource, execInfo) : false;
      }

      this.installer.promptToInstall(this.product, resource).catch(this.logger.logError.bind(this, 'NotInstalledErrorHandler.promptToInstall'));
      const linterManager = this.serviceContainer.get(types_2.ILinterManager);
      const info = linterManager.getLinterInfo(execInfo.product);
      const customError = `Linter '${info.id}' is not installed. Please install it or select another linter".`;
      this.outputChannel.appendLine(`\n${customError}\n${error}`);
      this.logger.logWarning(customError, error);
      return true;
    });
  }

}

exports.NotInstalledErrorHandler = NotInstalledErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vdEluc3RhbGxlZC5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidHlwZXNfMSIsInJlcXVpcmUiLCJ0eXBlc18yIiwiYmFzZUVycm9ySGFuZGxlcl8xIiwiTm90SW5zdGFsbGVkRXJyb3JIYW5kbGVyIiwiQmFzZUVycm9ySGFuZGxlciIsImNvbnN0cnVjdG9yIiwicHJvZHVjdCIsIm91dHB1dENoYW5uZWwiLCJzZXJ2aWNlQ29udGFpbmVyIiwiaGFuZGxlRXJyb3IiLCJlcnJvciIsInJlc291cmNlIiwiZXhlY0luZm8iLCJweXRob25FeGVjdXRpb25TZXJ2aWNlIiwiZ2V0IiwiSVB5dGhvbkV4ZWN1dGlvbkZhY3RvcnkiLCJjcmVhdGUiLCJpc01vZHVsZUluc3RhbGxlZCIsIm1vZHVsZU5hbWUiLCJuZXh0SGFuZGxlciIsImluc3RhbGxlciIsInByb21wdFRvSW5zdGFsbCIsImNhdGNoIiwibG9nZ2VyIiwibG9nRXJyb3IiLCJiaW5kIiwibGludGVyTWFuYWdlciIsIklMaW50ZXJNYW5hZ2VyIiwiaW5mbyIsImdldExpbnRlckluZm8iLCJjdXN0b21FcnJvciIsImlkIiwiYXBwZW5kTGluZSIsImxvZ1dhcm5pbmciXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLFNBQVMsR0FBSSxVQUFRLFNBQUtBLFNBQWQsSUFBNEIsVUFBVUMsT0FBVixFQUFtQkMsVUFBbkIsRUFBK0JDLENBQS9CLEVBQWtDQyxTQUFsQyxFQUE2QztBQUNyRixTQUFPLEtBQUtELENBQUMsS0FBS0EsQ0FBQyxHQUFHRSxPQUFULENBQU4sRUFBeUIs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QUFNQyxhQUFhLEdBQUcsS0FBS2xCLGdCQUFMLENBQXNCTSxHQUF0QixDQUEwQmIsT0FBTyxDQUFDMEIsY0FBbEMsQ0FBdEI7QUFDQSxZQUFNQyxJQUFJLEdBQUdGLGFBQWEsQ0FBQ0csYUFBZCxDQUE0QmpCLFFBQVEsQ0FBQ04sT0FBckMsQ0FBYjtBQUNBLFlBQU13QixXQUFXLEdBQUksV0FBVUYsSUFBSSxDQUFDRyxFQUFHLGtFQUF2QztBQUNBLFdBQUt4QixhQUFMLENBQW1CeUIsVUFBbkIsQ0FBK0IsS0FBSUYsV0FBWSxLQUFJcEIsS0FBTSxFQUF6RDtBQUNBLFdBQUthLE1BQUwsQ0FBWVUsVUFBWixDQUF1QkgsV0FBdkIsRUFBb0NwQixLQUFwQztBQUNBLGFBQU8sSUFBUDtBQUNILEtBZGUsQ0FBaEI7QUFlSDs7QUFwQnNFOztBQXNCM0VaLE9BQU8sQ0FBQ0ssd0JBQVIsR0FBbUNBLHdCQUFuQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3Byb2Nlc3MvdHlwZXNcIik7XHJcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vdHlwZXNcIik7XHJcbmNvbnN0IGJhc2VFcnJvckhhbmRsZXJfMSA9IHJlcXVpcmUoXCIuL2Jhc2VFcnJvckhhbmRsZXJcIik7XHJcbmNsYXNzIE5vdEluc3RhbGxlZEVycm9ySGFuZGxlciBleHRlbmRzIGJhc2VFcnJvckhhbmRsZXJfMS5CYXNlRXJyb3JIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByb2R1Y3QsIG91dHB1dENoYW5uZWwsIHNlcnZpY2VDb250YWluZXIpIHtcclxuICAgICAgICBzdXBlcihwcm9kdWN0LCBvdXRwdXRDaGFubmVsLCBzZXJ2aWNlQ29udGFpbmVyKTtcclxuICAgIH1cclxuICAgIGhhbmRsZUVycm9yKGVycm9yLCByZXNvdXJjZSwgZXhlY0luZm8pIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBjb25zdCBweXRob25FeGVjdXRpb25TZXJ2aWNlID0geWllbGQgdGhpcy5zZXJ2aWNlQ29udGFpbmVyLmdldCh0eXBlc18xLklQeXRob25FeGVjdXRpb25GYWN0b3J5KS5jcmVhdGUoeyByZXNvdXJjZSB9KTtcclxuICAgICAgICAgICAgY29uc3QgaXNNb2R1bGVJbnN0YWxsZWQgPSB5aWVsZCBweXRob25FeGVjdXRpb25TZXJ2aWNlLmlzTW9kdWxlSW5zdGFsbGVkKGV4ZWNJbmZvLm1vZHVsZU5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoaXNNb2R1bGVJbnN0YWxsZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHRIYW5kbGVyID8gdGhpcy5uZXh0SGFuZGxlci5oYW5kbGVFcnJvcihlcnJvciwgcmVzb3VyY2UsIGV4ZWNJbmZvKSA6IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFsbGVyLnByb21wdFRvSW5zdGFsbCh0aGlzLnByb2R1Y3QsIHJlc291cmNlKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKHRoaXMubG9nZ2VyLmxvZ0Vycm9yLmJpbmQodGhpcywgJ05vdEluc3RhbGxlZEVycm9ySGFuZGxlci5wcm9tcHRUb0luc3RhbGwnKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbnRlck1hbmFnZXIgPSB0aGlzLnNlcnZpY2VDb250YWluZXIuZ2V0KHR5cGVzXzIuSUxpbnRlck1hbmFnZXIpO1xyXG4gICAgICAgICAgICBjb25zdCBpbmZvID0gbGludGVyTWFuYWdlci5nZXRMaW50ZXJJbmZvKGV4ZWNJbmZvLnByb2R1Y3QpO1xyXG4gICAgICAgICAgICBjb25zdCBjdXN0b21FcnJvciA9IGBMaW50ZXIgJyR7aW5mby5pZH0nIGlzIG5vdCBpbnN0YWxsZWQuIFBsZWFzZSBpbnN0YWxsIGl0IG9yIHNlbGVjdCBhbm90aGVyIGxpbnRlclwiLmA7XHJcbiAgICAgICAgICAgIHRoaXMub3V0cHV0Q2hhbm5lbC5hcHBlbmRMaW5lKGBcXG4ke2N1c3RvbUVycm9yfVxcbiR7ZXJyb3J9YCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyLmxvZ1dhcm5pbmcoY3VzdG9tRXJyb3IsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Ob3RJbnN0YWxsZWRFcnJvckhhbmRsZXIgPSBOb3RJbnN0YWxsZWRFcnJvckhhbmRsZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdEluc3RhbGxlZC5qcy5tYXAiXX0=