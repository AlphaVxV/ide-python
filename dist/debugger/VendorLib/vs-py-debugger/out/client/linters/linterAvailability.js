// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const types_1 = require("../common/application/types");

const logger_1 = require("../common/logger");

const types_2 = require("../common/types");

let AvailableLinterActivator = class AvailableLinterActivator {
  constructor(appShell, installer, workspaceConfig, configService) {
    this.appShell = appShell;
    this.installer = installer;
    this.workspaceConfig = workspaceConfig;
    this.configService = configService;
  }
  /**
   * Check if it is possible to enable an otherwise-unconfigured linter in
   * the current workspace, and if so ask the user if they want that linter
   * configured explicitly.
   *
   * @param linterInfo The linter to check installation status.
   * @param resource Context for the operation (required when in multi-root workspaces).
   *
   * @returns true if configuration was updated in any way, false otherwise.
   */


  promptIfLinterAvailable(linterInfo, resource) {
    return __awaiter(this, void 0, void 0, function* () {
      // Has the feature been enabled yet?
      if (!this.isFeatureEnabled) {
        return false;
      } // Has the linter in question has been configured explicitly? If so, no need to continue.


      if (!this.isLinterUsingDefaultConfiguration(linterInfo, resource)) {
        return false;
      } // Is the linter available in the current workspace?


      if (yield this.isLinterAvailable(linterInfo.product, resource)) {
        // great, it is - ask the user if they'd like to enable it.
        return this.promptToConfigureAvailableLinter(linterInfo);
      }

      return false;
    });
  }
  /**
   * Raise a dialog asking the user if they would like to explicitly configure a
   * linter or not in their current workspace.
   *
   * @param linterInfo The linter to ask the user to enable or not.
   *
   * @returns true if the user requested a configuration change, false otherwise.
   */


  promptToConfigureAvailableLinter(linterInfo) {
    return __awaiter(this, void 0, void 0, function* () {
      const optButtons = [{
        title: `Enable ${linterInfo.id}`,
        enabled: true
      }, {
        title: `Disable ${linterInfo.id}`,
        enabled: false
      }]; // tslint:disable-next-line:messages-must-be-localized

      const pick = yield this.appShell.showInformationMessage(`Linter ${linterInfo.id} is available but not enabled.`, ...optButtons);

      if (pick) {
        yield linterInfo.enableAsync(pick.enabled);
        return true;
      }

      return false;
    });
  }
  /**
   * Check if the linter itself is available in the workspace's Python environment or
   * not.
   *
   * @param linterProduct Linter to check in the current workspace environment.
   * @param resource Context information for workspace.
   */


  isLinterAvailable(linterProduct, resource) {
    return __awaiter(this, void 0, void 0, function* () {
      return this.installer.isInstalled(linterProduct, resource).catch(reason => {
        // report and continue, assume the linter is unavailable.
        logger_1.traceError(`[WARNING]: Failed to discover if linter ${linterProduct} is installed.`, reason);
        return false;
      });
    });
  }
  /**
   * Check if the given linter has been configured by the user in this workspace or not.
   *
   * @param linterInfo Linter to check for configuration status.
   * @param resource Context information.
   *
   * @returns true if the linter has not been configured at the user, workspace, or workspace-folder scope. false otherwise.
   */


  isLinterUsingDefaultConfiguration(linterInfo, resource) {
    const ws = this.workspaceConfig.getConfiguration('python.linting', resource);
    const pe = ws.inspect(linterInfo.enabledSettingName);
    return pe.globalValue === undefined && pe.workspaceValue === undefined && pe.workspaceFolderValue === undefined;
  }
  /**
   * Check if this feature is enabled yet.
   *
   * This is a feature of the vscode-python extension that will become enabled once the
   * Python Language Server becomes the default, replacing Jedi as the default. Testing
   * the global default setting for `"python.jediEnabled": false` enables it.
   *
   * @returns true if the global default for python.jediEnabled is false.
   */


  get isFeatureEnabled() {
    return !this.configService.getSettings().jediEnabled;
  }

};
AvailableLinterActivator = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_1.IApplicationShell)), __param(1, inversify_1.inject(types_2.IInstaller)), __param(2, inversify_1.inject(types_1.IWorkspaceService)), __param(3, inversify_1.inject(types_2.IConfigurationService))], AvailableLinterActivator);
exports.AvailableLinterActivator = AvailableLinterActivator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpbnRlckF2YWlsYWJpbGl0eS5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJleHBvcnRzIiwiaW52ZXJzaWZ5XzEiLCJyZXF1aXJlIiwidHlwZXNfMSIsImxvZ2dlcl8xIiwidHlwZXNfMiIsIkF2YWlsYWJsZUxpbnRlckFjdGl2YXRvciIsImNvbnN0cnVjdG9yIiwiYXBwU2hlbGwiLCJpbnN0YWxsZXIiLCJ3b3Jrc3BhY2VDb25maWciLCJjb25maWdTZXJ2aWNlIiwicHJvbXB0SWZMaW50ZXJBdmFpbGFibGUiLCJsaW50ZXJJbmZvIiwicmVzb3VyY2UiLCJpc0ZlYXR1cmVFbmFibGVkIiwiaXNMaW50ZXJVc2luZ0RlZmF1bHRDb25maWd1cmF0aW9uIiwiaXNMaW50ZXJBdmFpbGFibGUiLCJwcm9kdWN0IiwicHJvbXB0VG9Db25maWd1cmVBdmFpbGFibGVMaW50ZXIiLCJvcHRCdXR0b25zIiwidGl0bGUiLCJpZCIsImVuYWJsZWQiLCJwaWNrIiwic2hvd0luZm9ybWF0aW9uTWVzc2FnZSIsImVuYWJsZUFzeW5jIiwibGludGVyUHJvZHVjdCIsImlzSW5zdGFsbGVkIiwiY2F0Y2giLCJyZWFzb24iLCJ0cmFjZUVycm9yIiwid3MiLCJnZXRDb25maWd1cmF0aW9uIiwicGUiLCJpbnNwZWN0IiwiZW5hYmxlZFNldHRpbmdOYW1lIiwiZ2xvYmFsVmFsdWUiLCJ1bmRlZmluZWQiLCJ3b3Jrc3BhY2VWYWx1ZSIsIndvcmtzcGFjZUZvbGRlclZhbHVlIiwiZ2V0U2V0dGluZ3MiLCJqZWRpRW5hYmxlZCIsImluamVjdGFibGUiLCJpbmplY3QiLCJJQXBwbGljYXRpb25TaGVsbCIsIklJbnN0YWxsZXIiLCJJV29ya3NwYWNlU2VydmljZSIsIklDb25maWd1cmF0aW9uU2VydmljZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBLElBQUlBLFVBQVUsR0FBSSxVQUFRLFNBQUtBLFVBQWQsSUFBNkIsVUFBVUMsVUFBVixFQUFzQkMsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DQyxJQUFuQyxFQUF5QztBQUNuRixNQUFJQyxDQUFDLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBbEI7QUFBQSxNQUEwQkMsQ0FBQyxHQUFHSCxDQUFDLEdBQUcsQ0FBSixHQUFRSCxNQUFSLEdBQWlCRSxJQUFJLEtBQUssSUFBVCxHQUFnQkEsSUFBSSxHQUFHSyxNQUFNLENBQUNDLHdCQUFQLENBQWdDUixNQUFoQyxFQUF3Q0MsR0FBeEMsQ0FBdkIsR0FBc0VDLElBQXJIO0FBQUEsTUFBMkhPLENBQTNIO0FBQ0EsTUFBSSxPQUFPQyxPQUFQLEtBQW1CLFFBQW5CLElBQStCLE9BQU9BLE9BQU8sQ0FBQ0MsUUFBZixLQUE0QixVQUEvRCxFQUEyRUwsQ0FBQyxHQUFHSSxPQUFPLENBQUNDLFFBQVIsQ0FBaUJaLFVBQWpCLEVBQTZCQyxNQUE3QixFQUFxQ0MsR0FBckMsRUFBMENDLElBQTFDLENBQUosQ0FBM0UsS0FDSyxLQUFLLElBQUlVLENBQUMsR0FBR2IsVUFBVSxDQUFDTSxNQUFYLEdBQW9CLENBQWpDLEVBQW9DTyxDQUFDLElBQUksQ0FBekMsRUFBNENBLENBQUMsRUFBN0MsRUFBaUQsSUFBSUgsQ0FBQyxHQUFHVixVQUFVLENBQUNhLENBQUQsQ0FBbEIsRUFBdUJOLENBQUMsR0FBRyxDQUFDSCxDQUFDLEdBQUcsQ0FBSixHQUFRTSxDQUFDLENBQUNILENBQUQsQ0FBVCxHQUFlSCxDQUFDLEdBQUcsQ0FBSixHQUFRTSxDQUFDLENBQUNULE1BQUQsRUFBU0MsR0FBVCxFQUFjSyxDQUFkLENBQVQsR0FBNEJHLENBQUMsQ0FBQ1QsTUFBRCxFQUFTQyxHQUFULENBQTdDLEtBQStESyxDQUFuRTtBQUM3RSxTQUFPSCxDQUFDLEdBQUcsQ0FBSixJQUFTRyxDQUFULElBQWNDLE1BQU0sQ0FBQ00sY0FBUCxDQUFzQmIsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DSyxDQUFuQyxDQUFkLEVBQXFEQSxDQUE1RDtBQUNILENBTEQ7O0FBTUEsSUFBSVEsT0FBTyxHQUFJLFVBQVEsU0FBS0EsT0FBZCxJQUEwQixVQUFVQyxVQUFWLEVBQXNCQyxTQUF0QixFQUFpQztBQUNyRSxTQUFPLFVBQVVoQixNQUFWLEVBQWtCQyxHQUFsQixFQUF1QjtBQUFFZSxJQUFBQSxTQUFTLENBQUNoQixNQUFELEVBQVNDLEdBQVQsRUFBY2MsVUFBZCxDQUFUO0FBQXFDLEdBQXJFO0FBQ0gsQ0FGRDs7QUFHQSxJQUFJRSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDOUYsYUFBU0YsSUFBVCxDQUFjSSxNQUFkLEVBQXNCO0FBQUVBLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjVCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFyQixHQUFzQyxJQUFJTixDQUFKLENBQU0sVUFBVUcsT0FBVixFQUFtQjtBQUFFQSxRQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFQO0FBQXdCLE9BQW5ELEVBQXFETyxJQUFyRCxDQUEwRFIsU0FBMUQsRUFBcUVLLFFBQXJFLENBQXRDO0FBQXVIOztBQUMvSUgsSUFBQUEsSUFBSSxDQUFDLENBQUNOLFNBQVMsR0FBR0EsU0FBUyxDQUFDYSxLQUFWLENBQWdCaEIsT0FBaEIsRUFBeUJDLFVBQVUsSUFBSSxFQUF2QyxDQUFiLEVBQXlEUyxJQUF6RCxFQUFELENBQUo7QUFDSCxHQUxNLENBQVA7QUFNSCxDQVBEOztBQVFBckIsTUFBTSxDQUFDTSxjQUFQLENBQXNCc0IsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRVQsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTVUsV0FBVyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUEzQjs7QUFDQSxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBQyw2QkFBRCxDQUF2Qjs7QUFDQSxNQUFNRSxRQUFRLEdBQUdGLE9BQU8sQ0FBQyxrQkFBRCxDQUF4Qjs7QUFDQSxNQUFNRyxPQUFPLEdBQUdILE9BQU8sQ0FBQyxpQkFBRCxDQUF2Qjs7QUFDQSxJQUFJSSx3QkFBd0IsR0FBRyxNQUFNQSx3QkFBTixDQUErQjtBQUMxREMsRUFBQUEsV0FBVyxDQUFDQyxRQUFELEVBQVdDLFNBQVgsRUFBc0JDLGVBQXRCLEVBQXVDQyxhQUF2QyxFQUFzRDtBQUM3RCxTQUFLSCxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUJBLFNBQWpCO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QkEsZUFBdkI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCQSxhQUFyQjtBQUNIO0FBQ0Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNJQyxFQUFBQSx1QkFBdUIsQ0FBQ0MsVUFBRCxFQUFhQyxRQUFiLEVBQXVCO0FBQzFDLFdBQU9oQyxTQUFTLENBQUMsSUFBRCxFQUFPLEtBQUssQ0FBWixFQUFlLEtBQUssQ0FBcEIsRUFBdUIsYUFBYTtBQUNoRDtBQUNBLFVBQUksQ0FBQyxLQUFLaUMsZ0JBQVYsRUFBNEI7QUFDeEIsZUFBTyxLQUFQO0FBQ0gsT0FKK0MsQ0FLaEQ7OztBQUNBLFVBQUksQ0FBQyxLQUFLQyxpQ0FBTCxDQUF1Q0gsVUFBdkMsRUFBbURDLFFBQW5ELENBQUwsRUFBbUU7QUFDL0QsZUFBTyxLQUFQO0FBQ0gsT0FSK0MsQ0FTaEQ7OztBQUNBLFVBQUksTUFBTSxLQUFLRyxpQkFBTCxDQUF1QkosVUFBVSxDQUFDSyxPQUFsQyxFQUEyQ0osUUFBM0MsQ0FBVixFQUFnRTtBQUM1RDtBQUNBLGVBQU8sS0FBS0ssZ0NBQUwsQ0FBc0NOLFVBQXRDLENBQVA7QUFDSDs7QUFDRCxhQUFPLEtBQVA7QUFDSCxLQWZlLENBQWhCO0FBZ0JIO0FBQ0Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0lNLEVBQUFBLGdDQUFnQyxDQUFDTixVQUFELEVBQWE7QUFDekMsV0FBTy9CLFNBQVMsQ0FBQyxJQUFELEVBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ2hELFlBQU1zQyxVQUFVLEdBQUcsQ0FDZjtBQUNJQyxRQUFBQSxLQUFLLEVBQUcsVUFBU1IsVUFBVSxDQUFDUyxFQUFHLEVBRG5DO0FBRUlDLFFBQUFBLE9BQU8sRUFBRTtBQUZiLE9BRGUsRUFLZjtBQUNJRixRQUFBQSxLQUFLLEVBQUcsV0FBVVIsVUFBVSxDQUFDUyxFQUFHLEVBRHBDO0FBRUlDLFFBQUFBLE9BQU8sRUFBRTtBQUZiLE9BTGUsQ0FBbkIsQ0FEZ0QsQ0FXaEQ7O0FBQ0EsWUFBTUMsSUFBSSxHQUFHLE1BQU0sS0FBS2hCLFFBQUwsQ0FBY2lCLHNCQUFkLENBQXNDLFVBQVNaLFVBQVUsQ0FBQ1MsRUFBRyxnQ0FBN0QsRUFBOEYsR0FBR0YsVUFBakcsQ0FBbkI7O0FBQ0EsVUFBSUksSUFBSixFQUFVO0FBQ04sY0FBTVgsVUFBVSxDQUFDYSxXQUFYLENBQXVCRixJQUFJLENBQUNELE9BQTVCLENBQU47QUFDQSxlQUFPLElBQVA7QUFDSDs7QUFDRCxhQUFPLEtBQVA7QUFDSCxLQWxCZSxDQUFoQjtBQW1CSDtBQUNEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDSU4sRUFBQUEsaUJBQWlCLENBQUNVLGFBQUQsRUFBZ0JiLFFBQWhCLEVBQTBCO0FBQ3ZDLFdBQU9oQyxTQUFTLENBQUMsSUFBRCxFQUFPLEtBQUssQ0FBWixFQUFlLEtBQUssQ0FBcEIsRUFBdUIsYUFBYTtBQUNoRCxhQUFPLEtBQUsyQixTQUFMLENBQWVtQixXQUFmLENBQTJCRCxhQUEzQixFQUEwQ2IsUUFBMUMsRUFDRmUsS0FERSxDQUNLQyxNQUFELElBQVk7QUFDbkI7QUFDQTFCLFFBQUFBLFFBQVEsQ0FBQzJCLFVBQVQsQ0FBcUIsMkNBQTBDSixhQUFjLGdCQUE3RSxFQUE4RkcsTUFBOUY7QUFDQSxlQUFPLEtBQVA7QUFDSCxPQUxNLENBQVA7QUFNSCxLQVBlLENBQWhCO0FBUUg7QUFDRDtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDSWQsRUFBQUEsaUNBQWlDLENBQUNILFVBQUQsRUFBYUMsUUFBYixFQUF1QjtBQUNwRCxVQUFNa0IsRUFBRSxHQUFHLEtBQUt0QixlQUFMLENBQXFCdUIsZ0JBQXJCLENBQXNDLGdCQUF0QyxFQUF3RG5CLFFBQXhELENBQVg7QUFDQSxVQUFNb0IsRUFBRSxHQUFHRixFQUFFLENBQUNHLE9BQUgsQ0FBV3RCLFVBQVUsQ0FBQ3VCLGtCQUF0QixDQUFYO0FBQ0EsV0FBUUYsRUFBRSxDQUFDRyxXQUFILEtBQW1CQyxTQUFuQixJQUFnQ0osRUFBRSxDQUFDSyxjQUFILEtBQXNCRCxTQUF0RCxJQUFtRUosRUFBRSxDQUFDTSxvQkFBSCxLQUE0QkYsU0FBdkc7QUFDSDtBQUNEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0ksTUFBSXZCLGdCQUFKLEdBQXVCO0FBQ25CLFdBQU8sQ0FBQyxLQUFLSixhQUFMLENBQW1COEIsV0FBbkIsR0FBaUNDLFdBQXpDO0FBQ0g7O0FBekd5RCxDQUE5RDtBQTJHQXBDLHdCQUF3QixHQUFHM0MsVUFBVSxDQUFDLENBQ2xDc0MsV0FBVyxDQUFDMEMsVUFBWixFQURrQyxFQUVsQ2hFLE9BQU8sQ0FBQyxDQUFELEVBQUlzQixXQUFXLENBQUMyQyxNQUFaLENBQW1CekMsT0FBTyxDQUFDMEMsaUJBQTNCLENBQUosQ0FGMkIsRUFHbENsRSxPQUFPLENBQUMsQ0FBRCxFQUFJc0IsV0FBVyxDQUFDMkMsTUFBWixDQUFtQnZDLE9BQU8sQ0FBQ3lDLFVBQTNCLENBQUosQ0FIMkIsRUFJbENuRSxPQUFPLENBQUMsQ0FBRCxFQUFJc0IsV0FBVyxDQUFDMkMsTUFBWixDQUFtQnpDLE9BQU8sQ0FBQzRDLGlCQUEzQixDQUFKLENBSjJCLEVBS2xDcEUsT0FBTyxDQUFDLENBQUQsRUFBSXNCLFdBQVcsQ0FBQzJDLE1BQVosQ0FBbUJ2QyxPQUFPLENBQUMyQyxxQkFBM0IsQ0FBSixDQUwyQixDQUFELEVBTWxDMUMsd0JBTmtDLENBQXJDO0FBT0FOLE9BQU8sQ0FBQ00sd0JBQVIsR0FBbUNBLHdCQUFuQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufTtcclxudmFyIF9fcGFyYW0gPSAodGhpcyAmJiB0aGlzLl9fcGFyYW0pIHx8IGZ1bmN0aW9uIChwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59O1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGludmVyc2lmeV8xID0gcmVxdWlyZShcImludmVyc2lmeVwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vYXBwbGljYXRpb24vdHlwZXNcIik7XHJcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9sb2dnZXJcIik7XHJcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vY29tbW9uL3R5cGVzXCIpO1xyXG5sZXQgQXZhaWxhYmxlTGludGVyQWN0aXZhdG9yID0gY2xhc3MgQXZhaWxhYmxlTGludGVyQWN0aXZhdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGFwcFNoZWxsLCBpbnN0YWxsZXIsIHdvcmtzcGFjZUNvbmZpZywgY29uZmlnU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuYXBwU2hlbGwgPSBhcHBTaGVsbDtcclxuICAgICAgICB0aGlzLmluc3RhbGxlciA9IGluc3RhbGxlcjtcclxuICAgICAgICB0aGlzLndvcmtzcGFjZUNvbmZpZyA9IHdvcmtzcGFjZUNvbmZpZztcclxuICAgICAgICB0aGlzLmNvbmZpZ1NlcnZpY2UgPSBjb25maWdTZXJ2aWNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBpdCBpcyBwb3NzaWJsZSB0byBlbmFibGUgYW4gb3RoZXJ3aXNlLXVuY29uZmlndXJlZCBsaW50ZXIgaW5cclxuICAgICAqIHRoZSBjdXJyZW50IHdvcmtzcGFjZSwgYW5kIGlmIHNvIGFzayB0aGUgdXNlciBpZiB0aGV5IHdhbnQgdGhhdCBsaW50ZXJcclxuICAgICAqIGNvbmZpZ3VyZWQgZXhwbGljaXRseS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbGludGVySW5mbyBUaGUgbGludGVyIHRvIGNoZWNrIGluc3RhbGxhdGlvbiBzdGF0dXMuXHJcbiAgICAgKiBAcGFyYW0gcmVzb3VyY2UgQ29udGV4dCBmb3IgdGhlIG9wZXJhdGlvbiAocmVxdWlyZWQgd2hlbiBpbiBtdWx0aS1yb290IHdvcmtzcGFjZXMpLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgY29uZmlndXJhdGlvbiB3YXMgdXBkYXRlZCBpbiBhbnkgd2F5LCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuICAgIHByb21wdElmTGludGVyQXZhaWxhYmxlKGxpbnRlckluZm8sIHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgLy8gSGFzIHRoZSBmZWF0dXJlIGJlZW4gZW5hYmxlZCB5ZXQ/XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0ZlYXR1cmVFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSGFzIHRoZSBsaW50ZXIgaW4gcXVlc3Rpb24gaGFzIGJlZW4gY29uZmlndXJlZCBleHBsaWNpdGx5PyBJZiBzbywgbm8gbmVlZCB0byBjb250aW51ZS5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzTGludGVyVXNpbmdEZWZhdWx0Q29uZmlndXJhdGlvbihsaW50ZXJJbmZvLCByZXNvdXJjZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBJcyB0aGUgbGludGVyIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCB3b3Jrc3BhY2U/XHJcbiAgICAgICAgICAgIGlmICh5aWVsZCB0aGlzLmlzTGludGVyQXZhaWxhYmxlKGxpbnRlckluZm8ucHJvZHVjdCwgcmVzb3VyY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBncmVhdCwgaXQgaXMgLSBhc2sgdGhlIHVzZXIgaWYgdGhleSdkIGxpa2UgdG8gZW5hYmxlIGl0LlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvbXB0VG9Db25maWd1cmVBdmFpbGFibGVMaW50ZXIobGludGVySW5mbyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSYWlzZSBhIGRpYWxvZyBhc2tpbmcgdGhlIHVzZXIgaWYgdGhleSB3b3VsZCBsaWtlIHRvIGV4cGxpY2l0bHkgY29uZmlndXJlIGFcclxuICAgICAqIGxpbnRlciBvciBub3QgaW4gdGhlaXIgY3VycmVudCB3b3Jrc3BhY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGxpbnRlckluZm8gVGhlIGxpbnRlciB0byBhc2sgdGhlIHVzZXIgdG8gZW5hYmxlIG9yIG5vdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB1c2VyIHJlcXVlc3RlZCBhIGNvbmZpZ3VyYXRpb24gY2hhbmdlLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuICAgIHByb21wdFRvQ29uZmlndXJlQXZhaWxhYmxlTGludGVyKGxpbnRlckluZm8pIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRCdXR0b25zID0gW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBgRW5hYmxlICR7bGludGVySW5mby5pZH1gLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGBEaXNhYmxlICR7bGludGVySW5mby5pZH1gLFxyXG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptZXNzYWdlcy1tdXN0LWJlLWxvY2FsaXplZFxyXG4gICAgICAgICAgICBjb25zdCBwaWNrID0geWllbGQgdGhpcy5hcHBTaGVsbC5zaG93SW5mb3JtYXRpb25NZXNzYWdlKGBMaW50ZXIgJHtsaW50ZXJJbmZvLmlkfSBpcyBhdmFpbGFibGUgYnV0IG5vdCBlbmFibGVkLmAsIC4uLm9wdEJ1dHRvbnMpO1xyXG4gICAgICAgICAgICBpZiAocGljaykge1xyXG4gICAgICAgICAgICAgICAgeWllbGQgbGludGVySW5mby5lbmFibGVBc3luYyhwaWNrLmVuYWJsZWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiB0aGUgbGludGVyIGl0c2VsZiBpcyBhdmFpbGFibGUgaW4gdGhlIHdvcmtzcGFjZSdzIFB5dGhvbiBlbnZpcm9ubWVudCBvclxyXG4gICAgICogbm90LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBsaW50ZXJQcm9kdWN0IExpbnRlciB0byBjaGVjayBpbiB0aGUgY3VycmVudCB3b3Jrc3BhY2UgZW52aXJvbm1lbnQuXHJcbiAgICAgKiBAcGFyYW0gcmVzb3VyY2UgQ29udGV4dCBpbmZvcm1hdGlvbiBmb3Igd29ya3NwYWNlLlxyXG4gICAgICovXHJcbiAgICBpc0xpbnRlckF2YWlsYWJsZShsaW50ZXJQcm9kdWN0LCByZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluc3RhbGxlci5pc0luc3RhbGxlZChsaW50ZXJQcm9kdWN0LCByZXNvdXJjZSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXBvcnQgYW5kIGNvbnRpbnVlLCBhc3N1bWUgdGhlIGxpbnRlciBpcyB1bmF2YWlsYWJsZS5cclxuICAgICAgICAgICAgICAgIGxvZ2dlcl8xLnRyYWNlRXJyb3IoYFtXQVJOSU5HXTogRmFpbGVkIHRvIGRpc2NvdmVyIGlmIGxpbnRlciAke2xpbnRlclByb2R1Y3R9IGlzIGluc3RhbGxlZC5gLCByZWFzb24pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIGxpbnRlciBoYXMgYmVlbiBjb25maWd1cmVkIGJ5IHRoZSB1c2VyIGluIHRoaXMgd29ya3NwYWNlIG9yIG5vdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbGludGVySW5mbyBMaW50ZXIgdG8gY2hlY2sgZm9yIGNvbmZpZ3VyYXRpb24gc3RhdHVzLlxyXG4gICAgICogQHBhcmFtIHJlc291cmNlIENvbnRleHQgaW5mb3JtYXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB0aGUgbGludGVyIGhhcyBub3QgYmVlbiBjb25maWd1cmVkIGF0IHRoZSB1c2VyLCB3b3Jrc3BhY2UsIG9yIHdvcmtzcGFjZS1mb2xkZXIgc2NvcGUuIGZhbHNlIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgaXNMaW50ZXJVc2luZ0RlZmF1bHRDb25maWd1cmF0aW9uKGxpbnRlckluZm8sIHJlc291cmNlKSB7XHJcbiAgICAgICAgY29uc3Qgd3MgPSB0aGlzLndvcmtzcGFjZUNvbmZpZy5nZXRDb25maWd1cmF0aW9uKCdweXRob24ubGludGluZycsIHJlc291cmNlKTtcclxuICAgICAgICBjb25zdCBwZSA9IHdzLmluc3BlY3QobGludGVySW5mby5lbmFibGVkU2V0dGluZ05hbWUpO1xyXG4gICAgICAgIHJldHVybiAocGUuZ2xvYmFsVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBwZS53b3Jrc3BhY2VWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIHBlLndvcmtzcGFjZUZvbGRlclZhbHVlID09PSB1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiB0aGlzIGZlYXR1cmUgaXMgZW5hYmxlZCB5ZXQuXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBpcyBhIGZlYXR1cmUgb2YgdGhlIHZzY29kZS1weXRob24gZXh0ZW5zaW9uIHRoYXQgd2lsbCBiZWNvbWUgZW5hYmxlZCBvbmNlIHRoZVxyXG4gICAgICogUHl0aG9uIExhbmd1YWdlIFNlcnZlciBiZWNvbWVzIHRoZSBkZWZhdWx0LCByZXBsYWNpbmcgSmVkaSBhcyB0aGUgZGVmYXVsdC4gVGVzdGluZ1xyXG4gICAgICogdGhlIGdsb2JhbCBkZWZhdWx0IHNldHRpbmcgZm9yIGBcInB5dGhvbi5qZWRpRW5hYmxlZFwiOiBmYWxzZWAgZW5hYmxlcyBpdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBnbG9iYWwgZGVmYXVsdCBmb3IgcHl0aG9uLmplZGlFbmFibGVkIGlzIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBnZXQgaXNGZWF0dXJlRW5hYmxlZCgpIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuY29uZmlnU2VydmljZS5nZXRTZXR0aW5ncygpLmplZGlFbmFibGVkO1xyXG4gICAgfVxyXG59O1xyXG5BdmFpbGFibGVMaW50ZXJBY3RpdmF0b3IgPSBfX2RlY29yYXRlKFtcclxuICAgIGludmVyc2lmeV8xLmluamVjdGFibGUoKSxcclxuICAgIF9fcGFyYW0oMCwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzEuSUFwcGxpY2F0aW9uU2hlbGwpKSxcclxuICAgIF9fcGFyYW0oMSwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzIuSUluc3RhbGxlcikpLFxyXG4gICAgX19wYXJhbSgyLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMS5JV29ya3NwYWNlU2VydmljZSkpLFxyXG4gICAgX19wYXJhbSgzLCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMi5JQ29uZmlndXJhdGlvblNlcnZpY2UpKVxyXG5dLCBBdmFpbGFibGVMaW50ZXJBY3RpdmF0b3IpO1xyXG5leHBvcnRzLkF2YWlsYWJsZUxpbnRlckFjdGl2YXRvciA9IEF2YWlsYWJsZUxpbnRlckFjdGl2YXRvcjtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGludGVyQXZhaWxhYmlsaXR5LmpzLm1hcCJdfQ==