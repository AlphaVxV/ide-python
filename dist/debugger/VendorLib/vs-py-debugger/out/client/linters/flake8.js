"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("../common/extensions");

const types_1 = require("../common/types");

const baseLinter_1 = require("./baseLinter");

const COLUMN_OFF_SET = 1;

class Flake8 extends baseLinter_1.BaseLinter {
  constructor(outputChannel, serviceContainer) {
    super(types_1.Product.flake8, outputChannel, serviceContainer, COLUMN_OFF_SET);
  }

  runLinter(document, cancellation) {
    return __awaiter(this, void 0, void 0, function* () {
      const messages = yield this.run(['--format=%(row)d,%(col)d,%(code).1s,%(code)s:%(text)s', document.uri.fsPath], document, cancellation);
      messages.forEach(msg => {
        msg.severity = this.parseMessagesSeverity(msg.type, this.pythonSettings.linting.flake8CategorySeverity);
      });
      return messages;
    });
  }

}

exports.Flake8 = Flake8;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZsYWtlOC5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwicmVxdWlyZSIsInR5cGVzXzEiLCJiYXNlTGludGVyXzEiLCJDT0xVTU5fT0ZGX1NFVCIsIkZsYWtlOCIsIkJhc2VMaW50ZXIiLCJjb25zdHJ1Y3RvciIsIm91dHB1dENoYW5uZWwiLCJzZXJ2aWNlQ29udGFpbmVyIiwiUHJvZHVjdCIsImZsYWtlOCIsInJ1bkxpbnRlciIsImRvY3VtZW50IiwiY2FuY2VsbGF0aW9uIiwibWVzc2FnZXMiLCJydW4iLCJ1cmkiLCJmc1BhdGgiLCJmb3JFYWNoIiwibXNnIiwic2V2ZXJpdHkiLCJwYXJzZU1lc3NhZ2VzU2V2ZXJpdHkiLCJ0eXBlIiwicHl0aG9uU2V0dGluZ3MiLCJsaW50aW5nIiwiZmxha2U4Q2F0ZWdvcnlTZXZlcml0eSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFBeUI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDLE9BQUQsQ0FBVCxDQUFtQkssS0FBbkIsQ0FBRCxDQUFKO0FBQWtDLE9BQXhDLENBQXlDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZO0FBQUU7O0FBQzlGLGFBQVNGLElBQVQsQ0FBY0ksTUFBZCxFQUFzQjtBQUFFQSxNQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY1QsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBckIsR0FBc0MsSUFBSU4sQ0FBSixDQUFNLFVBQVVHLE9BQVYsRUFBbUI7QUFBRUEsUUFBQUEsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBUDtBQUF3QixPQUFuRCxFQUFxRE8sSUFBckQsQ0FBMERSLFNBQTFELEVBQXFFSyxRQUFyRSxDQUF0QztBQUF1SDs7QUFDL0lILElBQUFBLElBQUksQ0FBQyxDQUFDTixTQUFTLEdBQUdBLFNBQVMsQ0FBQ2EsS0FBVixDQUFnQmhCLE9BQWhCLEVBQXlCQyxVQUFVLElBQUksRUFBdkMsQ0FBYixFQUF5RFMsSUFBekQsRUFBRCxDQUFKO0FBQ0gsR0FMTSxDQUFQO0FBTUgsQ0FQRDs7QUFRQU8sTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFWCxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQVksT0FBTyxDQUFDLHNCQUFELENBQVA7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBdkI7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHRixPQUFPLENBQUMsY0FBRCxDQUE1Qjs7QUFDQSxNQUFNRyxjQUFjLEdBQUcsQ0FBdkI7O0FBQ0EsTUFBTUMsTUFBTixTQUFxQkYsWUFBWSxDQUFDRyxVQUFsQyxDQUE2QztBQUN6Q0MsRUFBQUEsV0FBVyxDQUFDQyxhQUFELEVBQWdCQyxnQkFBaEIsRUFBa0M7QUFDekMsVUFBTVAsT0FBTyxDQUFDUSxPQUFSLENBQWdCQyxNQUF0QixFQUE4QkgsYUFBOUIsRUFBNkNDLGdCQUE3QyxFQUErREwsY0FBL0Q7QUFDSDs7QUFDRFEsRUFBQUEsU0FBUyxDQUFDQyxRQUFELEVBQVdDLFlBQVgsRUFBeUI7QUFDOUIsV0FBT2xDLFNBQVMsQ0FBQyxJQUFELEVBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ2hELFlBQU1tQyxRQUFRLEdBQUcsTUFBTSxLQUFLQyxHQUFMLENBQVMsQ0FBQyx1REFBRCxFQUEwREgsUUFBUSxDQUFDSSxHQUFULENBQWFDLE1BQXZFLENBQVQsRUFBeUZMLFFBQXpGLEVBQW1HQyxZQUFuRyxDQUF2QjtBQUNBQyxNQUFBQSxRQUFRLENBQUNJLE9BQVQsQ0FBaUJDLEdBQUcsSUFBSTtBQUNwQkEsUUFBQUEsR0FBRyxDQUFDQyxRQUFKLEdBQWUsS0FBS0MscUJBQUwsQ0FBMkJGLEdBQUcsQ0FBQ0csSUFBL0IsRUFBcUMsS0FBS0MsY0FBTCxDQUFvQkMsT0FBcEIsQ0FBNEJDLHNCQUFqRSxDQUFmO0FBQ0gsT0FGRDtBQUdBLGFBQU9YLFFBQVA7QUFDSCxLQU5lLENBQWhCO0FBT0g7O0FBWndDOztBQWM3Q2YsT0FBTyxDQUFDSyxNQUFSLEdBQWlCQSxNQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnJlcXVpcmUoXCIuLi9jb21tb24vZXh0ZW5zaW9uc1wiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vdHlwZXNcIik7XHJcbmNvbnN0IGJhc2VMaW50ZXJfMSA9IHJlcXVpcmUoXCIuL2Jhc2VMaW50ZXJcIik7XHJcbmNvbnN0IENPTFVNTl9PRkZfU0VUID0gMTtcclxuY2xhc3MgRmxha2U4IGV4dGVuZHMgYmFzZUxpbnRlcl8xLkJhc2VMaW50ZXIge1xyXG4gICAgY29uc3RydWN0b3Iob3V0cHV0Q2hhbm5lbCwgc2VydmljZUNvbnRhaW5lcikge1xyXG4gICAgICAgIHN1cGVyKHR5cGVzXzEuUHJvZHVjdC5mbGFrZTgsIG91dHB1dENoYW5uZWwsIHNlcnZpY2VDb250YWluZXIsIENPTFVNTl9PRkZfU0VUKTtcclxuICAgIH1cclxuICAgIHJ1bkxpbnRlcihkb2N1bWVudCwgY2FuY2VsbGF0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB5aWVsZCB0aGlzLnJ1bihbJy0tZm9ybWF0PSUocm93KWQsJShjb2wpZCwlKGNvZGUpLjFzLCUoY29kZSlzOiUodGV4dClzJywgZG9jdW1lbnQudXJpLmZzUGF0aF0sIGRvY3VtZW50LCBjYW5jZWxsYXRpb24pO1xyXG4gICAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XHJcbiAgICAgICAgICAgICAgICBtc2cuc2V2ZXJpdHkgPSB0aGlzLnBhcnNlTWVzc2FnZXNTZXZlcml0eShtc2cudHlwZSwgdGhpcy5weXRob25TZXR0aW5ncy5saW50aW5nLmZsYWtlOENhdGVnb3J5U2V2ZXJpdHkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VzO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRmxha2U4ID0gRmxha2U4O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mbGFrZTguanMubWFwIl19