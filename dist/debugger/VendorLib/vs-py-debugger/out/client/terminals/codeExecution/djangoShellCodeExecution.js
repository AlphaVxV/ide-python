// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __decorate = void 0 && (void 0).__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var __param = void 0 && (void 0).__param || function (paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const inversify_1 = require("inversify");

const path = require("path");

const types_1 = require("../../common/application/types");

require("../../common/extensions");

const types_2 = require("../../common/platform/types");

const types_3 = require("../../common/terminal/types");

const types_4 = require("../../common/types");

const djangoContext_1 = require("./djangoContext");

const terminalCodeExecution_1 = require("./terminalCodeExecution");

let DjangoShellCodeExecutionProvider = class DjangoShellCodeExecutionProvider extends terminalCodeExecution_1.TerminalCodeExecutionProvider {
  constructor(terminalServiceFactory, configurationService, workspace, documentManager, platformService, commandManager, fileSystem, disposableRegistry) {
    super(terminalServiceFactory, configurationService, workspace, disposableRegistry, platformService);
    this.terminalTitle = 'Django Shell';
    disposableRegistry.push(new djangoContext_1.DjangoContextInitializer(documentManager, workspace, fileSystem, commandManager));
  }

  getReplCommandArgs(resource) {
    const pythonSettings = this.configurationService.getSettings(resource);
    const command = this.platformService.isWindows ? pythonSettings.pythonPath.replace(/\\/g, '/') : pythonSettings.pythonPath;
    const args = pythonSettings.terminal.launchArgs.slice();
    const workspaceUri = resource ? this.workspace.getWorkspaceFolder(resource) : undefined;
    const defaultWorkspace = Array.isArray(this.workspace.workspaceFolders) && this.workspace.workspaceFolders.length > 0 ? this.workspace.workspaceFolders[0].uri.fsPath : '';
    const workspaceRoot = workspaceUri ? workspaceUri.uri.fsPath : defaultWorkspace;
    const managePyPath = workspaceRoot.length === 0 ? 'manage.py' : path.join(workspaceRoot, 'manage.py');
    args.push(managePyPath.fileToCommandArgument());
    args.push('shell');
    return {
      command,
      args
    };
  }

};
DjangoShellCodeExecutionProvider = __decorate([inversify_1.injectable(), __param(0, inversify_1.inject(types_3.ITerminalServiceFactory)), __param(1, inversify_1.inject(types_4.IConfigurationService)), __param(2, inversify_1.inject(types_1.IWorkspaceService)), __param(3, inversify_1.inject(types_1.IDocumentManager)), __param(4, inversify_1.inject(types_2.IPlatformService)), __param(5, inversify_1.inject(types_1.ICommandManager)), __param(6, inversify_1.inject(types_2.IFileSystem)), __param(7, inversify_1.inject(types_4.IDisposableRegistry))], DjangoShellCodeExecutionProvider);
exports.DjangoShellCodeExecutionProvider = DjangoShellCodeExecutionProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRqYW5nb1NoZWxsQ29kZUV4ZWN1dGlvbi5qcyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwiZGVjb3JhdG9ycyIsInRhcmdldCIsImtleSIsImRlc2MiLCJjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsIk9iamVjdCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImQiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJpIiwiZGVmaW5lUHJvcGVydHkiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsImV4cG9ydHMiLCJ2YWx1ZSIsImludmVyc2lmeV8xIiwicmVxdWlyZSIsInBhdGgiLCJ0eXBlc18xIiwidHlwZXNfMiIsInR5cGVzXzMiLCJ0eXBlc180IiwiZGphbmdvQ29udGV4dF8xIiwidGVybWluYWxDb2RlRXhlY3V0aW9uXzEiLCJEamFuZ29TaGVsbENvZGVFeGVjdXRpb25Qcm92aWRlciIsIlRlcm1pbmFsQ29kZUV4ZWN1dGlvblByb3ZpZGVyIiwiY29uc3RydWN0b3IiLCJ0ZXJtaW5hbFNlcnZpY2VGYWN0b3J5IiwiY29uZmlndXJhdGlvblNlcnZpY2UiLCJ3b3Jrc3BhY2UiLCJkb2N1bWVudE1hbmFnZXIiLCJwbGF0Zm9ybVNlcnZpY2UiLCJjb21tYW5kTWFuYWdlciIsImZpbGVTeXN0ZW0iLCJkaXNwb3NhYmxlUmVnaXN0cnkiLCJ0ZXJtaW5hbFRpdGxlIiwicHVzaCIsIkRqYW5nb0NvbnRleHRJbml0aWFsaXplciIsImdldFJlcGxDb21tYW5kQXJncyIsInJlc291cmNlIiwicHl0aG9uU2V0dGluZ3MiLCJnZXRTZXR0aW5ncyIsImNvbW1hbmQiLCJpc1dpbmRvd3MiLCJweXRob25QYXRoIiwicmVwbGFjZSIsImFyZ3MiLCJ0ZXJtaW5hbCIsImxhdW5jaEFyZ3MiLCJzbGljZSIsIndvcmtzcGFjZVVyaSIsImdldFdvcmtzcGFjZUZvbGRlciIsInVuZGVmaW5lZCIsImRlZmF1bHRXb3Jrc3BhY2UiLCJBcnJheSIsImlzQXJyYXkiLCJ3b3Jrc3BhY2VGb2xkZXJzIiwidXJpIiwiZnNQYXRoIiwid29ya3NwYWNlUm9vdCIsIm1hbmFnZVB5UGF0aCIsImpvaW4iLCJmaWxlVG9Db21tYW5kQXJndW1lbnQiLCJpbmplY3RhYmxlIiwiaW5qZWN0IiwiSVRlcm1pbmFsU2VydmljZUZhY3RvcnkiLCJJQ29uZmlndXJhdGlvblNlcnZpY2UiLCJJV29ya3NwYWNlU2VydmljZSIsIklEb2N1bWVudE1hbmFnZXIiLCJJUGxhdGZvcm1TZXJ2aWNlIiwiSUNvbW1hbmRNYW5hZ2VyIiwiSUZpbGVTeXN0ZW0iLCJJRGlzcG9zYWJsZVJlZ2lzdHJ5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsVUFBVSxHQUFJLFVBQVEsU0FBS0EsVUFBZCxJQUE2QixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUE4QkMsR0FBOUIsRUFBbUNDLElBQW5DLEVBQXlDO0FBQ25GLE1BQUlDLENBQUMsR0FBR0MsU0FBUyxDQUFDQyxNQUFsQjtBQUFBLE1BQTBCQyxDQUFDLEdBQUdILENBQUMsR0FBRyxDQUFKLEdBQVFILE1BQVIsR0FBaUJFLElBQUksS0FBSyxJQUFULEdBQWdCQSxJQUFJLEdBQUdLLE1BQU0sQ0FBQ0Msd0JBQVAsQ0FBZ0NSLE1BQWhDLEVBQXdDQyxHQUF4QyxDQUF2QixHQUFzRUMsSUFBckg7QUFBQSxNQUEySE8sQ0FBM0g7QUFDQSxNQUFJLE9BQU9DLE9BQVAsS0FBbUIsUUFBbkIsSUFBK0IsT0FBT0EsT0FBTyxDQUFDQyxRQUFmLEtBQTRCLFVBQS9ELEVBQTJFTCxDQUFDLEdBQUdJLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQlosVUFBakIsRUFBNkJDLE1BQTdCLEVBQXFDQyxHQUFyQyxFQUEwQ0MsSUFBMUMsQ0FBSixDQUEzRSxLQUNLLEtBQUssSUFBSVUsQ0FBQyxHQUFHYixVQUFVLENBQUNNLE1BQVgsR0FBb0IsQ0FBakMsRUFBb0NPLENBQUMsSUFBSSxDQUF6QyxFQUE0Q0EsQ0FBQyxFQUE3QyxFQUFpRCxJQUFJSCxDQUFD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QUosQ0FKbUMsRUFLMUN6RCxPQUFPLENBQUMsQ0FBRCxFQUFJSyxXQUFXLENBQUNpRCxNQUFaLENBQW1COUMsT0FBTyxDQUFDa0QsZ0JBQTNCLENBQUosQ0FMbUMsRUFNMUMxRCxPQUFPLENBQUMsQ0FBRCxFQUFJSyxXQUFXLENBQUNpRCxNQUFaLENBQW1CN0MsT0FBTyxDQUFDa0QsZ0JBQTNCLENBQUosQ0FObUMsRUFPMUMzRCxPQUFPLENBQUMsQ0FBRCxFQUFJSyxXQUFXLENBQUNpRCxNQUFaLENBQW1COUMsT0FBTyxDQUFDb0QsZUFBM0IsQ0FBSixDQVBtQyxFQVExQzVELE9BQU8sQ0FBQyxDQUFELEVBQUlLLFdBQVcsQ0FBQ2lELE1BQVosQ0FBbUI3QyxPQUFPLENBQUNvRCxXQUEzQixDQUFKLENBUm1DLEVBUzFDN0QsT0FBTyxDQUFDLENBQUQsRUFBSUssV0FBVyxDQUFDaUQsTUFBWixDQUFtQjNDLE9BQU8sQ0FBQ21ELG1CQUEzQixDQUFKLENBVG1DLENBQUQsRUFVMUNoRCxnQ0FWMEMsQ0FBN0M7QUFXQVgsT0FBTyxDQUFDVyxnQ0FBUixHQUEyQ0EsZ0NBQTNDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19wYXJhbSA9ICh0aGlzICYmIHRoaXMuX19wYXJhbSkgfHwgZnVuY3Rpb24gKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgaW52ZXJzaWZ5XzEgPSByZXF1aXJlKFwiaW52ZXJzaWZ5XCIpO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNvbnN0IHR5cGVzXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL2FwcGxpY2F0aW9uL3R5cGVzXCIpO1xyXG5yZXF1aXJlKFwiLi4vLi4vY29tbW9uL2V4dGVuc2lvbnNcIik7XHJcbmNvbnN0IHR5cGVzXzIgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uL3BsYXRmb3JtL3R5cGVzXCIpO1xyXG5jb25zdCB0eXBlc18zID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi90ZXJtaW5hbC90eXBlc1wiKTtcclxuY29uc3QgdHlwZXNfNCA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vdHlwZXNcIik7XHJcbmNvbnN0IGRqYW5nb0NvbnRleHRfMSA9IHJlcXVpcmUoXCIuL2RqYW5nb0NvbnRleHRcIik7XHJcbmNvbnN0IHRlcm1pbmFsQ29kZUV4ZWN1dGlvbl8xID0gcmVxdWlyZShcIi4vdGVybWluYWxDb2RlRXhlY3V0aW9uXCIpO1xyXG5sZXQgRGphbmdvU2hlbGxDb2RlRXhlY3V0aW9uUHJvdmlkZXIgPSBjbGFzcyBEamFuZ29TaGVsbENvZGVFeGVjdXRpb25Qcm92aWRlciBleHRlbmRzIHRlcm1pbmFsQ29kZUV4ZWN1dGlvbl8xLlRlcm1pbmFsQ29kZUV4ZWN1dGlvblByb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHRlcm1pbmFsU2VydmljZUZhY3RvcnksIGNvbmZpZ3VyYXRpb25TZXJ2aWNlLCB3b3Jrc3BhY2UsIGRvY3VtZW50TWFuYWdlciwgcGxhdGZvcm1TZXJ2aWNlLCBjb21tYW5kTWFuYWdlciwgZmlsZVN5c3RlbSwgZGlzcG9zYWJsZVJlZ2lzdHJ5KSB7XHJcbiAgICAgICAgc3VwZXIodGVybWluYWxTZXJ2aWNlRmFjdG9yeSwgY29uZmlndXJhdGlvblNlcnZpY2UsIHdvcmtzcGFjZSwgZGlzcG9zYWJsZVJlZ2lzdHJ5LCBwbGF0Zm9ybVNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMudGVybWluYWxUaXRsZSA9ICdEamFuZ28gU2hlbGwnO1xyXG4gICAgICAgIGRpc3Bvc2FibGVSZWdpc3RyeS5wdXNoKG5ldyBkamFuZ29Db250ZXh0XzEuRGphbmdvQ29udGV4dEluaXRpYWxpemVyKGRvY3VtZW50TWFuYWdlciwgd29ya3NwYWNlLCBmaWxlU3lzdGVtLCBjb21tYW5kTWFuYWdlcikpO1xyXG4gICAgfVxyXG4gICAgZ2V0UmVwbENvbW1hbmRBcmdzKHJlc291cmNlKSB7XHJcbiAgICAgICAgY29uc3QgcHl0aG9uU2V0dGluZ3MgPSB0aGlzLmNvbmZpZ3VyYXRpb25TZXJ2aWNlLmdldFNldHRpbmdzKHJlc291cmNlKTtcclxuICAgICAgICBjb25zdCBjb21tYW5kID0gdGhpcy5wbGF0Zm9ybVNlcnZpY2UuaXNXaW5kb3dzID8gcHl0aG9uU2V0dGluZ3MucHl0aG9uUGF0aC5yZXBsYWNlKC9cXFxcL2csICcvJykgOiBweXRob25TZXR0aW5ncy5weXRob25QYXRoO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBweXRob25TZXR0aW5ncy50ZXJtaW5hbC5sYXVuY2hBcmdzLnNsaWNlKCk7XHJcbiAgICAgICAgY29uc3Qgd29ya3NwYWNlVXJpID0gcmVzb3VyY2UgPyB0aGlzLndvcmtzcGFjZS5nZXRXb3Jrc3BhY2VGb2xkZXIocmVzb3VyY2UpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRXb3Jrc3BhY2UgPSBBcnJheS5pc0FycmF5KHRoaXMud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnMpICYmIHRoaXMud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnMubGVuZ3RoID4gMCA/IHRoaXMud29ya3NwYWNlLndvcmtzcGFjZUZvbGRlcnNbMF0udXJpLmZzUGF0aCA6ICcnO1xyXG4gICAgICAgIGNvbnN0IHdvcmtzcGFjZVJvb3QgPSB3b3Jrc3BhY2VVcmkgPyB3b3Jrc3BhY2VVcmkudXJpLmZzUGF0aCA6IGRlZmF1bHRXb3Jrc3BhY2U7XHJcbiAgICAgICAgY29uc3QgbWFuYWdlUHlQYXRoID0gd29ya3NwYWNlUm9vdC5sZW5ndGggPT09IDAgPyAnbWFuYWdlLnB5JyA6IHBhdGguam9pbih3b3Jrc3BhY2VSb290LCAnbWFuYWdlLnB5Jyk7XHJcbiAgICAgICAgYXJncy5wdXNoKG1hbmFnZVB5UGF0aC5maWxlVG9Db21tYW5kQXJndW1lbnQoKSk7XHJcbiAgICAgICAgYXJncy5wdXNoKCdzaGVsbCcpO1xyXG4gICAgICAgIHJldHVybiB7IGNvbW1hbmQsIGFyZ3MgfTtcclxuICAgIH1cclxufTtcclxuRGphbmdvU2hlbGxDb2RlRXhlY3V0aW9uUHJvdmlkZXIgPSBfX2RlY29yYXRlKFtcclxuICAgIGludmVyc2lmeV8xLmluamVjdGFibGUoKSxcclxuICAgIF9fcGFyYW0oMCwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzMuSVRlcm1pbmFsU2VydmljZUZhY3RvcnkpKSxcclxuICAgIF9fcGFyYW0oMSwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzQuSUNvbmZpZ3VyYXRpb25TZXJ2aWNlKSksXHJcbiAgICBfX3BhcmFtKDIsIGludmVyc2lmeV8xLmluamVjdCh0eXBlc18xLklXb3Jrc3BhY2VTZXJ2aWNlKSksXHJcbiAgICBfX3BhcmFtKDMsIGludmVyc2lmeV8xLmluamVjdCh0eXBlc18xLklEb2N1bWVudE1hbmFnZXIpKSxcclxuICAgIF9fcGFyYW0oNCwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzIuSVBsYXRmb3JtU2VydmljZSkpLFxyXG4gICAgX19wYXJhbSg1LCBpbnZlcnNpZnlfMS5pbmplY3QodHlwZXNfMS5JQ29tbWFuZE1hbmFnZXIpKSxcclxuICAgIF9fcGFyYW0oNiwgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzIuSUZpbGVTeXN0ZW0pKSxcclxuICAgIF9fcGFyYW0oNywgaW52ZXJzaWZ5XzEuaW5qZWN0KHR5cGVzXzQuSURpc3Bvc2FibGVSZWdpc3RyeSkpXHJcbl0sIERqYW5nb1NoZWxsQ29kZUV4ZWN1dGlvblByb3ZpZGVyKTtcclxuZXhwb3J0cy5EamFuZ29TaGVsbENvZGVFeGVjdXRpb25Qcm92aWRlciA9IERqYW5nb1NoZWxsQ29kZUV4ZWN1dGlvblByb3ZpZGVyO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kamFuZ29TaGVsbENvZGVFeGVjdXRpb24uanMubWFwIl19