// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

class TextRangeCollection {
  constructor(items) {
    this.items = items;
  }

  get start() {
    return this.items.length > 0 ? this.items[0].start : 0;
  }

  get end() {
    return this.items.length > 0 ? this.items[this.items.length - 1].end : 0;
  }

  get length() {
    return this.end - this.start;
  }

  get count() {
    return this.items.length;
  }

  contains(position) {
    return position >= this.start && position < this.end;
  }

  getItemAt(index) {
    if (index < 0 || index >= this.items.length) {
      throw new Error('index is out of range');
    }

    return this.items[index];
  }

  getItemAtPosition(position) {
    if (this.count === 0) {
      return -1;
    }

    if (position < this.start) {
      return -1;
    }

    if (position >= this.end) {
      return -1;
    }

    let min = 0;
    let max = this.count - 1;

    while (min <= max) {
      const mid = Math.floor(min + (max - min) / 2);
      const item = this.items[mid];

      if (item.start === position) {
        return mid;
      }

      if (position < item.start) {
        max = mid - 1;
      } else {
        min = mid + 1;
      }
    }

    return -1;
  }

  getItemContaining(position) {
    if (this.count === 0) {
      return -1;
    }

    if (position < this.start) {
      return -1;
    }

    if (position > this.end) {
      return -1;
    }

    let min = 0;
    let max = this.count - 1;

    while (min <= max) {
      const mid = Math.floor(min + (max - min) / 2);
      const item = this.items[mid];

      if (item.contains(position)) {
        return mid;
      }

      if (mid < this.count - 1 && item.end <= position && position < this.items[mid + 1].start) {
        return -1;
      }

      if (position < item.start) {
        max = mid - 1;
      } else {
        min = mid + 1;
      }
    }

    return -1;
  }

}

exports.TextRangeCollection = TextRangeCollection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHRSYW5nZUNvbGxlY3Rpb24uanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJUZXh0UmFuZ2VDb2xsZWN0aW9uIiwiY29uc3RydWN0b3IiLCJpdGVtcyIsInN0YXJ0IiwibGVuZ3RoIiwiZW5kIiwiY291bnQiLCJjb250YWlucyIsInBvc2l0aW9uIiwiZ2V0SXRlbUF0IiwiaW5kZXgiLCJFcnJvciIsImdldEl0ZW1BdFBvc2l0aW9uIiwibWluIiwibWF4IiwibWlkIiwiTWF0aCIsImZsb29yIiwiaXRlbSIsImdldEl0ZW1Db250YWluaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0FBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFBRUMsRUFBQUEsS0FBSyxFQUFFO0FBQVQsQ0FBN0M7O0FBQ0EsTUFBTUMsbUJBQU4sQ0FBMEI7QUFDdEJDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2YsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0g7O0FBQ0QsTUFBSUMsS0FBSixHQUFZO0FBQ1IsV0FBTyxLQUFLRCxLQUFMLENBQVdFLE1BQVgsR0FBb0IsQ0FBcEIsR0FBd0IsS0FBS0YsS0FBTCxDQUFXLENBQVgsRUFBY0MsS0FBdEMsR0FBOEMsQ0FBckQ7QUFDSDs7QUFDRCxNQUFJRSxHQUFKLEdBQVU7QUFDTixXQUFPLEtBQUtILEtBQUwsQ0FBV0UsTUFBWCxHQUFvQixDQUFwQixHQUF3QixLQUFLRixLQUFMLENBQVcsS0FBS0EsS0FBTCxDQUFXRSxNQUFYLEdBQW9CLENBQS9CLEVBQWtDQyxHQUExRCxHQUFnRSxDQUF2RTtBQUNIOztBQUNELE1BQUlELE1BQUosR0FBYTtBQUNULFdBQU8sS0FBS0MsR0FBTCxHQUFXLEtBQUtGLEtBQXZCO0FBQ0g7O0FBQ0QsTUFBSUcsS0FBSixHQUFZO0FBQ1IsV0FBTyxLQUFLSixLQUFMLENBQVdFLE1BQWxCO0FBQ0g7O0FBQ0RHLEVBQUFBLFFBQVEsQ0FBQ0MsUUFBRCxFQUFXO0FBQ2YsV0FBT0EsUUFBUSxJQUFJLEtBQUtMLEtBQWpCLElBQTBCSyxRQUFRLEdBQUcsS0FBS0gsR0FBakQ7QUFDSDs7QUFDREksRUFBQUEsU0FBUyxDQUFDQyxLQUFELEVBQVE7QUFDYixRQUFJQSxLQUFLLEdBQUcsQ0FBUixJQUFhQSxLQUFLLElBQUksS0FBS1IsS0FBTCxDQUFXRSxNQUFyQyxFQUE2QztBQUN6QyxZQUFNLElBQUlPLEtBQUosQ0FBVSx1QkFBVixDQUFOO0FBQ0g7O0FBQ0QsV0FBTyxLQUFLVCxLQUFMLENBQVdRLEtBQVgsQ0FBUDtBQUNIOztBQUNERSxFQUFBQSxpQkFBaUIsQ0FBQ0osUUFBRCxFQUFXO0FBQ3hCLFFBQUksS0FBS0YsS0FBTCxLQUFlLENBQW5CLEVBQXNCO0FBQ2xCLGFBQU8sQ0FBQyxDQUFSO0FBQ0g7O0FBQ0QsUUFBSUUsUUFBUSxHQUFHLEtBQUtMLEtBQXBCLEVBQTJCO0FBQ3ZCLGFBQU8sQ0FBQyxDQUFSO0FBQ0g7O0FBQ0QsUUFBSUssUUFBUSxJQUFJLEtBQUtILEdBQXJCLEVBQTBCO0FBQ3RCLGFBQU8sQ0FBQyxDQUFSO0FBQ0g7O0FBQ0QsUUFBSVEsR0FBRyxHQUFHLENBQVY7QUFDQSxRQUFJQyxHQUFHLEdBQUcsS0FBS1IsS0FBTCxHQUFhLENBQXZCOztBQUNBLFdBQU9PLEdBQUcsSUFBSUMsR0FBZCxFQUFtQjtBQUNmLFlBQU1DLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdKLEdBQUcsR0FBRyxDQUFDQyxHQUFHLEdBQUdELEdBQVAsSUFBYyxDQUEvQixDQUFaO0FBQ0EsWUFBTUssSUFBSSxHQUFHLEtBQUtoQixLQUFMLENBQVdhLEdBQVgsQ0FBYjs7QUFDQSxVQUFJRyxJQUFJLENBQUNmLEtBQUwsS0FBZUssUUFBbkIsRUFBNkI7QUFDekIsZUFBT08sR0FBUDtBQUNIOztBQUNELFVBQUlQLFFBQVEsR0FBR1UsSUFBSSxDQUFDZixLQUFwQixFQUEyQjtBQUN2QlcsUUFBQUEsR0FBRyxHQUFHQyxHQUFHLEdBQUcsQ0FBWjtBQUNILE9BRkQsTUFHSztBQUNERixRQUFBQSxHQUFHLEdBQUdFLEdBQUcsR0FBRyxDQUFaO0FBQ0g7QUFDSjs7QUFDRCxXQUFPLENBQUMsQ0FBUjtBQUNIOztBQUNESSxFQUFBQSxpQkFBaUIsQ0FBQ1gsUUFBRCxFQUFXO0FBQ3hCLFFBQUksS0FBS0YsS0FBTCxLQUFlLENBQW5CLEVBQXNCO0FBQ2xCLGFBQU8sQ0FBQyxDQUFSO0FBQ0g7O0FBQ0QsUUFBSUUsUUFBUSxHQUFHLEtBQUtMLEtBQXBCLEVBQTJCO0FBQ3ZCLGFBQU8sQ0FBQyxDQUFSO0FBQ0g7O0FBQ0QsUUFBSUssUUFBUSxHQUFHLEtBQUtILEdBQXBCLEVBQXlCO0FBQ3JCLGFBQU8sQ0FBQyxDQUFSO0FBQ0g7O0FBQ0QsUUFBSVEsR0FBRyxHQUFHLENBQVY7QUFDQSxRQUFJQyxHQUFHLEdBQUcsS0FBS1IsS0FBTCxHQUFhLENBQXZCOztBQUNBLFdBQU9PLEdBQUcsSUFBSUMsR0FBZCxFQUFtQjtBQUNmLFlBQU1DLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdKLEdBQUcsR0FBRyxDQUFDQyxHQUFHLEdBQUdELEdBQVAsSUFBYyxDQUEvQixDQUFaO0FBQ0EsWUFBTUssSUFBSSxHQUFHLEtBQUtoQixLQUFMLENBQVdhLEdBQVgsQ0FBYjs7QUFDQSxVQUFJRyxJQUFJLENBQUNYLFFBQUwsQ0FBY0MsUUFBZCxDQUFKLEVBQTZCO0FBQ3pCLGVBQU9PLEdBQVA7QUFDSDs7QUFDRCxVQUFJQSxHQUFHLEdBQUcsS0FBS1QsS0FBTCxHQUFhLENBQW5CLElBQXdCWSxJQUFJLENBQUNiLEdBQUwsSUFBWUcsUUFBcEMsSUFBZ0RBLFFBQVEsR0FBRyxLQUFLTixLQUFMLENBQVdhLEdBQUcsR0FBRyxDQUFqQixFQUFvQlosS0FBbkYsRUFBMEY7QUFDdEYsZUFBTyxDQUFDLENBQVI7QUFDSDs7QUFDRCxVQUFJSyxRQUFRLEdBQUdVLElBQUksQ0FBQ2YsS0FBcEIsRUFBMkI7QUFDdkJXLFFBQUFBLEdBQUcsR0FBR0MsR0FBRyxHQUFHLENBQVo7QUFDSCxPQUZELE1BR0s7QUFDREYsUUFBQUEsR0FBRyxHQUFHRSxHQUFHLEdBQUcsQ0FBWjtBQUNIO0FBQ0o7O0FBQ0QsV0FBTyxDQUFDLENBQVI7QUFDSDs7QUFqRnFCOztBQW1GMUJqQixPQUFPLENBQUNFLG1CQUFSLEdBQThCQSxtQkFBOUIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY2xhc3MgVGV4dFJhbmdlQ29sbGVjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcihpdGVtcykge1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcclxuICAgIH1cclxuICAgIGdldCBzdGFydCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGggPiAwID8gdGhpcy5pdGVtc1swXS5zdGFydCA6IDA7XHJcbiAgICB9XHJcbiAgICBnZXQgZW5kKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aCA+IDAgPyB0aGlzLml0ZW1zW3RoaXMuaXRlbXMubGVuZ3RoIC0gMV0uZW5kIDogMDtcclxuICAgIH1cclxuICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5kIC0gdGhpcy5zdGFydDtcclxuICAgIH1cclxuICAgIGdldCBjb3VudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBjb250YWlucyhwb3NpdGlvbikge1xyXG4gICAgICAgIHJldHVybiBwb3NpdGlvbiA+PSB0aGlzLnN0YXJ0ICYmIHBvc2l0aW9uIDwgdGhpcy5lbmQ7XHJcbiAgICB9XHJcbiAgICBnZXRJdGVtQXQoaW5kZXgpIHtcclxuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW5kZXggaXMgb3V0IG9mIHJhbmdlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2luZGV4XTtcclxuICAgIH1cclxuICAgIGdldEl0ZW1BdFBvc2l0aW9uKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocG9zaXRpb24gPCB0aGlzLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID49IHRoaXMuZW5kKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG1pbiA9IDA7XHJcbiAgICAgICAgbGV0IG1heCA9IHRoaXMuY291bnQgLSAxO1xyXG4gICAgICAgIHdoaWxlIChtaW4gPD0gbWF4KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pZCA9IE1hdGguZmxvb3IobWluICsgKG1heCAtIG1pbikgLyAyKTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbXNbbWlkXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uc3RhcnQgPT09IHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWlkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8IGl0ZW0uc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIG1heCA9IG1pZCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtaW4gPSBtaWQgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxuICAgIGdldEl0ZW1Db250YWluaW5nKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocG9zaXRpb24gPCB0aGlzLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID4gdGhpcy5lbmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbWluID0gMDtcclxuICAgICAgICBsZXQgbWF4ID0gdGhpcy5jb3VudCAtIDE7XHJcbiAgICAgICAgd2hpbGUgKG1pbiA8PSBtYXgpIHtcclxuICAgICAgICAgICAgY29uc3QgbWlkID0gTWF0aC5mbG9vcihtaW4gKyAobWF4IC0gbWluKSAvIDIpO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5pdGVtc1ttaWRdO1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5jb250YWlucyhwb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1pZCA8IHRoaXMuY291bnQgLSAxICYmIGl0ZW0uZW5kIDw9IHBvc2l0aW9uICYmIHBvc2l0aW9uIDwgdGhpcy5pdGVtc1ttaWQgKyAxXS5zdGFydCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8IGl0ZW0uc3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIG1heCA9IG1pZCAtIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtaW4gPSBtaWQgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRleHRSYW5nZUNvbGxlY3Rpb24gPSBUZXh0UmFuZ2VDb2xsZWN0aW9uO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0UmFuZ2VDb2xsZWN0aW9uLmpzLm1hcCJdfQ==