// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const vscode_1 = require("vscode");

class TextIterator {
  constructor(text) {
    this.text = text;
  }

  charCodeAt(index) {
    if (index >= 0 && index < this.text.length) {
      return this.text.charCodeAt(index);
    }

    return 0;
  }

  get length() {
    return this.text.length;
  }

  getText() {
    return this.text;
  }

}

exports.TextIterator = TextIterator;

class DocumentTextIterator {
  constructor(document) {
    this.document = document;
    const lastIndex = this.document.lineCount - 1;
    const lastLine = this.document.lineAt(lastIndex);
    const end = new vscode_1.Position(lastIndex, lastLine.range.end.character);
    this.length = this.document.offsetAt(end);
  }

  charCodeAt(index) {
    const position = this.document.positionAt(index);
    return this.document.getText(new vscode_1.Range(position, position.translate(0, 1))).charCodeAt(position.character);
  }

  getText() {
    return this.document.getText();
  }

}

exports.DocumentTextIterator = DocumentTextIterator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHRJdGVyYXRvci5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZzY29kZV8xIiwicmVxdWlyZSIsIlRleHRJdGVyYXRvciIsImNvbnN0cnVjdG9yIiwidGV4dCIsImNoYXJDb2RlQXQiLCJpbmRleCIsImxlbmd0aCIsImdldFRleHQiLCJEb2N1bWVudFRleHRJdGVyYXRvciIsImRvY3VtZW50IiwibGFzdEluZGV4IiwibGluZUNvdW50IiwibGFzdExpbmUiLCJsaW5lQXQiLCJlbmQiLCJQb3NpdGlvbiIsInJhbmdlIiwiY2hhcmFjdGVyIiwib2Zmc2V0QXQiLCJwb3NpdGlvbiIsInBvc2l0aW9uQXQiLCJSYW5nZSIsInRyYW5zbGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsWUFBTixDQUFtQjtBQUNmQyxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBTztBQUNkLFNBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNIOztBQUNEQyxFQUFBQSxVQUFVLENBQUNDLEtBQUQsRUFBUTtBQUNkLFFBQUlBLEtBQUssSUFBSSxDQUFULElBQWNBLEtBQUssR0FBRyxLQUFLRixJQUFMLENBQVVHLE1BQXBDLEVBQTRDO0FBQ3hDLGFBQU8sS0FBS0gsSUFBTCxDQUFVQyxVQUFWLENBQXFCQyxLQUFyQixDQUFQO0FBQ0g7O0FBQ0QsV0FBTyxDQUFQO0FBQ0g7O0FBQ0QsTUFBSUMsTUFBSixHQUFhO0FBQ1QsV0FBTyxLQUFLSCxJQUFMLENBQVVHLE1BQWpCO0FBQ0g7O0FBQ0RDLEVBQUFBLE9BQU8sR0FBRztBQUNOLFdBQU8sS0FBS0osSUFBWjtBQUNIOztBQWZjOztBQWlCbkJOLE9BQU8sQ0FBQ0ksWUFBUixHQUF1QkEsWUFBdkI7O0FBQ0EsTUFBTU8sb0JBQU4sQ0FBMkI7QUFDdkJOLEVBQUFBLFdBQVcsQ0FBQ08sUUFBRCxFQUFXO0FBQ2xCLFNBQUtBLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsVUFBTUMsU0FBUyxHQUFHLEtBQUtELFFBQUwsQ0FBY0UsU0FBZCxHQUEwQixDQUE1QztBQUNBLFVBQU1DLFFBQVEsR0FBRyxLQUFLSCxRQUFMLENBQWNJLE1BQWQsQ0FBcUJILFNBQXJCLENBQWpCO0FBQ0EsVUFBTUksR0FBRyxHQUFHLElBQUlmLFFBQVEsQ0FBQ2dCLFFBQWIsQ0FBc0JMLFNBQXRCLEVBQWlDRSxRQUFRLENBQUNJLEtBQVQsQ0FBZUYsR0FBZixDQUFtQkcsU0FBcEQsQ0FBWjtBQUNBLFNBQUtYLE1BQUwsR0FBYyxLQUFLRyxRQUFMLENBQWNTLFFBQWQsQ0FBdUJKLEdBQXZCLENBQWQ7QUFDSDs7QUFDRFYsRUFBQUEsVUFBVSxDQUFDQyxLQUFELEVBQVE7QUFDZCxVQUFNYyxRQUFRLEdBQUcsS0FBS1YsUUFBTCxDQUFjVyxVQUFkLENBQXlCZixLQUF6QixDQUFqQjtBQUNBLFdBQU8sS0FBS0ksUUFBTCxDQUNGRixPQURFLENBQ00sSUFBSVIsUUFBUSxDQUFDc0IsS0FBYixDQUFtQkYsUUFBbkIsRUFBNkJBLFFBQVEsQ0FBQ0csU0FBVCxDQUFtQixDQUFuQixFQUFzQixDQUF0QixDQUE3QixDQUROLEVBRUZsQixVQUZFLENBRVNlLFFBQVEsQ0FBQ0YsU0FGbEIsQ0FBUDtBQUdIOztBQUNEVixFQUFBQSxPQUFPLEdBQUc7QUFDTixXQUFPLEtBQUtFLFFBQUwsQ0FBY0YsT0FBZCxFQUFQO0FBQ0g7O0FBaEJzQjs7QUFrQjNCVixPQUFPLENBQUNXLG9CQUFSLEdBQStCQSxvQkFBL0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jbGFzcyBUZXh0SXRlcmF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IodGV4dCkge1xyXG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XHJcbiAgICB9XHJcbiAgICBjaGFyQ29kZUF0KGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLnRleHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHQuY2hhckNvZGVBdChpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG4gICAgZ2V0IGxlbmd0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50ZXh0Lmxlbmd0aDtcclxuICAgIH1cclxuICAgIGdldFRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLlRleHRJdGVyYXRvciA9IFRleHRJdGVyYXRvcjtcclxuY2xhc3MgRG9jdW1lbnRUZXh0SXRlcmF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQpIHtcclxuICAgICAgICB0aGlzLmRvY3VtZW50ID0gZG9jdW1lbnQ7XHJcbiAgICAgICAgY29uc3QgbGFzdEluZGV4ID0gdGhpcy5kb2N1bWVudC5saW5lQ291bnQgLSAxO1xyXG4gICAgICAgIGNvbnN0IGxhc3RMaW5lID0gdGhpcy5kb2N1bWVudC5saW5lQXQobGFzdEluZGV4KTtcclxuICAgICAgICBjb25zdCBlbmQgPSBuZXcgdnNjb2RlXzEuUG9zaXRpb24obGFzdEluZGV4LCBsYXN0TGluZS5yYW5nZS5lbmQuY2hhcmFjdGVyKTtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQoZW5kKTtcclxuICAgIH1cclxuICAgIGNoYXJDb2RlQXQoaW5kZXgpIHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZG9jdW1lbnQucG9zaXRpb25BdChpbmRleCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldFRleHQobmV3IHZzY29kZV8xLlJhbmdlKHBvc2l0aW9uLCBwb3NpdGlvbi50cmFuc2xhdGUoMCwgMSkpKVxyXG4gICAgICAgICAgICAuY2hhckNvZGVBdChwb3NpdGlvbi5jaGFyYWN0ZXIpO1xyXG4gICAgfVxyXG4gICAgZ2V0VGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRUZXh0KCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Eb2N1bWVudFRleHRJdGVyYXRvciA9IERvY3VtZW50VGV4dEl0ZXJhdG9yO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0SXRlcmF0b3IuanMubWFwIl19