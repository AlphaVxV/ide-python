// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const assert = require("assert");

const textIterator_1 = require("../../client/language/textIterator"); // tslint:disable-next-line:max-func-body-length


suite('Language.TextIterator', () => {
  test('Construction', () => __awaiter(void 0, void 0, void 0, function* () {
    const content = 'some text';
    const ti = new textIterator_1.TextIterator(content);
    assert.equal(ti.length, content.length);
    assert.equal(ti.getText(), content);
  }));
  test('Iteration', () => __awaiter(void 0, void 0, void 0, function* () {
    const content = 'some text';
    const ti = new textIterator_1.TextIterator(content);

    for (let i = -2; i < content.length + 2; i += 1) {
      const ch = ti.charCodeAt(i);

      if (i < 0 || i >= content.length) {
        assert.equal(ch, 0);
      } else {
        assert.equal(ch, content.charCodeAt(i));
      }
    }
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHRJdGVyYXRvci50ZXN0LmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJhc3NlcnQiLCJyZXF1aXJlIiwidGV4dEl0ZXJhdG9yXzEiLCJzdWl0ZSIsInRlc3QiLCJjb250ZW50IiwidGkiLCJUZXh0SXRlcmF0b3IiLCJlcXVhbCIsImxlbmd0aCIsImdldFRleHQiLCJpIiwiY2giLCJjaGFyQ29kZUF0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFBeUI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDLE9BQUQsQ0FBVCxDQUFtQkssS0FBbkIsQ0FBRCxDQUFKO0FBQWtDLE9BQXhDLENBQXlDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZO0FBQUU7O0FBQzlGLGFBQVNGLElBQVQsQ0FBY0ksTUFBZCxFQUFzQjtBQUFFQSxNQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY1QsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBckIsR0FBc0MsSUFBSU4sQ0FBSixDQUFNLFVBQVVHLE9BQVYsRUFBbUI7QUFBRUEsUUFBQUEsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBUDtBQUF3QixPQUFuRCxFQUFxRE8sSUFBckQsQ0FBMERSLFNBQTFELEVBQXFFSyxRQUFyRSxDQUF0QztBQUF1SDs7QUFDL0lILElBQUFBLElBQUksQ0FBQyxDQUFDTixTQUFTLEdBQUdBLFNBQVMsQ0FBQ2EsS0FBVixDQUFnQmhCLE9BQWhCLEVBQXlCQyxVQUFVLElBQUksRUFBdkMsQ0FBYixFQUF5RFMsSUFBekQsRUFBRCxDQUFKO0FBQ0gsR0FMTSxDQUFQO0FBTUgsQ0FQRDs7QUFRQU8sTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFWCxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNWSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1DLGNBQWMsR0FBR0QsT0FBTyxDQUFDLG9DQUFELENBQTlCLEMsQ0FDQTs7O0FBQ0FFLEtBQUssQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2pDQyxFQUFBQSxJQUFJLENBQUMsY0FBRCxFQUFpQixNQUFNekIsU0FBUyxTQUFPLEtBQUssQ0FBWixFQUFlLEtBQUssQ0FBcEIsRUFBdUIsYUFBYTtBQUNwRSxVQUFNMEIsT0FBTyxHQUFHLFdBQWhCO0FBQ0EsVUFBTUMsRUFBRSxHQUFHLElBQUlKLGNBQWMsQ0FBQ0ssWUFBbkIsQ0FBZ0NGLE9BQWhDLENBQVg7QUFDQUwsSUFBQUEsTUFBTSxDQUFDUSxLQUFQLENBQWFGLEVBQUUsQ0FBQ0csTUFBaEIsRUFBd0JKLE9BQU8sQ0FBQ0ksTUFBaEM7QUFDQVQsSUFBQUEsTUFBTSxDQUFDUSxLQUFQLENBQWFGLEVBQUUsQ0FBQ0ksT0FBSCxFQUFiLEVBQTJCTCxPQUEzQjtBQUNILEdBTG1DLENBQWhDLENBQUo7QUFNQUQsRUFBQUEsSUFBSSxDQUFDLFdBQUQsRUFBYyxNQUFNekIsU0FBUyxTQUFPLEtBQUssQ0FBWixFQUFlLEtBQUssQ0FBcEIsRUFBdUIsYUFBYTtBQUNqRSxVQUFNMEIsT0FBTyxHQUFHLFdBQWhCO0FBQ0EsVUFBTUMsRUFBRSxHQUFHLElBQUlKLGNBQWMsQ0FBQ0ssWUFBbkIsQ0FBZ0NGLE9BQWhDLENBQVg7O0FBQ0EsU0FBSyxJQUFJTSxDQUFDLEdBQUcsQ0FBQyxDQUFkLEVBQWlCQSxDQUFDLEdBQUdOLE9BQU8sQ0FBQ0ksTUFBUixHQUFpQixDQUF0QyxFQUF5Q0UsQ0FBQyxJQUFJLENBQTlDLEVBQWlEO0FBQzdDLFlBQU1DLEVBQUUsR0FBR04sRUFBRSxDQUFDTyxVQUFILENBQWNGLENBQWQsQ0FBWDs7QUFDQSxVQUFJQSxDQUFDLEdBQUcsQ0FBSixJQUFTQSxDQUFDLElBQUlOLE9BQU8sQ0FBQ0ksTUFBMUIsRUFBa0M7QUFDOUJULFFBQUFBLE1BQU0sQ0FBQ1EsS0FBUCxDQUFhSSxFQUFiLEVBQWlCLENBQWpCO0FBQ0gsT0FGRCxNQUdLO0FBQ0RaLFFBQUFBLE1BQU0sQ0FBQ1EsS0FBUCxDQUFhSSxFQUFiLEVBQWlCUCxPQUFPLENBQUNRLFVBQVIsQ0FBbUJGLENBQW5CLENBQWpCO0FBQ0g7QUFDSjtBQUNKLEdBWmdDLENBQTdCLENBQUo7QUFhSCxDQXBCSSxDQUFMIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XHJcbmNvbnN0IHRleHRJdGVyYXRvcl8xID0gcmVxdWlyZShcIi4uLy4uL2NsaWVudC9sYW5ndWFnZS90ZXh0SXRlcmF0b3JcIik7XHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtZnVuYy1ib2R5LWxlbmd0aFxyXG5zdWl0ZSgnTGFuZ3VhZ2UuVGV4dEl0ZXJhdG9yJywgKCkgPT4ge1xyXG4gICAgdGVzdCgnQ29uc3RydWN0aW9uJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSAnc29tZSB0ZXh0JztcclxuICAgICAgICBjb25zdCB0aSA9IG5ldyB0ZXh0SXRlcmF0b3JfMS5UZXh0SXRlcmF0b3IoY29udGVudCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHRpLmxlbmd0aCwgY29udGVudC5sZW5ndGgpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbCh0aS5nZXRUZXh0KCksIGNvbnRlbnQpO1xyXG4gICAgfSkpO1xyXG4gICAgdGVzdCgnSXRlcmF0aW9uJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSAnc29tZSB0ZXh0JztcclxuICAgICAgICBjb25zdCB0aSA9IG5ldyB0ZXh0SXRlcmF0b3JfMS5UZXh0SXRlcmF0b3IoY29udGVudCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IC0yOyBpIDwgY29udGVudC5sZW5ndGggKyAyOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgY29uc3QgY2ggPSB0aS5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICBpZiAoaSA8IDAgfHwgaSA+PSBjb250ZW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGNoLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChjaCwgY29udGVudC5jaGFyQ29kZUF0KGkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pKTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHRJdGVyYXRvci50ZXN0LmpzLm1hcCJdfQ==