// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const assert = require("assert");

const textRangeCollection_1 = require("../../client/language/textRangeCollection");

const types_1 = require("../../client/language/types"); // tslint:disable-next-line:max-func-body-length


suite('Language.TextRangeCollection', () => {
  test('Empty', () => __awaiter(void 0, void 0, void 0, function* () {
    const items = [];
    const c = new textRangeCollection_1.TextRangeCollection(items);
    assert.equal(c.start, 0);
    assert.equal(c.end, 0);
    assert.equal(c.length, 0);
    assert.equal(c.count, 0);
  }));
  test('Basic', () => __awaiter(void 0, void 0, void 0, function* () {
    const items = [];
    items.push(new types_1.TextRange(2, 1));
    items.push(new types_1.TextRange(4, 2));
    const c = new textRangeCollection_1.TextRangeCollection(items);
    assert.equal(c.start, 2);
    assert.equal(c.end, 6);
    assert.equal(c.length, 4);
    assert.equal(c.count, 2);
    assert.equal(c.getItemAt(0).start, 2);
    assert.equal(c.getItemAt(0).length, 1);
    assert.equal(c.getItemAt(1).start, 4);
    assert.equal(c.getItemAt(1).length, 2);
  }));
  test('Contains position (simple)', () => __awaiter(void 0, void 0, void 0, function* () {
    const items = [];
    items.push(new types_1.TextRange(2, 1));
    items.push(new types_1.TextRange(4, 2));
    const c = new textRangeCollection_1.TextRangeCollection(items);
    const results = [-1, -1, 0, -1, 1, 1, -1];

    for (let i = 0; i < results.length; i += 1) {
      const index = c.getItemContaining(i);
      assert.equal(index, results[i]);
    }
  }));
  test('Contains position (adjoint)', () => __awaiter(void 0, void 0, void 0, function* () {
    const items = [];
    items.push(new types_1.TextRange(2, 1));
    items.push(new types_1.TextRange(3, 2));
    const c = new textRangeCollection_1.TextRangeCollection(items);
    const results = [-1, -1, 0, 1, 1, -1, -1];

    for (let i = 0; i < results.length; i += 1) {
      const index = c.getItemContaining(i);
      assert.equal(index, results[i]);
    }
  }));
  test('Contains position (out of range)', () => __awaiter(void 0, void 0, void 0, function* () {
    const items = [];
    items.push(new types_1.TextRange(2, 1));
    items.push(new types_1.TextRange(4, 2));
    const c = new textRangeCollection_1.TextRangeCollection(items);
    const positions = [-100, -1, 10, 100];

    for (const p of positions) {
      const index = c.getItemContaining(p);
      assert.equal(index, -1);
    }
  }));
  test('Contains position (empty)', () => __awaiter(void 0, void 0, void 0, function* () {
    const items = [];
    const c = new textRangeCollection_1.TextRangeCollection(items);
    const positions = [-2, -1, 0, 1, 2, 3];

    for (const p of positions) {
      const index = c.getItemContaining(p);
      assert.equal(index, -1);
    }
  }));
  test('Item at position', () => __awaiter(void 0, void 0, void 0, function* () {
    const items = [];
    items.push(new types_1.TextRange(2, 1));
    items.push(new types_1.TextRange(4, 2));
    const c = new textRangeCollection_1.TextRangeCollection(items);
    const results = [-1, -1, 0, -1, 1, -1, -1];

    for (let i = 0; i < results.length; i += 1) {
      const index = c.getItemAtPosition(i);
      assert.equal(index, results[i]);
    }
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRleHRSYW5nZUNvbGxlY3Rpb24udGVzdC5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiYXNzZXJ0IiwicmVxdWlyZSIsInRleHRSYW5nZUNvbGxlY3Rpb25fMSIsInR5cGVzXzEiLCJzdWl0ZSIsInRlc3QiLCJpdGVtcyIsImMiLCJUZXh0UmFuZ2VDb2xsZWN0aW9uIiwiZXF1YWwiLCJzdGFydCIsImVuZCIsImxlbmd0aCIsImNvdW50IiwicHVzaCIsIlRleHRSYW5nZSIsImdldEl0ZW1BdCIsInJlc3VsdHMiLCJpIiwiaW5kZXgiLCJnZXRJdGVtQ29udGFpbmluZyIsInBvc2l0aW9ucyIsInAiLCJnZXRJdGVtQXRQb3NpdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBLElBQUlBLFNBQVMsR0FBSSxVQUFRLFNBQUtBLFNBQWQsSUFBNEIsVUFBVUMsT0FBVixFQUFtQkMsVUFBbkIsRUFBK0JDLENBQS9CLEVBQWtDQyxTQUFsQyxFQUE2QztBQUNyRixTQUFPLEtBQUtELENBQUMsS0FBS0EsQ0FBQyxHQUFHRSxPQUFULENBQU4sRUFBeUIsVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDdkQsYUFBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDTyxJQUFWLENBQWVGLEtBQWYsQ0FBRCxDQUFKO0FBQThCLE9BQXBDLENBQXFDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZ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Q0FBZDtBQUNBbEIsTUFBQUEsTUFBTSxDQUFDUyxLQUFQLENBQWFVLEtBQWIsRUFBb0JGLE9BQU8sQ0FBQ0MsQ0FBRCxDQUEzQjtBQUNIO0FBQ0osR0FWdUMsQ0FBcEMsQ0FBSjtBQVdILENBNUVJLENBQUwiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcclxuY29uc3QgdGV4dFJhbmdlQ29sbGVjdGlvbl8xID0gcmVxdWlyZShcIi4uLy4uL2NsaWVudC9sYW5ndWFnZS90ZXh0UmFuZ2VDb2xsZWN0aW9uXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uL2NsaWVudC9sYW5ndWFnZS90eXBlc1wiKTtcclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1mdW5jLWJvZHktbGVuZ3RoXHJcbnN1aXRlKCdMYW5ndWFnZS5UZXh0UmFuZ2VDb2xsZWN0aW9uJywgKCkgPT4ge1xyXG4gICAgdGVzdCgnRW1wdHknLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcclxuICAgICAgICBjb25zdCBjID0gbmV3IHRleHRSYW5nZUNvbGxlY3Rpb25fMS5UZXh0UmFuZ2VDb2xsZWN0aW9uKGl0ZW1zKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYy5zdGFydCwgMCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGMuZW5kLCAwKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYy5sZW5ndGgsIDApO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChjLmNvdW50LCAwKTtcclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ0Jhc2ljJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XHJcbiAgICAgICAgaXRlbXMucHVzaChuZXcgdHlwZXNfMS5UZXh0UmFuZ2UoMiwgMSkpO1xyXG4gICAgICAgIGl0ZW1zLnB1c2gobmV3IHR5cGVzXzEuVGV4dFJhbmdlKDQsIDIpKTtcclxuICAgICAgICBjb25zdCBjID0gbmV3IHRleHRSYW5nZUNvbGxlY3Rpb25fMS5UZXh0UmFuZ2VDb2xsZWN0aW9uKGl0ZW1zKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYy5zdGFydCwgMik7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGMuZW5kLCA2KTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYy5sZW5ndGgsIDQpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChjLmNvdW50LCAyKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoYy5nZXRJdGVtQXQoMCkuc3RhcnQsIDIpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChjLmdldEl0ZW1BdCgwKS5sZW5ndGgsIDEpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChjLmdldEl0ZW1BdCgxKS5zdGFydCwgNCk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGMuZ2V0SXRlbUF0KDEpLmxlbmd0aCwgMik7XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdDb250YWlucyBwb3NpdGlvbiAoc2ltcGxlKScsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xyXG4gICAgICAgIGl0ZW1zLnB1c2gobmV3IHR5cGVzXzEuVGV4dFJhbmdlKDIsIDEpKTtcclxuICAgICAgICBpdGVtcy5wdXNoKG5ldyB0eXBlc18xLlRleHRSYW5nZSg0LCAyKSk7XHJcbiAgICAgICAgY29uc3QgYyA9IG5ldyB0ZXh0UmFuZ2VDb2xsZWN0aW9uXzEuVGV4dFJhbmdlQ29sbGVjdGlvbihpdGVtcyk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IFstMSwgLTEsIDAsIC0xLCAxLCAxLCAtMV07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYy5nZXRJdGVtQ29udGFpbmluZyhpKTtcclxuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGluZGV4LCByZXN1bHRzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdDb250YWlucyBwb3NpdGlvbiAoYWRqb2ludCknLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcclxuICAgICAgICBpdGVtcy5wdXNoKG5ldyB0eXBlc18xLlRleHRSYW5nZSgyLCAxKSk7XHJcbiAgICAgICAgaXRlbXMucHVzaChuZXcgdHlwZXNfMS5UZXh0UmFuZ2UoMywgMikpO1xyXG4gICAgICAgIGNvbnN0IGMgPSBuZXcgdGV4dFJhbmdlQ29sbGVjdGlvbl8xLlRleHRSYW5nZUNvbGxlY3Rpb24oaXRlbXMpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBbLTEsIC0xLCAwLCAxLCAxLCAtMSwgLTFdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGMuZ2V0SXRlbUNvbnRhaW5pbmcoaSk7XHJcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChpbmRleCwgcmVzdWx0c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSkpO1xyXG4gICAgdGVzdCgnQ29udGFpbnMgcG9zaXRpb24gKG91dCBvZiByYW5nZSknLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcclxuICAgICAgICBpdGVtcy5wdXNoKG5ldyB0eXBlc18xLlRleHRSYW5nZSgyLCAxKSk7XHJcbiAgICAgICAgaXRlbXMucHVzaChuZXcgdHlwZXNfMS5UZXh0UmFuZ2UoNCwgMikpO1xyXG4gICAgICAgIGNvbnN0IGMgPSBuZXcgdGV4dFJhbmdlQ29sbGVjdGlvbl8xLlRleHRSYW5nZUNvbGxlY3Rpb24oaXRlbXMpO1xyXG4gICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IFstMTAwLCAtMSwgMTAsIDEwMF07XHJcbiAgICAgICAgZm9yIChjb25zdCBwIG9mIHBvc2l0aW9ucykge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGMuZ2V0SXRlbUNvbnRhaW5pbmcocCk7XHJcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChpbmRleCwgLTEpO1xyXG4gICAgICAgIH1cclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ0NvbnRhaW5zIHBvc2l0aW9uIChlbXB0eSknLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcclxuICAgICAgICBjb25zdCBjID0gbmV3IHRleHRSYW5nZUNvbGxlY3Rpb25fMS5UZXh0UmFuZ2VDb2xsZWN0aW9uKGl0ZW1zKTtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBbLTIsIC0xLCAwLCAxLCAyLCAzXTtcclxuICAgICAgICBmb3IgKGNvbnN0IHAgb2YgcG9zaXRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gYy5nZXRJdGVtQ29udGFpbmluZyhwKTtcclxuICAgICAgICAgICAgYXNzZXJ0LmVxdWFsKGluZGV4LCAtMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSkpO1xyXG4gICAgdGVzdCgnSXRlbSBhdCBwb3NpdGlvbicsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xyXG4gICAgICAgIGl0ZW1zLnB1c2gobmV3IHR5cGVzXzEuVGV4dFJhbmdlKDIsIDEpKTtcclxuICAgICAgICBpdGVtcy5wdXNoKG5ldyB0eXBlc18xLlRleHRSYW5nZSg0LCAyKSk7XHJcbiAgICAgICAgY29uc3QgYyA9IG5ldyB0ZXh0UmFuZ2VDb2xsZWN0aW9uXzEuVGV4dFJhbmdlQ29sbGVjdGlvbihpdGVtcyk7XHJcbiAgICAgICAgY29uc3QgcmVzdWx0cyA9IFstMSwgLTEsIDAsIC0xLCAxLCAtMSwgLTFdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGMuZ2V0SXRlbUF0UG9zaXRpb24oaSk7XHJcbiAgICAgICAgICAgIGFzc2VydC5lcXVhbChpbmRleCwgcmVzdWx0c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSkpO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dFJhbmdlQ29sbGVjdGlvbi50ZXN0LmpzLm1hcCJdfQ==