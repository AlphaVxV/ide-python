"use strict";

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const events_1 = require("events");

require("rxjs/add/observable/of");

const Observable_1 = require("rxjs/Observable");

exports.IOriginalProcessService = Symbol('IProcessService');

class MockProcessService extends events_1.EventEmitter {
  constructor(procService) {
    super();
    this.procService = procService;
  }

  onExecObservable(handler) {
    this.on('execObservable', handler);
  }

  execObservable(file, args, options = {}) {
    let value;
    let valueReturned = false;
    this.emit('execObservable', file, args, options, result => {
      value = result;
      valueReturned = true;
    });

    if (valueReturned) {
      const output = value;

      if (['stderr', 'stdout'].some(source => source === output.source)) {
        return {
          // tslint:disable-next-line:no-any
          proc: {},
          out: Observable_1.Observable.of(output)
        };
      } else {
        return {
          // tslint:disable-next-line:no-any
          proc: {},
          out: value
        };
      }
    } else {
      return this.procService.execObservable(file, args, options);
    }
  }

  onExec(handler) {
    this.on('exec', handler);
  }

  exec(file, args, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
      let value;
      let valueReturned = false;
      this.emit('exec', file, args, options, result => {
        value = result;
        valueReturned = true;
      });
      return valueReturned ? value : this.procService.exec(file, args, options);
    });
  }

}

exports.MockProcessService = MockProcessService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2MuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImV2ZW50c18xIiwicmVxdWlyZSIsIk9ic2VydmFibGVfMSIsIklPcmlnaW5hbFByb2Nlc3NTZXJ2aWNlIiwiU3ltYm9sIiwiTW9ja1Byb2Nlc3NTZXJ2aWNlIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJwcm9jU2VydmljZSIsIm9uRXhlY09ic2VydmFibGUiLCJoYW5kbGVyIiwib24iLCJleGVjT2JzZXJ2YWJsZSIsImZpbGUiLCJhcmdzIiwib3B0aW9ucyIsInZhbHVlUmV0dXJuZWQiLCJlbWl0Iiwib3V0cHV0Iiwic29tZSIsInNvdXJjZSIsInByb2MiLCJvdXQiLCJPYnNlcnZhYmxlIiwib2YiLCJvbkV4ZWMiLCJleGVjIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEs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QUE1QyxDQUFQO0FBQ0g7QUFDSjs7QUFDRFUsRUFBQUEsTUFBTSxDQUFDZixPQUFELEVBQVU7QUFDWixTQUFLQyxFQUFMLENBQVEsTUFBUixFQUFnQkQsT0FBaEI7QUFDSDs7QUFDRGdCLEVBQUFBLElBQUksQ0FBQ2IsSUFBRCxFQUFPQyxJQUFQLEVBQWFDLE9BQU8sR0FBRyxFQUF2QixFQUEyQjtBQUMzQixXQUFPcEMsU0FBUyxDQUFDLElBQUQsRUFBTyxLQUFLLENBQVosRUFBZSxLQUFLLENBQXBCLEVBQXVCLGFBQWE7QUFDaEQsVUFBSVMsS0FBSjtBQUNBLFVBQUk0QixhQUFhLEdBQUcsS0FBcEI7QUFDQSxXQUFLQyxJQUFMLENBQVUsTUFBVixFQUFrQkosSUFBbEIsRUFBd0JDLElBQXhCLEVBQThCQyxPQUE5QixFQUF3Q3RCLE1BQUQsSUFBWTtBQUFFTCxRQUFBQSxLQUFLLEdBQUdLLE1BQVI7QUFBZ0J1QixRQUFBQSxhQUFhLEdBQUcsSUFBaEI7QUFBdUIsT0FBNUY7QUFDQSxhQUFPQSxhQUFhLEdBQUc1QixLQUFILEdBQVcsS0FBS29CLFdBQUwsQ0FBaUJrQixJQUFqQixDQUFzQmIsSUFBdEIsRUFBNEJDLElBQTVCLEVBQWtDQyxPQUFsQyxDQUEvQjtBQUNILEtBTGUsQ0FBaEI7QUFNSDs7QUEzQ2tEOztBQTZDdkRoQixPQUFPLENBQUNNLGtCQUFSLEdBQTZCQSxrQkFBN0IiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XHJcbnJlcXVpcmUoXCJyeGpzL2FkZC9vYnNlcnZhYmxlL29mXCIpO1xyXG5jb25zdCBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwicnhqcy9PYnNlcnZhYmxlXCIpO1xyXG5leHBvcnRzLklPcmlnaW5hbFByb2Nlc3NTZXJ2aWNlID0gU3ltYm9sKCdJUHJvY2Vzc1NlcnZpY2UnKTtcclxuY2xhc3MgTW9ja1Byb2Nlc3NTZXJ2aWNlIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByb2NTZXJ2aWNlKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnByb2NTZXJ2aWNlID0gcHJvY1NlcnZpY2U7XHJcbiAgICB9XHJcbiAgICBvbkV4ZWNPYnNlcnZhYmxlKGhhbmRsZXIpIHtcclxuICAgICAgICB0aGlzLm9uKCdleGVjT2JzZXJ2YWJsZScsIGhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZXhlY09ic2VydmFibGUoZmlsZSwgYXJncywgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgbGV0IHZhbHVlO1xyXG4gICAgICAgIGxldCB2YWx1ZVJldHVybmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdleGVjT2JzZXJ2YWJsZScsIGZpbGUsIGFyZ3MsIG9wdGlvbnMsIChyZXN1bHQpID0+IHsgdmFsdWUgPSByZXN1bHQ7IHZhbHVlUmV0dXJuZWQgPSB0cnVlOyB9KTtcclxuICAgICAgICBpZiAodmFsdWVSZXR1cm5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWYgKFsnc3RkZXJyJywgJ3N0ZG91dCddLnNvbWUoc291cmNlID0+IHNvdXJjZSA9PT0gb3V0cHV0LnNvdXJjZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2M6IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIG91dDogT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUub2Yob3V0cHV0KVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgICAgICAgICAgICAgIHByb2M6IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIG91dDogdmFsdWVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2NTZXJ2aWNlLmV4ZWNPYnNlcnZhYmxlKGZpbGUsIGFyZ3MsIG9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uRXhlYyhoYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5vbignZXhlYycsIGhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZXhlYyhmaWxlLCBhcmdzLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWU7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZVJldHVybmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXhlYycsIGZpbGUsIGFyZ3MsIG9wdGlvbnMsIChyZXN1bHQpID0+IHsgdmFsdWUgPSByZXN1bHQ7IHZhbHVlUmV0dXJuZWQgPSB0cnVlOyB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlUmV0dXJuZWQgPyB2YWx1ZSA6IHRoaXMucHJvY1NlcnZpY2UuZXhlYyhmaWxlLCBhcmdzLCBvcHRpb25zKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1vY2tQcm9jZXNzU2VydmljZSA9IE1vY2tQcm9jZXNzU2VydmljZTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvYy5qcy5tYXAiXX0=