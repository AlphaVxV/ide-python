// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-any

const TypeMoq = require("typemoq");

const vscode_1 = require("vscode");

const types_1 = require("../../../../client/common/types");

const enum_1 = require("../../../../client/common/utils/enum");

const constants_1 = require("../../../../client/unittests/common/constants");

const testConfigurationManager_1 = require("../../../../client/unittests/common/managers/testConfigurationManager");

const types_2 = require("../../../../client/unittests/common/types");

class MockTestConfigurationManager extends testConfigurationManager_1.TestConfigurationManager {
  requiresUserToConfigure(wkspace) {
    throw new Error('Method not implemented.');
  }

  configure(wkspace) {
    throw new Error('Method not implemented.');
  }

}

suite('Unit Test Configuration Manager (unit)', () => {
  [types_1.Product.pytest, types_1.Product.unittest, types_1.Product.nosetest].forEach(product => {
    const prods = enum_1.getNamesAndValues(types_1.Product);
    const productName = prods.filter(item => item.value === product)[0];
    suite(productName.name, () => {
      const workspaceUri = vscode_1.Uri.file(__dirname);
      let manager;
      let configService;
      setup(() => {
        configService = TypeMoq.Mock.ofType();
        const outputChannel = TypeMoq.Mock.ofType().object;
        const installer = TypeMoq.Mock.ofType().object;
        const serviceContainer = TypeMoq.Mock.ofType();
        serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.IOutputChannel), TypeMoq.It.isValue(constants_1.TEST_OUTPUT_CHANNEL))).returns(() => outputChannel);
        serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_2.ITestConfigSettingsService))).returns(() => configService.object);
        serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.IInstaller))).returns(() => installer);
        manager = new MockTestConfigurationManager(workspaceUri, product, serviceContainer.object);
      });
      test('Enabling a test product shoud disable other products', () => __awaiter(void 0, void 0, void 0, function* () {
        const testProducsToDisable = [types_1.Product.pytest, types_1.Product.unittest, types_1.Product.nosetest].filter(item => item !== product);
        testProducsToDisable.forEach(productToDisable => {
          configService.setup(c => c.disable(TypeMoq.It.isValue(workspaceUri), TypeMoq.It.isValue(productToDisable))).returns(() => Promise.resolve(undefined)).verifiable(TypeMoq.Times.once());
        });
        configService.setup(c => c.enable(TypeMoq.It.isValue(workspaceUri), TypeMoq.It.isValue(product))).returns(() => Promise.resolve(undefined)).verifiable(TypeMoq.Times.once());
        yield manager.enable();
        configService.verifyAll();
      }));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RDb25maWd1cmF0aW9uTWFuYWdlci51bml0LnRlc3QuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsIlR5cGVNb3EiLCJyZXF1aXJlIiwidnNjb2RlXzEiLCJ0eXBlc18xIiwiZW51bV8xIiwiY29uc3RhbnRzXzEiLCJ0ZXN0Q29uZmlndXJhdGlvbk1hbmFnZXJfMSIsInR5cGVzXzIiLCJNb2NrVGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyIiwiVGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyIiwicmVxdWlyZXNVc2VyVG9Db25maWd1cmUiLCJ3a3NwYWNlIiwiRXJyb3IiLCJjb25maWd1cmUiLCJzdWl0ZSIsIlByb2R1Y3QiLCJweXRlc3QiLCJ1bml0dGVzdCIsIm5vc2V0ZXN0IiwiZm9yRWFjaCIsInByb2R1Y3QiLCJwcm9kcyIsImdldE5hbWVzQW5kVmFsdWVzIiwicHJvZHVjdE5hbWUiLCJmaWx0ZXIiLCJpdGVtIiwibmFtZSIsIndvcmtzcGFjZVVyaSIsIlVyaSIsImZpbGUiLCJfX2Rpcm5hbWUiLCJtYW5hZ2VyIiwiY29uZmlnU2VydmljZSIsInNldHVwIiwiTW9jayIsIm9mVHlwZSIsIm91dHB1dENoYW5uZWwiLCJvYmplY3QiLCJpbnN0YWxsZXIiLCJzZXJ2aWNlQ29udGFpbmVyIiwicyIsImdldCIsIkl0IiwiaXNWYWx1ZSIsIklPdXRwdXRDaGFubmVsIiwiVEVTVF9PVVRQVVRfQ0hBTk5FTCIsInJldHVybnMiLCJJVGVzdENvbmZpZ1NldHRpbmdzU2VydmljZSIsIklJbnN0YWxsZXIiLCJ0ZXN0IiwidGVzdFByb2R1Y3NUb0Rpc2FibGUiLCJwcm9kdWN0VG9EaXNhYmxlIiwiYyIsImRpc2FibGUiLCJ1bmRlZmluZWQiLCJ2ZXJpZmlhYmxlIiwiVGltZXMiLCJvbmNlIiwiZW5hYmxlIiwidmVyaWZ5QWxsIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFBeUI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDLE9BQUQsQ0FBVCxDQUFtQkssS0FBbkIsQ0FBRCxDQUFKO0FBQWtDLE9BQXhDLENBQXlDLE9BQU9HLENBQVAsRUFBVTtBQUFFTCxRQUFBQSxNQUFNLENBQUNLLENBQUQsQ0FBTjtBQUFZO0FBQUU7O0FBQzlGLGFBQVNGLElBQVQsQ0FBY0ksTUFBZCxFQUFzQjtBQUFFQSxNQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY1QsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBckIsR0FBc0MsSUFBSU4sQ0FBSixDQUFNLFVBQVVHLE9BQVYsRUFBbUI7QUFBRUEsUUFBQUEsT0FBTyxDQUFDUSxNQUFNLENBQUNMLEtBQVIsQ0FBUDtBQUF3QixPQUFuRCxFQUFxRE8sSUFB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QVdDLE9BQVgsQ0FBbUJoQixZQUFuQixDQUFWLEVBQTRDM0IsT0FBTyxDQUFDMEMsRUFBUixDQUFXQyxPQUFYLENBQW1CUSxnQkFBbkIsQ0FBNUMsQ0FBekIsRUFDS0wsT0FETCxDQUNhLE1BQU05RCxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JxRSxTQUFoQixDQURuQixFQUVLQyxVQUZMLENBRWdCdkQsT0FBTyxDQUFDd0QsS0FBUixDQUFjQyxJQUFkLEVBRmhCO0FBR0gsU0FKRDtBQUtBekIsUUFBQUEsYUFBYSxDQUFDQyxLQUFkLENBQW9CbUIsQ0FBQyxJQUFJQSxDQUFDLENBQUNNLE1BQUYsQ0FBUzFELE9BQU8sQ0FBQzBDLEVBQVIsQ0FBV0MsT0FBWCxDQUFtQmhCLFlBQW5CLENBQVQsRUFBMkMzQixPQUFPLENBQUMwQyxFQUFSLENBQVdDLE9BQVgsQ0FBbUJ2QixPQUFuQixDQUEzQyxDQUF6QixFQUNLMEIsT0FETCxDQUNhLE1BQU05RCxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JxRSxTQUFoQixDQURuQixFQUVLQyxVQUZMLENBRWdCdkQsT0FBTyxDQUFDd0QsS0FBUixDQUFjQyxJQUFkLEVBRmhCO0FBR0EsY0FBTTFCLE9BQU8sQ0FBQzJCLE1BQVIsRUFBTjtBQUNBMUIsUUFBQUEsYUFBYSxDQUFDMkIsU0FBZDtBQUNILE9BYjJFLENBQXhFLENBQUo7QUFjSCxLQTVCSSxDQUFMO0FBNkJILEdBaENEO0FBaUNILENBbENJLENBQUwiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy8gdHNsaW50OmRpc2FibGU6bm8tYW55XHJcbmNvbnN0IFR5cGVNb3EgPSByZXF1aXJlKFwidHlwZW1vcVwiKTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NsaWVudC9jb21tb24vdHlwZXNcIik7XHJcbmNvbnN0IGVudW1fMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvY29tbW9uL3V0aWxzL2VudW1cIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NsaWVudC91bml0dGVzdHMvY29tbW9uL2NvbnN0YW50c1wiKTtcclxuY29uc3QgdGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vY2xpZW50L3VuaXR0ZXN0cy9jb21tb24vbWFuYWdlcnMvdGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyXCIpO1xyXG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NsaWVudC91bml0dGVzdHMvY29tbW9uL3R5cGVzXCIpO1xyXG5jbGFzcyBNb2NrVGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyIGV4dGVuZHMgdGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyXzEuVGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyIHtcclxuICAgIHJlcXVpcmVzVXNlclRvQ29uZmlndXJlKHdrc3BhY2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9XHJcbiAgICBjb25maWd1cmUod2tzcGFjZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICAgIH1cclxufVxyXG5zdWl0ZSgnVW5pdCBUZXN0IENvbmZpZ3VyYXRpb24gTWFuYWdlciAodW5pdCknLCAoKSA9PiB7XHJcbiAgICBbdHlwZXNfMS5Qcm9kdWN0LnB5dGVzdCwgdHlwZXNfMS5Qcm9kdWN0LnVuaXR0ZXN0LCB0eXBlc18xLlByb2R1Y3Qubm9zZXRlc3RdLmZvckVhY2gocHJvZHVjdCA9PiB7XHJcbiAgICAgICAgY29uc3QgcHJvZHMgPSBlbnVtXzEuZ2V0TmFtZXNBbmRWYWx1ZXModHlwZXNfMS5Qcm9kdWN0KTtcclxuICAgICAgICBjb25zdCBwcm9kdWN0TmFtZSA9IHByb2RzLmZpbHRlcihpdGVtID0+IGl0ZW0udmFsdWUgPT09IHByb2R1Y3QpWzBdO1xyXG4gICAgICAgIHN1aXRlKHByb2R1Y3ROYW1lLm5hbWUsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgd29ya3NwYWNlVXJpID0gdnNjb2RlXzEuVXJpLmZpbGUoX19kaXJuYW1lKTtcclxuICAgICAgICAgICAgbGV0IG1hbmFnZXI7XHJcbiAgICAgICAgICAgIGxldCBjb25maWdTZXJ2aWNlO1xyXG4gICAgICAgICAgICBzZXR1cCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25maWdTZXJ2aWNlID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0Q2hhbm5lbCA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKS5vYmplY3Q7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbnN0YWxsZXIgPSBUeXBlTW9xLk1vY2sub2ZUeXBlKCkub2JqZWN0O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZUNvbnRhaW5lciA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICAgICAgICAgIHNlcnZpY2VDb250YWluZXIuc2V0dXAocyA9PiBzLmdldChUeXBlTW9xLkl0LmlzVmFsdWUodHlwZXNfMS5JT3V0cHV0Q2hhbm5lbCksIFR5cGVNb3EuSXQuaXNWYWx1ZShjb25zdGFudHNfMS5URVNUX09VVFBVVF9DSEFOTkVMKSkpLnJldHVybnMoKCkgPT4gb3V0cHV0Q2hhbm5lbCk7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlQ29udGFpbmVyLnNldHVwKHMgPT4gcy5nZXQoVHlwZU1vcS5JdC5pc1ZhbHVlKHR5cGVzXzIuSVRlc3RDb25maWdTZXR0aW5nc1NlcnZpY2UpKSkucmV0dXJucygoKSA9PiBjb25maWdTZXJ2aWNlLm9iamVjdCk7XHJcbiAgICAgICAgICAgICAgICBzZXJ2aWNlQ29udGFpbmVyLnNldHVwKHMgPT4gcy5nZXQoVHlwZU1vcS5JdC5pc1ZhbHVlKHR5cGVzXzEuSUluc3RhbGxlcikpKS5yZXR1cm5zKCgpID0+IGluc3RhbGxlcik7XHJcbiAgICAgICAgICAgICAgICBtYW5hZ2VyID0gbmV3IE1vY2tUZXN0Q29uZmlndXJhdGlvbk1hbmFnZXIod29ya3NwYWNlVXJpLCBwcm9kdWN0LCBzZXJ2aWNlQ29udGFpbmVyLm9iamVjdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0ZXN0KCdFbmFibGluZyBhIHRlc3QgcHJvZHVjdCBzaG91ZCBkaXNhYmxlIG90aGVyIHByb2R1Y3RzJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVzdFByb2R1Y3NUb0Rpc2FibGUgPSBbdHlwZXNfMS5Qcm9kdWN0LnB5dGVzdCwgdHlwZXNfMS5Qcm9kdWN0LnVuaXR0ZXN0LCB0eXBlc18xLlByb2R1Y3Qubm9zZXRlc3RdXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IHByb2R1Y3QpO1xyXG4gICAgICAgICAgICAgICAgdGVzdFByb2R1Y3NUb0Rpc2FibGUuZm9yRWFjaChwcm9kdWN0VG9EaXNhYmxlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maWdTZXJ2aWNlLnNldHVwKGMgPT4gYy5kaXNhYmxlKFR5cGVNb3EuSXQuaXNWYWx1ZSh3b3Jrc3BhY2VVcmkpLCBUeXBlTW9xLkl0LmlzVmFsdWUocHJvZHVjdFRvRGlzYWJsZSkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAucmV0dXJucygoKSA9PiBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnZlcmlmaWFibGUoVHlwZU1vcS5UaW1lcy5vbmNlKCkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25maWdTZXJ2aWNlLnNldHVwKGMgPT4gYy5lbmFibGUoVHlwZU1vcS5JdC5pc1ZhbHVlKHdvcmtzcGFjZVVyaSksIFR5cGVNb3EuSXQuaXNWYWx1ZShwcm9kdWN0KSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJldHVybnMoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnZlcmlmaWFibGUoVHlwZU1vcS5UaW1lcy5vbmNlKCkpO1xyXG4gICAgICAgICAgICAgICAgeWllbGQgbWFuYWdlci5lbmFibGUoKTtcclxuICAgICAgICAgICAgICAgIGNvbmZpZ1NlcnZpY2UudmVyaWZ5QWxsKCk7XHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGVzdENvbmZpZ3VyYXRpb25NYW5hZ2VyLnVuaXQudGVzdC5qcy5tYXAiXX0=