// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const chai_1 = require("chai");

const path = require("path");

const typeMoq = require("typemoq");

const types_1 = require("../../../client/common/types");

const argumentsHelper_1 = require("../../../client/unittests/common/argumentsHelper");

const argsService_1 = require("../../../client/unittests/nosetest/services/argsService");

const types_2 = require("../../../client/unittests/types");

suite('ArgsService: nosetest', () => {
  let argumentsService;
  suiteSetup(() => {
    const serviceContainer = typeMoq.Mock.ofType();
    const logger = typeMoq.Mock.ofType();
    serviceContainer.setup(s => s.get(typeMoq.It.isValue(types_1.ILogger), typeMoq.It.isAny())).returns(() => logger.object);
    const argsHelper = new argumentsHelper_1.ArgumentsHelper(serviceContainer.object);
    serviceContainer.setup(s => s.get(typeMoq.It.isValue(types_2.IArgumentsHelper), typeMoq.It.isAny())).returns(() => argsHelper);
    argumentsService = new argsService_1.ArgumentsService(serviceContainer.object);
  });
  test('Test getting the test folder in nosetest', () => {
    const dir = path.join('a', 'b', 'c');
    const args = ['anzy', '--one', '--three', dir];
    const testDirs = argumentsService.getTestFolders(args);
    chai_1.expect(testDirs).to.be.lengthOf(1);
    chai_1.expect(testDirs[0]).to.equal(dir);
  });
  test('Test getting the test folder in nosetest (with multiple dirs)', () => {
    const dir = path.join('a', 'b', 'c');
    const dir2 = path.join('a', 'b', '2');
    const args = ['anzy', '--one', '--three', dir, dir2];
    const testDirs = argumentsService.getTestFolders(args);
    chai_1.expect(testDirs).to.be.lengthOf(2);
    chai_1.expect(testDirs[0]).to.equal(dir);
    chai_1.expect(testDirs[1]).to.equal(dir2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vc2V0ZXN0LmFyZ3NTZXJ2aWNlLnVuaXQudGVzdC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNoYWlfMSIsInJlcXVpcmUiLCJwYXRoIiwidHlwZU1vcSIsInR5cGVzXzEiLCJhcmd1bWVudHNIZWxwZXJfMSIsImFyZ3NTZXJ2aWNlXzEiLCJ0eXBlc18yIiwic3VpdGUiLCJhcmd1bWVudHNTZXJ2aWNlIiwic3VpdGVTZXR1cCIsInNlcnZpY2VDb250YWluZXIiLCJNb2NrIiwib2ZUeXBlIiwibG9nZ2VyIiwic2V0dXAiLCJzIiwiZ2V0IiwiSXQiLCJpc1ZhbHVlIiwiSUxvZ2dlciIsImlzQW55IiwicmV0dXJucyIsIm9iamVjdCIsImFyZ3NIZWxwZXIiLCJBcmd1bWVudHNIZWxwZXIiLCJJQXJndW1lbnRzSGVscGVyIiwiQXJndW1lbnRzU2VydmljZSIsInRlc3QiLCJkaXIiLCJqb2luIiwiYXJncyIsInRlc3REaXJzIiwiZ2V0VGVzdEZvbGRlcnMiLCJleHBlY3QiLCJ0byIsImJlIiwibGVuZ3RoT2YiLCJlcXVhbCIsImRpcjIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUFFQyxFQUFBQSxLQUFLLEVBQUU7QUFBVCxDQUE3Qzs7QUFDQSxNQUFNQyxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXRCOztBQUNBLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNRyxPQUFPLEdBQUdILE9BQU8sQ0FBQyw4QkFBRCxDQUF2Qjs7QUFDQSxNQUFNSSxpQkFBaUIsR0FBR0osT0FBTyxDQUFDLGtEQUFELENBQWpDOztBQUNBLE1BQU1LLGFBQWEsR0FBR0wsT0FBTyxDQUFDLHlEQUFELENBQTdCOztBQUNBLE1BQU1NLE9BQU8sR0FBR04sT0FBTyxDQUFDLGlDQUFELENBQXZCOztBQUNBTyxLQUFLLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNqQyxNQUFJQyxnQkFBSjtBQUNBQyxFQUFBQSxVQUFVLENBQUMsTUFBTTtBQUNiLFVBQU1DLGdCQUFnQixHQUFHUixPQUFPLENBQUNTLElBQVIsQ0FBYUMsTUFBYixFQUF6QjtBQUNBLFVBQU1DLE1BQU0sR0FBR1gsT0FBTyxDQUFDUyxJQUFSLENBQWFDLE1BQWIsRUFBZjtBQUNBRixJQUFBQSxnQkFBZ0IsQ0FDWEksS0FETCxDQUNXQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsR0FBRixDQUFNZCxPQUFPLENBQUNlLEVBQVIsQ0FBV0MsT0FBWCxDQUFtQmYsT0FBTyxDQUFDZ0IsT0FBM0IsQ0FBTixFQUEyQ2pCLE9BQU8sQ0FBQ2UsRUFBUixDQUFXRyxLQUFYLEVBQTNDLENBRGhCLEVBRUtDLE9BRkwsQ0FFYSxNQUFNUixNQUFNLENBQUNTLE1BRjFCO0FBR0EsVUFBTUMsVUFBVSxHQUFHLElBQUluQixpQkFBaUIsQ0FBQ29CLGVBQXRCLENBQXNDZCxnQkFBZ0IsQ0FBQ1ksTUFBdkQsQ0FBbkI7QUFDQVosSUFBQUEsZ0JBQWdCLENBQ1hJLEtBREwsQ0FDV0MsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLEdBQUYsQ0FBTWQsT0FBTyxDQUFDZSxFQUFSLENBQVdDLE9BQVgsQ0FBbUJaLE9BQU8sQ0FBQ21CLGdCQUEzQixDQUFOLEVBQW9EdkIsT0FBTyxDQUFDZSxFQUFSLENBQVdHLEtBQVgsRUFBcEQsQ0FEaEIsRUFFS0MsT0FGTCxDQUVhLE1BQU1FLFVBRm5CO0FBR0FmLElBQUFBLGdCQUFnQixHQUFHLElBQUlILGFBQWEsQ0FBQ3FCLGdCQUFsQixDQUFtQ2hCLGdCQUFnQixDQUFDWSxNQUFwRCxDQUFuQjtBQUNILEdBWFMsQ0FBVjtBQVlBSyxFQUFBQSxJQUFJLENBQUMsMENBQUQsRUFBNkMsTUFBTTtBQUNuRCxVQUFNQyxHQUFHLEdBQUczQixJQUFJLENBQUM0QixJQUFMLENBQVUsR0FBVixFQUFlLEdBQWYsRUFBb0IsR0FBcEIsQ0FBWjtBQUNBLFVBQU1DLElBQUksR0FBRyxDQUFDLE1BQUQsRUFBUyxPQUFULEVBQWtCLFNBQWxCLEVBQTZCRixHQUE3QixDQUFiO0FBQ0EsVUFBTUcsUUFBUSxHQUFHdkIsZ0JBQWdCLENBQUN3QixjQUFqQixDQUFnQ0YsSUFBaEMsQ0FBakI7QUFDQS9CLElBQUFBLE1BQU0sQ0FBQ2tDLE1BQVAsQ0FBY0YsUUFBZCxFQUF3QkcsRUFBeEIsQ0FBMkJDLEVBQTNCLENBQThCQyxRQUE5QixDQUF1QyxDQUF2QztBQUNBckMsSUFBQUEsTUFBTSxDQUFDa0MsTUFBUCxDQUFjRixRQUFRLENBQUMsQ0FBRCxDQUF0QixFQUEyQkcsRUFBM0IsQ0FBOEJHLEtBQTlCLENBQW9DVCxHQUFwQztBQUNILEdBTkcsQ0FBSjtBQU9BRCxFQUFBQSxJQUFJLENBQUMsK0RBQUQsRUFBa0UsTUFBTTtBQUN4RSxVQUFNQyxHQUFHLEdBQUczQixJQUFJLENBQUM0QixJQUFMLENBQVUsR0FBVixFQUFlLEdBQWYsRUFBb0IsR0FBcEIsQ0FBWjtBQUNBLFVBQU1TLElBQUksR0FBR3JDLElBQUksQ0FBQzRCLElBQUwsQ0FBVSxHQUFWLEVBQWUsR0FBZixFQUFvQixHQUFwQixDQUFiO0FBQ0EsVUFBTUMsSUFBSSxHQUFHLENBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsU0FBbEIsRUFBNkJGLEdBQTdCLEVBQWtDVSxJQUFsQyxDQUFiO0FBQ0EsVUFBTVAsUUFBUSxHQUFHdkIsZ0JBQWdCLENBQUN3QixjQUFqQixDQUFnQ0YsSUFBaEMsQ0FBakI7QUFDQS9CLElBQUFBLE1BQU0sQ0FBQ2tDLE1BQVAsQ0FBY0YsUUFBZCxFQUF3QkcsRUFBeEIsQ0FBMkJDLEVBQTNCLENBQThCQyxRQUE5QixDQUF1QyxDQUF2QztBQUNBckMsSUFBQUEsTUFBTSxDQUFDa0MsTUFBUCxDQUFjRixRQUFRLENBQUMsQ0FBRCxDQUF0QixFQUEyQkcsRUFBM0IsQ0FBOEJHLEtBQTlCLENBQW9DVCxHQUFwQztBQUNBN0IsSUFBQUEsTUFBTSxDQUFDa0MsTUFBUCxDQUFjRixRQUFRLENBQUMsQ0FBRCxDQUF0QixFQUEyQkcsRUFBM0IsQ0FBOEJHLEtBQTlCLENBQW9DQyxJQUFwQztBQUNILEdBUkcsQ0FBSjtBQVNILENBOUJJLENBQUwiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY2hhaV8xID0gcmVxdWlyZShcImNoYWlcIik7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgdHlwZU1vcSA9IHJlcXVpcmUoXCJ0eXBlbW9xXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC9jb21tb24vdHlwZXNcIik7XHJcbmNvbnN0IGFyZ3VtZW50c0hlbHBlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC91bml0dGVzdHMvY29tbW9uL2FyZ3VtZW50c0hlbHBlclwiKTtcclxuY29uc3QgYXJnc1NlcnZpY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jbGllbnQvdW5pdHRlc3RzL25vc2V0ZXN0L3NlcnZpY2VzL2FyZ3NTZXJ2aWNlXCIpO1xyXG5jb25zdCB0eXBlc18yID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC91bml0dGVzdHMvdHlwZXNcIik7XHJcbnN1aXRlKCdBcmdzU2VydmljZTogbm9zZXRlc3QnLCAoKSA9PiB7XHJcbiAgICBsZXQgYXJndW1lbnRzU2VydmljZTtcclxuICAgIHN1aXRlU2V0dXAoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlcnZpY2VDb250YWluZXIgPSB0eXBlTW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgY29uc3QgbG9nZ2VyID0gdHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIHNlcnZpY2VDb250YWluZXJcclxuICAgICAgICAgICAgLnNldHVwKHMgPT4gcy5nZXQodHlwZU1vcS5JdC5pc1ZhbHVlKHR5cGVzXzEuSUxvZ2dlciksIHR5cGVNb3EuSXQuaXNBbnkoKSkpXHJcbiAgICAgICAgICAgIC5yZXR1cm5zKCgpID0+IGxvZ2dlci5vYmplY3QpO1xyXG4gICAgICAgIGNvbnN0IGFyZ3NIZWxwZXIgPSBuZXcgYXJndW1lbnRzSGVscGVyXzEuQXJndW1lbnRzSGVscGVyKHNlcnZpY2VDb250YWluZXIub2JqZWN0KTtcclxuICAgICAgICBzZXJ2aWNlQ29udGFpbmVyXHJcbiAgICAgICAgICAgIC5zZXR1cChzID0+IHMuZ2V0KHR5cGVNb3EuSXQuaXNWYWx1ZSh0eXBlc18yLklBcmd1bWVudHNIZWxwZXIpLCB0eXBlTW9xLkl0LmlzQW55KCkpKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiBhcmdzSGVscGVyKTtcclxuICAgICAgICBhcmd1bWVudHNTZXJ2aWNlID0gbmV3IGFyZ3NTZXJ2aWNlXzEuQXJndW1lbnRzU2VydmljZShzZXJ2aWNlQ29udGFpbmVyLm9iamVjdCk7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoJ1Rlc3QgZ2V0dGluZyB0aGUgdGVzdCBmb2xkZXIgaW4gbm9zZXRlc3QnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGlyID0gcGF0aC5qb2luKCdhJywgJ2InLCAnYycpO1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBbJ2FuenknLCAnLS1vbmUnLCAnLS10aHJlZScsIGRpcl07XHJcbiAgICAgICAgY29uc3QgdGVzdERpcnMgPSBhcmd1bWVudHNTZXJ2aWNlLmdldFRlc3RGb2xkZXJzKGFyZ3MpO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QodGVzdERpcnMpLnRvLmJlLmxlbmd0aE9mKDEpO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QodGVzdERpcnNbMF0pLnRvLmVxdWFsKGRpcik7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoJ1Rlc3QgZ2V0dGluZyB0aGUgdGVzdCBmb2xkZXIgaW4gbm9zZXRlc3QgKHdpdGggbXVsdGlwbGUgZGlycyknLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGlyID0gcGF0aC5qb2luKCdhJywgJ2InLCAnYycpO1xyXG4gICAgICAgIGNvbnN0IGRpcjIgPSBwYXRoLmpvaW4oJ2EnLCAnYicsICcyJyk7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IFsnYW56eScsICctLW9uZScsICctLXRocmVlJywgZGlyLCBkaXIyXTtcclxuICAgICAgICBjb25zdCB0ZXN0RGlycyA9IGFyZ3VtZW50c1NlcnZpY2UuZ2V0VGVzdEZvbGRlcnMoYXJncyk7XHJcbiAgICAgICAgY2hhaV8xLmV4cGVjdCh0ZXN0RGlycykudG8uYmUubGVuZ3RoT2YoMik7XHJcbiAgICAgICAgY2hhaV8xLmV4cGVjdCh0ZXN0RGlyc1swXSkudG8uZXF1YWwoZGlyKTtcclxuICAgICAgICBjaGFpXzEuZXhwZWN0KHRlc3REaXJzWzFdKS50by5lcXVhbChkaXIyKTtcclxuICAgIH0pO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9zZXRlc3QuYXJnc1NlcnZpY2UudW5pdC50ZXN0LmpzLm1hcCJdfQ==