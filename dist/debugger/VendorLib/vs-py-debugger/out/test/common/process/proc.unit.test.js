// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-any max-func-body-length no-invalid-this max-classes-per-file

const chai_1 = require("chai");

const child_process_1 = require("child_process");

const proc_1 = require("../../../client/common/process/proc");

const async_1 = require("../../../client/common/utils/async");

const common_1 = require("../../common");

suite('Process - Process Service', function () {
  // tslint:disable-next-line:no-invalid-this
  this.timeout(5000);
  let procIdsToKill = [];
  teardown(() => {
    // tslint:disable-next-line:no-require-imports
    const killProcessTree = require('tree-kill');

    procIdsToKill.forEach(pid => {
      try {
        killProcessTree(pid);
      } catch (_a) {// Ignore.
      }
    });
    procIdsToKill = [];
  });

  function spawnProc() {
    const proc = child_process_1.spawn(common_1.PYTHON_PATH, ['-c', 'while(True): import time;time.sleep(0.5);print(1)']);
    const exited = async_1.createDeferred();
    proc.on('exit', () => exited.resolve(true));
    procIdsToKill.push(proc.pid);
    return {
      pid: proc.pid,
      exited: exited.promise
    };
  }

  test('Process is killed', () => __awaiter(this, void 0, void 0, function* () {
    const proc = spawnProc();
    proc_1.ProcessService.kill(proc.pid);
    chai_1.expect(yield proc.exited).to.equal(true, 'process did not die');
  }));
  test('Process is alive', () => __awaiter(this, void 0, void 0, function* () {
    const proc = spawnProc();
    chai_1.expect(proc_1.ProcessService.isAlive(proc.pid)).to.equal(true, 'process is not alive');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2MudW5pdC50ZXN0LmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJjaGFpXzEiLCJyZXF1aXJlIiwiY2hpbGRfcHJvY2Vzc18xIiwicHJvY18xIiwiYXN5bmNfMSIsImNvbW1vbl8xIiwic3VpdGUiLCJ0aW1lb3V0IiwicHJvY0lkc1RvS2lsbCIsInRlYXJkb3duIiwia2lsbFByb2Nlc3NUcmVlIiwiZm9yRWFjaCIsInBpZCIsIl9hIiwic3Bhd25Qcm9jIiwicHJvYyIsInNwYXduIiwiUFlUSE9OX1BBVEgiLCJleGl0ZWQiLCJjcmVhdGVEZWZlcnJlZCIsIm9uIiwicHVzaCIsInByb21pc2UiLCJ0ZXN0IiwiUHJvY2Vzc1NlcnZpY2UiLCJraWxsIiwiZXhwZWN0IiwidG8iLCJlcXVhbCIsImlzQWxpdmUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQ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YUFBYTtBQUN6RSxVQUFNb0MsSUFBSSxHQUFHRCxTQUFTLEVBQXRCO0FBQ0FYLElBQUFBLE1BQU0sQ0FBQ3FCLGNBQVAsQ0FBc0JDLElBQXRCLENBQTJCVixJQUFJLENBQUNILEdBQWhDO0FBQ0FaLElBQUFBLE1BQU0sQ0FBQzBCLE1BQVAsQ0FBYyxNQUFNWCxJQUFJLENBQUNHLE1BQXpCLEVBQWlDUyxFQUFqQyxDQUFvQ0MsS0FBcEMsQ0FBMEMsSUFBMUMsRUFBZ0QscUJBQWhEO0FBQ0gsR0FKd0MsQ0FBckMsQ0FBSjtBQUtBTCxFQUFBQSxJQUFJLENBQUMsa0JBQUQsRUFBcUIsTUFBTTVDLFNBQVMsQ0FBQyxJQUFELEVBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ3hFLFVBQU1vQyxJQUFJLEdBQUdELFNBQVMsRUFBdEI7QUFDQWQsSUFBQUEsTUFBTSxDQUFDMEIsTUFBUCxDQUFjdkIsTUFBTSxDQUFDcUIsY0FBUCxDQUFzQkssT0FBdEIsQ0FBOEJkLElBQUksQ0FBQ0gsR0FBbkMsQ0FBZCxFQUF1RGUsRUFBdkQsQ0FBMERDLEtBQTFELENBQWdFLElBQWhFLEVBQXNFLHNCQUF0RTtBQUNILEdBSHVDLENBQXBDLENBQUo7QUFJSCxDQWpDSSxDQUFMIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIHRzbGludDpkaXNhYmxlOm5vLWFueSBtYXgtZnVuYy1ib2R5LWxlbmd0aCBuby1pbnZhbGlkLXRoaXMgbWF4LWNsYXNzZXMtcGVyLWZpbGVcclxuY29uc3QgY2hhaV8xID0gcmVxdWlyZShcImNoYWlcIik7XHJcbmNvbnN0IGNoaWxkX3Byb2Nlc3NfMSA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xyXG5jb25zdCBwcm9jXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L2NvbW1vbi9wcm9jZXNzL3Byb2NcIik7XHJcbmNvbnN0IGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L2NvbW1vbi91dGlscy9hc3luY1wiKTtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tbW9uXCIpO1xyXG5zdWl0ZSgnUHJvY2VzcyAtIFByb2Nlc3MgU2VydmljZScsIGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnZhbGlkLXRoaXNcclxuICAgIHRoaXMudGltZW91dCg1MDAwKTtcclxuICAgIGxldCBwcm9jSWRzVG9LaWxsID0gW107XHJcbiAgICB0ZWFyZG93bigoKSA9PiB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXJlcXVpcmUtaW1wb3J0c1xyXG4gICAgICAgIGNvbnN0IGtpbGxQcm9jZXNzVHJlZSA9IHJlcXVpcmUoJ3RyZWUta2lsbCcpO1xyXG4gICAgICAgIHByb2NJZHNUb0tpbGwuZm9yRWFjaChwaWQgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAga2lsbFByb2Nlc3NUcmVlKHBpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBwcm9jSWRzVG9LaWxsID0gW107XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIHNwYXduUHJvYygpIHtcclxuICAgICAgICBjb25zdCBwcm9jID0gY2hpbGRfcHJvY2Vzc18xLnNwYXduKGNvbW1vbl8xLlBZVEhPTl9QQVRILCBbJy1jJywgJ3doaWxlKFRydWUpOiBpbXBvcnQgdGltZTt0aW1lLnNsZWVwKDAuNSk7cHJpbnQoMSknXSk7XHJcbiAgICAgICAgY29uc3QgZXhpdGVkID0gYXN5bmNfMS5jcmVhdGVEZWZlcnJlZCgpO1xyXG4gICAgICAgIHByb2Mub24oJ2V4aXQnLCAoKSA9PiBleGl0ZWQucmVzb2x2ZSh0cnVlKSk7XHJcbiAgICAgICAgcHJvY0lkc1RvS2lsbC5wdXNoKHByb2MucGlkKTtcclxuICAgICAgICByZXR1cm4geyBwaWQ6IHByb2MucGlkLCBleGl0ZWQ6IGV4aXRlZC5wcm9taXNlIH07XHJcbiAgICB9XHJcbiAgICB0ZXN0KCdQcm9jZXNzIGlzIGtpbGxlZCcsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCBwcm9jID0gc3Bhd25Qcm9jKCk7XHJcbiAgICAgICAgcHJvY18xLlByb2Nlc3NTZXJ2aWNlLmtpbGwocHJvYy5waWQpO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QoeWllbGQgcHJvYy5leGl0ZWQpLnRvLmVxdWFsKHRydWUsICdwcm9jZXNzIGRpZCBub3QgZGllJyk7XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdQcm9jZXNzIGlzIGFsaXZlJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IHByb2MgPSBzcGF3blByb2MoKTtcclxuICAgICAgICBjaGFpXzEuZXhwZWN0KHByb2NfMS5Qcm9jZXNzU2VydmljZS5pc0FsaXZlKHByb2MucGlkKSkudG8uZXF1YWwodHJ1ZSwgJ3Byb2Nlc3MgaXMgbm90IGFsaXZlJyk7XHJcbiAgICB9KSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9jLnVuaXQudGVzdC5qcy5tYXAiXX0=