"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

const assert = require("assert");

const path = require("path");

const vscode = require("vscode");

const configSettings_1 = require("../../client/common/configSettings");

const constants_1 = require("../../client/common/platform/constants");

const systemVariables_1 = require("../../client/common/variables/systemVariables");

const initialize_1 = require("./../initialize");

const workspaceRoot = path.join(__dirname, '..', '..', '..', 'src', 'test'); // Defines a Mocha test suite to group tests of similar kind together

suite('Configuration Settings', () => {
  setup(initialize_1.initialize);
  test('Check Values', done => {
    const systemVariables = new systemVariables_1.SystemVariables(workspaceRoot); // tslint:disable-next-line:no-any

    const pythonConfig = vscode.workspace.getConfiguration('python', null);
    const pythonSettings = configSettings_1.PythonSettings.getInstance(vscode.Uri.file(workspaceRoot));
    Object.keys(pythonSettings).forEach(key => {
      let settingValue = pythonConfig.get(key, 'Not a config');

      if (settingValue === 'Not a config') {
        return;
      }

      if (settingValue) {
        settingValue = systemVariables.resolve(settingValue);
      } // tslint:disable-next-line:no-any


      const pythonSettingValue = pythonSettings[key];

      if (key.endsWith('Path') && constants_1.IS_WINDOWS) {
        assert.equal(settingValue.toUpperCase(), pythonSettingValue.toUpperCase(), `Setting ${key} not the same`);
      } else if (key === 'workspaceSymbols' && constants_1.IS_WINDOWS) {
        const workspaceSettings = pythonSettingValue;
        const workspaceSttings = settingValue;
        assert.equal(workspaceSettings.tagFilePath.toUpperCase(), workspaceSttings.tagFilePath.toUpperCase(), `Setting ${key} not the same`);
        const workspaceSettingsWithoutPath = Object.assign({}, workspaceSettings);
        delete workspaceSettingsWithoutPath.tagFilePath;
        const pythonSettingValueWithoutPath = Object.assign({}, pythonSettingValue);
        delete pythonSettingValueWithoutPath.tagFilePath;
        assert.deepEqual(workspaceSettingsWithoutPath, pythonSettingValueWithoutPath, `Setting ${key} not the same`);
      }
    });
    done();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZ1NldHRpbmdzLnRlc3QuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhc3NlcnQiLCJyZXF1aXJlIiwicGF0aCIsInZzY29kZSIsImNvbmZpZ1NldHRpbmdzXzEiLCJjb25zdGFudHNfMSIsInN5c3RlbVZhcmlhYmxlc18xIiwiaW5pdGlhbGl6ZV8xIiwid29ya3NwYWNlUm9vdCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJzdWl0ZSIsInNldHVwIiwiaW5pdGlhbGl6ZSIsInRlc3QiLCJkb25lIiwic3lzdGVtVmFyaWFibGVzIiwiU3lzdGVtVmFyaWFibGVzIiwicHl0aG9uQ29uZmlnIiwid29ya3NwYWNlIiwiZ2V0Q29uZmlndXJhdGlvbiIsInB5dGhvblNldHRpbmdzIiwiUHl0aG9uU2V0dGluZ3MiLCJnZXRJbnN0YW5jZSIsIlVyaSIsImZpbGUiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldHRpbmdWYWx1ZSIsImdldCIsInJlc29sdmUiLCJweXRob25TZXR0aW5nVmFsdWUiLCJlbmRzV2l0aCIsIklTX1dJTkRPV1MiLCJlcXVhbCIsInRvVXBwZXJDYXNlIiwid29ya3NwYWNlU2V0dGluZ3MiLCJ3b3Jrc3BhY2VTdHRpbmdzIiwidGFnRmlsZVBhdGgiLCJ3b3Jrc3BhY2VTZXR0aW5nc1dpdGhvdXRQYXRoIiwiYXNzaWduIiwicHl0aG9uU2V0dGluZ1ZhbHVlV2l0aG91dFBhdGgiLCJkZWVwRXF1YWwiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxNQUFNLEdBQUdG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N0Y7QUFDSDtBQUNKLEtBdkJEO0FBd0JBYixJQUFBQSxJQUFJO0FBQ1AsR0E5QkcsQ0FBSjtBQStCSCxDQWpDSSxDQUFMIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCB2c2NvZGUgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCBjb25maWdTZXR0aW5nc18xID0gcmVxdWlyZShcIi4uLy4uL2NsaWVudC9jb21tb24vY29uZmlnU2V0dGluZ3NcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uL2NsaWVudC9jb21tb24vcGxhdGZvcm0vY29uc3RhbnRzXCIpO1xyXG5jb25zdCBzeXN0ZW1WYXJpYWJsZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jbGllbnQvY29tbW9uL3ZhcmlhYmxlcy9zeXN0ZW1WYXJpYWJsZXNcIik7XHJcbmNvbnN0IGluaXRpYWxpemVfMSA9IHJlcXVpcmUoXCIuLy4uL2luaXRpYWxpemVcIik7XHJcbmNvbnN0IHdvcmtzcGFjZVJvb3QgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLi4nLCAnc3JjJywgJ3Rlc3QnKTtcclxuLy8gRGVmaW5lcyBhIE1vY2hhIHRlc3Qgc3VpdGUgdG8gZ3JvdXAgdGVzdHMgb2Ygc2ltaWxhciBraW5kIHRvZ2V0aGVyXHJcbnN1aXRlKCdDb25maWd1cmF0aW9uIFNldHRpbmdzJywgKCkgPT4ge1xyXG4gICAgc2V0dXAoaW5pdGlhbGl6ZV8xLmluaXRpYWxpemUpO1xyXG4gICAgdGVzdCgnQ2hlY2sgVmFsdWVzJywgZG9uZSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3lzdGVtVmFyaWFibGVzID0gbmV3IHN5c3RlbVZhcmlhYmxlc18xLlN5c3RlbVZhcmlhYmxlcyh3b3Jrc3BhY2VSb290KTtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgY29uc3QgcHl0aG9uQ29uZmlnID0gdnNjb2RlLndvcmtzcGFjZS5nZXRDb25maWd1cmF0aW9uKCdweXRob24nLCBudWxsKTtcclxuICAgICAgICBjb25zdCBweXRob25TZXR0aW5ncyA9IGNvbmZpZ1NldHRpbmdzXzEuUHl0aG9uU2V0dGluZ3MuZ2V0SW5zdGFuY2UodnNjb2RlLlVyaS5maWxlKHdvcmtzcGFjZVJvb3QpKTtcclxuICAgICAgICBPYmplY3Qua2V5cyhweXRob25TZXR0aW5ncykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgc2V0dGluZ1ZhbHVlID0gcHl0aG9uQ29uZmlnLmdldChrZXksICdOb3QgYSBjb25maWcnKTtcclxuICAgICAgICAgICAgaWYgKHNldHRpbmdWYWx1ZSA9PT0gJ05vdCBhIGNvbmZpZycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoc2V0dGluZ1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBzZXR0aW5nVmFsdWUgPSBzeXN0ZW1WYXJpYWJsZXMucmVzb2x2ZShzZXR0aW5nVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcclxuICAgICAgICAgICAgY29uc3QgcHl0aG9uU2V0dGluZ1ZhbHVlID0gcHl0aG9uU2V0dGluZ3Nba2V5XTtcclxuICAgICAgICAgICAgaWYgKGtleS5lbmRzV2l0aCgnUGF0aCcpICYmIGNvbnN0YW50c18xLklTX1dJTkRPV1MpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydC5lcXVhbChzZXR0aW5nVmFsdWUudG9VcHBlckNhc2UoKSwgcHl0aG9uU2V0dGluZ1ZhbHVlLnRvVXBwZXJDYXNlKCksIGBTZXR0aW5nICR7a2V5fSBub3QgdGhlIHNhbWVgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChrZXkgPT09ICd3b3Jrc3BhY2VTeW1ib2xzJyAmJiBjb25zdGFudHNfMS5JU19XSU5ET1dTKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3b3Jrc3BhY2VTZXR0aW5ncyA9IHB5dGhvblNldHRpbmdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmtzcGFjZVN0dGluZ3MgPSBzZXR0aW5nVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQuZXF1YWwod29ya3NwYWNlU2V0dGluZ3MudGFnRmlsZVBhdGgudG9VcHBlckNhc2UoKSwgd29ya3NwYWNlU3R0aW5ncy50YWdGaWxlUGF0aC50b1VwcGVyQ2FzZSgpLCBgU2V0dGluZyAke2tleX0gbm90IHRoZSBzYW1lYCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3b3Jrc3BhY2VTZXR0aW5nc1dpdGhvdXRQYXRoID0gT2JqZWN0LmFzc2lnbih7fSwgd29ya3NwYWNlU2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHdvcmtzcGFjZVNldHRpbmdzV2l0aG91dFBhdGgudGFnRmlsZVBhdGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBweXRob25TZXR0aW5nVmFsdWVXaXRob3V0UGF0aCA9IE9iamVjdC5hc3NpZ24oe30sIHB5dGhvblNldHRpbmdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgcHl0aG9uU2V0dGluZ1ZhbHVlV2l0aG91dFBhdGgudGFnRmlsZVBhdGg7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQuZGVlcEVxdWFsKHdvcmtzcGFjZVNldHRpbmdzV2l0aG91dFBhdGgsIHB5dGhvblNldHRpbmdWYWx1ZVdpdGhvdXRQYXRoLCBgU2V0dGluZyAke2tleX0gbm90IHRoZSBzYW1lYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBkb25lKCk7XHJcbiAgICB9KTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmZpZ1NldHRpbmdzLnRlc3QuanMubWFwIl19