// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable: no-any

const assert = require("assert");

const version_1 = require("../../../client/common/utils/version");

suite('Version Utils', () => {
  test('Must handle invalid versions', () => __awaiter(void 0, void 0, void 0, function* () {
    const version = 'ABC';
    assert.equal(version_1.convertToSemver(version), `${version}.0.0`, 'Version is incorrect');
  }));
  test('Must handle null, empty and undefined', () => __awaiter(void 0, void 0, void 0, function* () {
    assert.equal(version_1.convertToSemver(''), '0.0.0', 'Version is incorrect for empty string');
    assert.equal(version_1.convertToSemver(null), '0.0.0', 'Version is incorrect for null value');
    assert.equal(version_1.convertToSemver(undefined), '0.0.0', 'Version is incorrect for undefined value');
  }));
  test('Must be able to compare versions correctly', () => __awaiter(void 0, void 0, void 0, function* () {
    assert.equal(version_1.compareVersion('', '1'), 0, '1. Comparison failed');
    assert.equal(version_1.compareVersion('1', '0.1'), 1, '2. Comparison failed');
    assert.equal(version_1.compareVersion('2.10', '2.9'), 1, '3. Comparison failed');
    assert.equal(version_1.compareVersion('2.99.9', '3'), 0, '4. Comparison failed');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnNpb24udW5pdC50ZXN0LmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJhc3NlcnQiLCJyZXF1aXJlIiwidmVyc2lvbl8xIiwic3VpdGUiLCJ0ZXN0IiwidmVyc2lvbiIsImVxdWFsIiwiY29udmVydFRvU2VtdmVyIiwidW5kZWZpbmVkIiwiY29tcGFyZVZlcnNpb24iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FB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QUFDSCxHQUxpRSxDQUE5RCxDQUFKO0FBTUgsQ0FoQkksQ0FBTCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZTogbm8tYW55XHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XHJcbmNvbnN0IHZlcnNpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jbGllbnQvY29tbW9uL3V0aWxzL3ZlcnNpb25cIik7XHJcbnN1aXRlKCdWZXJzaW9uIFV0aWxzJywgKCkgPT4ge1xyXG4gICAgdGVzdCgnTXVzdCBoYW5kbGUgaW52YWxpZCB2ZXJzaW9ucycsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCB2ZXJzaW9uID0gJ0FCQyc7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHZlcnNpb25fMS5jb252ZXJ0VG9TZW12ZXIodmVyc2lvbiksIGAke3ZlcnNpb259LjAuMGAsICdWZXJzaW9uIGlzIGluY29ycmVjdCcpO1xyXG4gICAgfSkpO1xyXG4gICAgdGVzdCgnTXVzdCBoYW5kbGUgbnVsbCwgZW1wdHkgYW5kIHVuZGVmaW5lZCcsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBhc3NlcnQuZXF1YWwodmVyc2lvbl8xLmNvbnZlcnRUb1NlbXZlcignJyksICcwLjAuMCcsICdWZXJzaW9uIGlzIGluY29ycmVjdCBmb3IgZW1wdHkgc3RyaW5nJyk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHZlcnNpb25fMS5jb252ZXJ0VG9TZW12ZXIobnVsbCksICcwLjAuMCcsICdWZXJzaW9uIGlzIGluY29ycmVjdCBmb3IgbnVsbCB2YWx1ZScpO1xyXG4gICAgICAgIGFzc2VydC5lcXVhbCh2ZXJzaW9uXzEuY29udmVydFRvU2VtdmVyKHVuZGVmaW5lZCksICcwLjAuMCcsICdWZXJzaW9uIGlzIGluY29ycmVjdCBmb3IgdW5kZWZpbmVkIHZhbHVlJyk7XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdNdXN0IGJlIGFibGUgdG8gY29tcGFyZSB2ZXJzaW9ucyBjb3JyZWN0bHknLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHZlcnNpb25fMS5jb21wYXJlVmVyc2lvbignJywgJzEnKSwgMCwgJzEuIENvbXBhcmlzb24gZmFpbGVkJyk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHZlcnNpb25fMS5jb21wYXJlVmVyc2lvbignMScsICcwLjEnKSwgMSwgJzIuIENvbXBhcmlzb24gZmFpbGVkJyk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHZlcnNpb25fMS5jb21wYXJlVmVyc2lvbignMi4xMCcsICcyLjknKSwgMSwgJzMuIENvbXBhcmlzb24gZmFpbGVkJyk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKHZlcnNpb25fMS5jb21wYXJlVmVyc2lvbignMi45OS45JywgJzMnKSwgMCwgJzQuIENvbXBhcmlzb24gZmFpbGVkJyk7XHJcbiAgICB9KSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLnVuaXQudGVzdC5qcy5tYXAiXX0=