// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const chai_1 = require("chai");

const TypeMoq = require("typemoq");

const types_1 = require("../../../client/common/application/types");

const httpClient_1 = require("../../../client/common/net/httpClient");

suite('Http Client', () => {
  test('Get proxy info', () => __awaiter(void 0, void 0, void 0, function* () {
    const container = TypeMoq.Mock.ofType();
    const workSpaceService = TypeMoq.Mock.ofType();
    const config = TypeMoq.Mock.ofType();
    const proxy = 'https://myproxy.net:4242';
    config.setup(c => c.get(TypeMoq.It.isValue('proxy'), TypeMoq.It.isValue(''))).returns(() => proxy).verifiable(TypeMoq.Times.once());
    workSpaceService.setup(w => w.getConfiguration(TypeMoq.It.isValue('http'))).returns(() => config.object).verifiable(TypeMoq.Times.once());
    container.setup(a => a.get(TypeMoq.It.isValue(types_1.IWorkspaceService))).returns(() => workSpaceService.object);
    const httpClient = new httpClient_1.HttpClient(container.object);
    config.verifyAll();
    workSpaceService.verifyAll();
    chai_1.expect(httpClient.requestOptions).to.deep.equal({
      proxy: proxy
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBDbGllbnQudW5pdC50ZXN0LmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJjaGFpXzEiLCJyZXF1aXJlIiwiVHlwZU1vcSIsInR5cGVzXzEiLCJodHRwQ2xpZW50XzEiLCJzdWl0ZSIsInRlc3QiLCJjb250YWluZXIiLCJNb2NrIiwib2ZUeXBlIiwid29ya1NwYWNlU2VydmljZSIsImNvbmZpZyIsInByb3h5Iiwic2V0dXAiLCJjIiwiZ2V0IiwiSXQiLCJpc1ZhbHVlIiwicmV0dXJucyIsInZlcmlmaWFibGUiLCJUaW1lcyIsIm9uY2UiLCJ3IiwiZ2V0Q29uZmlndXJhdGlvbiIsIm9iamVjdCIsImEiLCJJV29ya3NwYWNlU2VydmljZSIsImh0dHBDbGllbnQiLCJIdHRwQ2xpZW50IiwidmVyaWZ5QWxsIiwiZXhwZWN0IiwicmVxdWVzdE9wdGlvbnMiLCJ0byIsImRlZXAiLCJlcXVhbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBLElBQUlBLFNBQVMsR0FBSSxVQUFRLFNBQUtBLFNBQWQsSUFBNEIsVUFBVUMsT0FBVixFQUFtQkMsVUFBbkIsRUFBK0JDLENBQS9CLEVBQWtDQyxTQUFsQyxFQUE2QztBQUNyRixTQUFPLEtBQUtELENBQUMsS0FBS0EsQ0FBQyxHQUFHRSxPQUFULENBQU4sRUFBeUIsVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDdkQsYUFBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDTyxJQUFWLENB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LENBQUNjLEVBQVIsQ0FBV0MsT0FBWCxDQUFtQmQsT0FBTyxDQUFDdUIsaUJBQTNCLENBQU4sQ0FBckIsRUFBMkVSLE9BQTNFLENBQW1GLE1BQU1SLGdCQUFnQixDQUFDYyxNQUExRztBQUNBLFVBQU1HLFVBQVUsR0FBRyxJQUFJdkIsWUFBWSxDQUFDd0IsVUFBakIsQ0FBNEJyQixTQUFTLENBQUNpQixNQUF0QyxDQUFuQjtBQUNBYixJQUFBQSxNQUFNLENBQUNrQixTQUFQO0FBQ0FuQixJQUFBQSxnQkFBZ0IsQ0FBQ21CLFNBQWpCO0FBQ0E3QixJQUFBQSxNQUFNLENBQUM4QixNQUFQLENBQWNILFVBQVUsQ0FBQ0ksY0FBekIsRUFBeUNDLEVBQXpDLENBQTRDQyxJQUE1QyxDQUFpREMsS0FBakQsQ0FBdUQ7QUFBRXRCLE1BQUFBLEtBQUssRUFBRUE7QUFBVCxLQUF2RDtBQUNILEdBbEJxQyxDQUFsQyxDQUFKO0FBbUJILENBcEJJLENBQUwiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgY2hhaV8xID0gcmVxdWlyZShcImNoYWlcIik7XHJcbmNvbnN0IFR5cGVNb3EgPSByZXF1aXJlKFwidHlwZW1vcVwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jbGllbnQvY29tbW9uL2FwcGxpY2F0aW9uL3R5cGVzXCIpO1xyXG5jb25zdCBodHRwQ2xpZW50XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L2NvbW1vbi9uZXQvaHR0cENsaWVudFwiKTtcclxuc3VpdGUoJ0h0dHAgQ2xpZW50JywgKCkgPT4ge1xyXG4gICAgdGVzdCgnR2V0IHByb3h5IGluZm8nLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIGNvbnN0IHdvcmtTcGFjZVNlcnZpY2UgPSBUeXBlTW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgY29uc3QgY29uZmlnID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIGNvbnN0IHByb3h5ID0gJ2h0dHBzOi8vbXlwcm94eS5uZXQ6NDI0Mic7XHJcbiAgICAgICAgY29uZmlnXHJcbiAgICAgICAgICAgIC5zZXR1cChjID0+IGMuZ2V0KFR5cGVNb3EuSXQuaXNWYWx1ZSgncHJveHknKSwgVHlwZU1vcS5JdC5pc1ZhbHVlKCcnKSkpXHJcbiAgICAgICAgICAgIC5yZXR1cm5zKCgpID0+IHByb3h5KVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZShUeXBlTW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgd29ya1NwYWNlU2VydmljZVxyXG4gICAgICAgICAgICAuc2V0dXAodyA9PiB3LmdldENvbmZpZ3VyYXRpb24oVHlwZU1vcS5JdC5pc1ZhbHVlKCdodHRwJykpKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiBjb25maWcub2JqZWN0KVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZShUeXBlTW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgY29udGFpbmVyLnNldHVwKGEgPT4gYS5nZXQoVHlwZU1vcS5JdC5pc1ZhbHVlKHR5cGVzXzEuSVdvcmtzcGFjZVNlcnZpY2UpKSkucmV0dXJucygoKSA9PiB3b3JrU3BhY2VTZXJ2aWNlLm9iamVjdCk7XHJcbiAgICAgICAgY29uc3QgaHR0cENsaWVudCA9IG5ldyBodHRwQ2xpZW50XzEuSHR0cENsaWVudChjb250YWluZXIub2JqZWN0KTtcclxuICAgICAgICBjb25maWcudmVyaWZ5QWxsKCk7XHJcbiAgICAgICAgd29ya1NwYWNlU2VydmljZS52ZXJpZnlBbGwoKTtcclxuICAgICAgICBjaGFpXzEuZXhwZWN0KGh0dHBDbGllbnQucmVxdWVzdE9wdGlvbnMpLnRvLmRlZXAuZXF1YWwoeyBwcm94eTogcHJveHkgfSk7XHJcbiAgICB9KSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwQ2xpZW50LnVuaXQudGVzdC5qcy5tYXAiXX0=