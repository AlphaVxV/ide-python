// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const chai_1 = require("chai");

const typeMoq = require("typemoq");

const languageServerPackageRepository_1 = require("../../../client/activation/languageServer/languageServerPackageRepository");

suite('Language Server Download Channels', () => {
  let serviceContainer;
  setup(() => {
    serviceContainer = typeMoq.Mock.ofType();
  });

  function getPackageInfo(channel) {
    let classToCreate = languageServerPackageRepository_1.StableLanguageServerPackageRepository;

    switch (channel) {
      case languageServerPackageRepository_1.LanguageServerDownloadChannel.stable:
        {
          classToCreate = languageServerPackageRepository_1.StableLanguageServerPackageRepository;
          break;
        }

      case languageServerPackageRepository_1.LanguageServerDownloadChannel.beta:
        {
          classToCreate = languageServerPackageRepository_1.BetaLanguageServerPackageRepository;
          break;
        }

      case languageServerPackageRepository_1.LanguageServerDownloadChannel.daily:
        {
          classToCreate = languageServerPackageRepository_1.DailyLanguageServerPackageRepository;
          break;
        }

      default:
        {
          throw new Error('Unknown download channel');
        }
    }

    const instance = new class extends classToCreate {
      constructor() {
        super(serviceContainer.object);
      }

      get storageAccount() {
        return this.azureCDNBlobStorageAccount;
      }

      get storageContainer() {
        return this.azureBlobStorageContainer;
      }

    }();
    return [instance.storageAccount, instance.storageContainer];
  }

  test('Stable', () => {
    chai_1.expect(getPackageInfo(languageServerPackageRepository_1.LanguageServerDownloadChannel.stable)).to.be.deep.equal(['https://pvsc.azureedge.net', 'python-language-server-stable']);
  });
  test('Beta', () => {
    chai_1.expect(getPackageInfo(languageServerPackageRepository_1.LanguageServerDownloadChannel.beta)).to.be.deep.equal(['https://pvsc.azureedge.net', 'python-language-server-beta']);
  });
  test('Daily', () => {
    chai_1.expect(getPackageInfo(languageServerPackageRepository_1.LanguageServerDownloadChannel.daily)).to.be.deep.equal(['https://pvsc.azureedge.net', 'python-language-server-daily']);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnkudW5pdC50ZXN0LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2hhaV8xIiwicmVxdWlyZSIsInR5cGVNb3EiLCJsYW5ndWFnZVNlcnZlclBhY2thZ2VSZXBvc2l0b3J5XzEiLCJzdWl0ZSIsInNlcnZpY2VDb250YWluZXIiLCJzZXR1cCIsIk1vY2siLCJvZlR5cGUiLCJnZXRQYWNrYWdlSW5mbyIsImNoYW5uZWwiLCJjbGFzc1RvQ3JlYXRlIiwiU3RhYmxlTGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeSIsIkxhbmd1YWdlU2VydmVyRG93bmxvYWRDaGFubmVsIiwic3RhYmxlIiwiYmV0YSIsIkJldGFMYW5ndWFnZVNlcnZlclBhY2thZ2VSZXBvc2l0b3J5IiwiZGFpbHkiLCJEYWlseUxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnkiLCJFcnJvciIsImluc3RhbmNlIiwiY29uc3RydWN0b3IiLCJvYmplY3QiLCJzdG9yYWdlQWNjb3VudCIsImF6dXJlQ0ROQmxvYlN0b3JhZ2VBY2NvdW50Iiwic3RvcmFnZUNvbnRhaW5lciIsImF6dXJlQmxvYlN0b3JhZ2VDb250YWluZXIiLCJ0ZXN0IiwiZXhwZWN0IiwidG8iLCJiZSIsImRlZXAiLCJlcXVhbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLE1BQU0sR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHRCxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNRSxpQ0FBaUMsR0FBR0YsT0FBTyxDQUFDLDJFQUFELENBQWpEOztBQUNBRyxLQUFLLENBQUMsbUNBQUQsRUFBc0MsTUFBTTtBQUM3QyxNQUFJQyxnQkFBSjtBQUNBQyxFQUFBQSxLQUFLLENBQUMsTUFBTTtBQUNSRCxJQUFBQSxnQkFBZ0IsR0FBR0gsT0FBTyxDQUFDSyxJQUFSLENBQWFDLE1BQWIsRUFBbkI7QUFDSCxHQUZJLENBQUw7O0FBR0EsV0FBU0MsY0FBVCxDQUF3QkMsT0FBeEIsRUFBaUM7QUFDN0IsUUFBSUMsYUFBYSxHQUFHUixpQ0FBaUMsQ0FBQ1MscUNBQXREOztBQUNBLFlBQVFGLE9BQVI7QUFDSSxXQUFLUCxpQ0FBaUMsQ0FBQ1UsNkJBQWxDLENBQWdFQyxNQUFyRTtBQUE2RTtBQUN6RUgsVUFBQUEsYUFBYSxHQUFHUixpQ0FBaUMsQ0FBQ1MscUNBQWxEO0FBQ0E7QUFDSDs7QUFDRCxXQUFLVCxpQ0FBaUMsQ0FBQ1UsNkJBQWxDLENBQWdFRSxJQUFyRTtBQUEyRTtBQUN2RUosVUFBQUEsYUFBYSxHQUFHUixpQ0FBaUMsQ0FBQ2EsbUNBQWxEO0FBQ0E7QUFDSDs7QUFDRCxXQUFLYixpQ0FBaUMsQ0FBQ1UsNkJBQWxDLENBQWdFSSxLQUFyRTtBQUE0RTtBQUN4RU4sVUFBQUEsYUFBYSxHQUFHUixpQ0FBaUMsQ0FBQ2Usb0NBQWxEO0FBQ0E7QUFDSDs7QUFDRDtBQUFTO0FBQ0wsZ0JBQU0sSUFBSUMsS0FBSixDQUFVLDBCQUFWLENBQU47QUFDSDtBQWZMOztBQWlCQSxVQUFNQyxRQUFRLEdBQUcsSUFBSSxjQUFjVCxhQUFkLENBQTRCO0FBQzdDVSxNQUFBQSxXQUFXLEdBQUc7QUFBRSxjQUFNaEIsZ0JBQWdCLENBQUNpQixNQUF2QjtBQUFpQzs7QUFDakQsVUFBSUMsY0FBSixHQUFxQjtBQUFFLGVBQU8sS0FBS0MsMEJBQVo7QUFBeUM7O0FBQ2hFLFVBQUlDLGdCQUFKLEdBQXVCO0FBQUUsZUFBTyxLQUFLQyx5QkFBWjtBQUF3Qzs7QUFIcEIsS0FBaEMsRUFBakI7QUFLQSxXQUFPLENBQUNOLFFBQVEsQ0FBQ0csY0FBVixFQUEwQkgsUUFBUSxDQUFDSyxnQkFBbkMsQ0FBUDtBQUNIOztBQUNERSxFQUFBQSxJQUFJLENBQUMsUUFBRCxFQUFXLE1BQU07QUFDakIzQixJQUFBQSxNQUFNLENBQUM0QixNQUFQLENBQWNuQixjQUFjLENBQUNOLGlDQUFpQyxDQUFDVSw2QkFBbEMsQ0FBZ0VDLE1BQWpFLENBQTVCLEVBQXNHZSxFQUF0RyxDQUF5R0MsRUFBekcsQ0FBNEdDLElBQTVHLENBQWlIQyxLQUFqSCxDQUF1SCxDQUFDLDRCQUFELEVBQStCLCtCQUEvQixDQUF2SDtBQUNILEdBRkcsQ0FBSjtBQUdBTCxFQUFBQSxJQUFJLENBQUMsTUFBRCxFQUFTLE1BQU07QUFDZjNCLElBQUFBLE1BQU0sQ0FBQzRCLE1BQVAsQ0FBY25CLGNBQWMsQ0FBQ04saUNBQWlDLENBQUNVLDZCQUFsQyxDQUFnRUUsSUFBakUsQ0FBNUIsRUFBb0djLEVBQXBHLENBQXVHQyxFQUF2RyxDQUEwR0MsSUFBMUcsQ0FBK0dDLEtBQS9HLENBQXFILENBQUMsNEJBQUQsRUFBK0IsNkJBQS9CLENBQXJIO0FBQ0gsR0FGRyxDQUFKO0FBR0FMLEVBQUFBLElBQUksQ0FBQyxPQUFELEVBQVUsTUFBTTtBQUNoQjNCLElBQUFBLE1BQU0sQ0FBQzRCLE1BQVAsQ0FBY25CLGNBQWMsQ0FBQ04saUNBQWlDLENBQUNVLDZCQUFsQyxDQUFnRUksS0FBakUsQ0FBNUIsRUFBcUdZLEVBQXJHLENBQXdHQyxFQUF4RyxDQUEyR0MsSUFBM0csQ0FBZ0hDLEtBQWhILENBQXNILENBQUMsNEJBQUQsRUFBK0IsOEJBQS9CLENBQXRIO0FBQ0gsR0FGRyxDQUFKO0FBR0gsQ0F4Q0ksQ0FBTCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjaGFpXzEgPSByZXF1aXJlKFwiY2hhaVwiKTtcclxuY29uc3QgdHlwZU1vcSA9IHJlcXVpcmUoXCJ0eXBlbW9xXCIpO1xyXG5jb25zdCBsYW5ndWFnZVNlcnZlclBhY2thZ2VSZXBvc2l0b3J5XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L2FjdGl2YXRpb24vbGFuZ3VhZ2VTZXJ2ZXIvbGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeVwiKTtcclxuc3VpdGUoJ0xhbmd1YWdlIFNlcnZlciBEb3dubG9hZCBDaGFubmVscycsICgpID0+IHtcclxuICAgIGxldCBzZXJ2aWNlQ29udGFpbmVyO1xyXG4gICAgc2V0dXAoKCkgPT4ge1xyXG4gICAgICAgIHNlcnZpY2VDb250YWluZXIgPSB0eXBlTW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGdldFBhY2thZ2VJbmZvKGNoYW5uZWwpIHtcclxuICAgICAgICBsZXQgY2xhc3NUb0NyZWF0ZSA9IGxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnlfMS5TdGFibGVMYW5ndWFnZVNlcnZlclBhY2thZ2VSZXBvc2l0b3J5O1xyXG4gICAgICAgIHN3aXRjaCAoY2hhbm5lbCkge1xyXG4gICAgICAgICAgICBjYXNlIGxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnlfMS5MYW5ndWFnZVNlcnZlckRvd25sb2FkQ2hhbm5lbC5zdGFibGU6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzVG9DcmVhdGUgPSBsYW5ndWFnZVNlcnZlclBhY2thZ2VSZXBvc2l0b3J5XzEuU3RhYmxlTGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgbGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeV8xLkxhbmd1YWdlU2VydmVyRG93bmxvYWRDaGFubmVsLmJldGE6IHtcclxuICAgICAgICAgICAgICAgIGNsYXNzVG9DcmVhdGUgPSBsYW5ndWFnZVNlcnZlclBhY2thZ2VSZXBvc2l0b3J5XzEuQmV0YUxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIGxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnlfMS5MYW5ndWFnZVNlcnZlckRvd25sb2FkQ2hhbm5lbC5kYWlseToge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NUb0NyZWF0ZSA9IGxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnlfMS5EYWlseUxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZG93bmxvYWQgY2hhbm5lbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IGNsYXNzIGV4dGVuZHMgY2xhc3NUb0NyZWF0ZSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkgeyBzdXBlcihzZXJ2aWNlQ29udGFpbmVyLm9iamVjdCk7IH1cclxuICAgICAgICAgICAgZ2V0IHN0b3JhZ2VBY2NvdW50KCkgeyByZXR1cm4gdGhpcy5henVyZUNETkJsb2JTdG9yYWdlQWNjb3VudDsgfVxyXG4gICAgICAgICAgICBnZXQgc3RvcmFnZUNvbnRhaW5lcigpIHsgcmV0dXJuIHRoaXMuYXp1cmVCbG9iU3RvcmFnZUNvbnRhaW5lcjsgfVxyXG4gICAgICAgIH0oKTtcclxuICAgICAgICByZXR1cm4gW2luc3RhbmNlLnN0b3JhZ2VBY2NvdW50LCBpbnN0YW5jZS5zdG9yYWdlQ29udGFpbmVyXTtcclxuICAgIH1cclxuICAgIHRlc3QoJ1N0YWJsZScsICgpID0+IHtcclxuICAgICAgICBjaGFpXzEuZXhwZWN0KGdldFBhY2thZ2VJbmZvKGxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnlfMS5MYW5ndWFnZVNlcnZlckRvd25sb2FkQ2hhbm5lbC5zdGFibGUpKS50by5iZS5kZWVwLmVxdWFsKFsnaHR0cHM6Ly9wdnNjLmF6dXJlZWRnZS5uZXQnLCAncHl0aG9uLWxhbmd1YWdlLXNlcnZlci1zdGFibGUnXSk7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoJ0JldGEnLCAoKSA9PiB7XHJcbiAgICAgICAgY2hhaV8xLmV4cGVjdChnZXRQYWNrYWdlSW5mbyhsYW5ndWFnZVNlcnZlclBhY2thZ2VSZXBvc2l0b3J5XzEuTGFuZ3VhZ2VTZXJ2ZXJEb3dubG9hZENoYW5uZWwuYmV0YSkpLnRvLmJlLmRlZXAuZXF1YWwoWydodHRwczovL3B2c2MuYXp1cmVlZGdlLm5ldCcsICdweXRob24tbGFuZ3VhZ2Utc2VydmVyLWJldGEnXSk7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoJ0RhaWx5JywgKCkgPT4ge1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QoZ2V0UGFja2FnZUluZm8obGFuZ3VhZ2VTZXJ2ZXJQYWNrYWdlUmVwb3NpdG9yeV8xLkxhbmd1YWdlU2VydmVyRG93bmxvYWRDaGFubmVsLmRhaWx5KSkudG8uYmUuZGVlcC5lcXVhbChbJ2h0dHBzOi8vcHZzYy5henVyZWVkZ2UubmV0JywgJ3B5dGhvbi1sYW5ndWFnZS1zZXJ2ZXItZGFpbHknXSk7XHJcbiAgICB9KTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhbmd1YWdlU2VydmVyUGFja2FnZVJlcG9zaXRvcnkudW5pdC50ZXN0LmpzLm1hcCJdfQ==