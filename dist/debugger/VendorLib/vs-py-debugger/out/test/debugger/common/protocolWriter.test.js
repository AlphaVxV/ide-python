"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-any

const chai_1 = require("chai");

const stream_1 = require("stream");

const main_1 = require("vscode-debugadapter/lib/main");

const protocolWriter_1 = require("../../../client/debugger/debugAdapter/Common/protocolWriter");

suite('Debugging - Protocol Writer', () => {
  test('Test request, response and event messages', () => __awaiter(void 0, void 0, void 0, function* () {
    let dataWritten = '';
    const throughOutStream = new stream_1.Transform({
      transform: (chunk, encoding, callback) => {
        dataWritten += chunk.toString('utf8');
        callback(null, chunk);
      }
    });
    const message = new main_1.InitializedEvent();
    message.seq = 123;
    const writer = new protocolWriter_1.ProtocolMessageWriter();
    writer.write(throughOutStream, message);
    const json = JSON.stringify(message);
    const expectedMessage = `Content-Length: ${Buffer.byteLength(json, 'utf8')}\r\n\r\n${json}`;
    chai_1.expect(dataWritten).to.be.equal(expectedMessage);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb3RvY29sV3JpdGVyLnRlc3QuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImNoYWlfMSIsInJlcXVpcmUiLCJzdHJlYW1fMSIsIm1haW5fMSIsInByb3RvY29sV3JpdGVyXzEiLCJzdWl0ZSIsInRlc3QiLCJkYXRhV3JpdHRlbiIsInRocm91Z2hPdXRTdHJlYW0iLCJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJjaHVuayIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJ0b1N0cmluZyIsIm1lc3NhZ2UiLCJJbml0aWFsaXplZEV2ZW50Iiwic2VxIiwid3JpdGVyIiwiUHJvdG9jb2xNZXNzYWdlV3JpdGVyIiwid3JpdGUiLCJqc29uIiwiSlNPTiIsInN0cmluZ2lmeSIsImV4cGVjdGVkTWVzc2FnZSIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJleHBlY3QiLCJ0byIsImJlIiwiZXF1YWwiXSwibWFwcGluZ3MiOiJBQUFBLGEsQ0FDQTtBQUNBOztBQUNBLElBQUlBLFNBQVMsR0FBSSxVQUFRLFNBQUtBLFNBQWQsSUFBNEIsVUFBVUMsT0FBVixFQUFtQkMsVUFBbkIsRUFBK0JDLENBQS9CLEVBQWtDQyxTQUFsQyxFQUE2QztBQUNyRixTQUFPLEtBQUtELENBQUMsS0FBS0EsQ0FBQyxHQUFHRSxPQUFULENBQU4sRUFBeUIsVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDdkQsYUFBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDTyxJQUFWLENBQWVG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QkgsQ0FqQkksQ0FBTCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIHRzbGludDpkaXNhYmxlOm5vLWFueVxyXG5jb25zdCBjaGFpXzEgPSByZXF1aXJlKFwiY2hhaVwiKTtcclxuY29uc3Qgc3RyZWFtXzEgPSByZXF1aXJlKFwic3RyZWFtXCIpO1xyXG5jb25zdCBtYWluXzEgPSByZXF1aXJlKFwidnNjb2RlLWRlYnVnYWRhcHRlci9saWIvbWFpblwiKTtcclxuY29uc3QgcHJvdG9jb2xXcml0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9jbGllbnQvZGVidWdnZXIvZGVidWdBZGFwdGVyL0NvbW1vbi9wcm90b2NvbFdyaXRlclwiKTtcclxuc3VpdGUoJ0RlYnVnZ2luZyAtIFByb3RvY29sIFdyaXRlcicsICgpID0+IHtcclxuICAgIHRlc3QoJ1Rlc3QgcmVxdWVzdCwgcmVzcG9uc2UgYW5kIGV2ZW50IG1lc3NhZ2VzJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGxldCBkYXRhV3JpdHRlbiA9ICcnO1xyXG4gICAgICAgIGNvbnN0IHRocm91Z2hPdXRTdHJlYW0gPSBuZXcgc3RyZWFtXzEuVHJhbnNmb3JtKHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiAoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGF0YVdyaXR0ZW4gKz0gY2h1bmsudG9TdHJpbmcoJ3V0ZjgnKTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGNodW5rKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBuZXcgbWFpbl8xLkluaXRpYWxpemVkRXZlbnQoKTtcclxuICAgICAgICBtZXNzYWdlLnNlcSA9IDEyMztcclxuICAgICAgICBjb25zdCB3cml0ZXIgPSBuZXcgcHJvdG9jb2xXcml0ZXJfMS5Qcm90b2NvbE1lc3NhZ2VXcml0ZXIoKTtcclxuICAgICAgICB3cml0ZXIud3JpdGUodGhyb3VnaE91dFN0cmVhbSwgbWVzc2FnZSk7XHJcbiAgICAgICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpO1xyXG4gICAgICAgIGNvbnN0IGV4cGVjdGVkTWVzc2FnZSA9IGBDb250ZW50LUxlbmd0aDogJHtCdWZmZXIuYnl0ZUxlbmd0aChqc29uLCAndXRmOCcpfVxcclxcblxcclxcbiR7anNvbn1gO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QoZGF0YVdyaXR0ZW4pLnRvLmJlLmVxdWFsKGV4cGVjdGVkTWVzc2FnZSk7XHJcbiAgICB9KSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm90b2NvbFdyaXRlci50ZXN0LmpzLm1hcCJdfQ==