// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

const child_process_1 = require("child_process");

const path = require("path");

const vscode_debugadapter_testsupport_1 = require("vscode-debugadapter-testsupport");

const constants_1 = require("../../client/common/constants");

const misc_1 = require("../../client/common/utils/misc");

class DebugClientEx extends vscode_debugadapter_testsupport_1.DebugClient {
  constructor(executable, debugType, coverageDirectory, spawnOptions) {
    super('node', '', debugType, spawnOptions);
    this.executable = executable;
    this.coverageDirectory = coverageDirectory;
    this.spawnOptions = spawnOptions;

    this.stopAdapterProcess = () => {
      if (this.adapterProcess) {
        this.adapterProcess.kill();
        this.adapterProcess = undefined;
      }
    };
  }
  /**
   * Starts a new debug adapter and sets up communication via stdin/stdout.
   * If a port number is specified the adapter is not launched but a connection to
   * a debug adapter running in server mode is established. This is useful for debugging
   * the adapter while running tests. For this reason all timeouts are disabled in server mode.
   */


  start(port) {
    return new Promise((resolve, reject) => {
      const runtime = path.join(constants_1.EXTENSION_ROOT_DIR, 'node_modules', '.bin', 'istanbul');
      const args = ['cover', '--report=json', '--print=none', `--dir=${this.coverageDirectory}`, '--handle-sigint', this.executable];
      this.adapterProcess = child_process_1.spawn(runtime, args, this.spawnOptions);
      this.adapterProcess.stderr.on('data', misc_1.noop);
      this.adapterProcess.on('error', err => {
        console.error(err);
        reject(err);
      });
      this.adapterProcess.on('exit', misc_1.noop);
      this.connect(this.adapterProcess.stdout, this.adapterProcess.stdin);
      resolve();
    });
  }

  stop() {
    return this.disconnectRequest().then(this.stopAdapterProcess).catch(this.stopAdapterProcess);
  }

}

exports.DebugClientEx = DebugClientEx;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlYnVnQ2xpZW50LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY2hpbGRfcHJvY2Vzc18xIiwicmVxdWlyZSIsInBhdGgiLCJ2c2NvZGVfZGVidWdhZGFwdGVyX3Rlc3RzdXBwb3J0XzEiLCJjb25zdGFudHNfMSIsIm1pc2NfMSIsIkRlYnVnQ2xpZW50RXgiLCJEZWJ1Z0NsaWVudCIsImNvbnN0cnVjdG9yIiwiZXhlY3V0YWJsZSIsImRlYnVnVHlwZSIsImNvdmVyYWdlRGlyZWN0b3J5Iiwic3Bhd25PcHRpb25zIiwic3RvcEFkYXB0ZXJQcm9jZXNzIiwiYWRhcHRlclByb2Nlc3MiLCJraWxsIiwidW5kZWZpbmVkIiwic3RhcnQiLCJwb3J0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJydW50aW1lIiwiam9pbiIsIkVYVEVOU0lPTl9ST09UX0RJUiIsImFyZ3MiLCJzcGF3biIsInN0ZGVyciIsIm9uIiwibm9vcCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImNvbm5lY3QiLCJzdGRvdXQiLCJzdGRpbiIsInN0b3AiLCJkaXNjb25uZWN0UmVxdWVzdCIsInRoZW4iLCJjYXRjaCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVDLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1DLGVBQWUsR0FBR0MsT0FBTyxDQUFDLGVBQUQsQ0FBL0I7O0FBQ0EsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNRSxpQ0FBaUMsR0FBR0YsT0FBTyxDQUFDLGlDQUFELENBQWpEOztBQUNBLE1BQU1HLFdBQVcsR0FBR0gsT0FBTyxDQUFDLCtCQUFELENBQTNCOztBQUNBLE1BQU1JLE1BQU0sR0FBR0osT0FBTyxDQUFDLGdDQUFELENBQXRCOztBQUNBLE1BQU1LLGFBQU4sU0FBNEJILGlDQUFpQyxDQUFDSSxXQUE5RCxDQUEwRTtBQUN0RUMsRUFBQUEsV0FBVyxDQUFDQyxVQUFELEVBQWFDLFNBQWIsRUFBd0JDLGlCQUF4QixFQUEyQ0MsWUFBM0MsRUFBeUQ7QUFDaEUsVUFBTSxNQUFOLEVBQWMsRUFBZCxFQUFrQkYsU0FBbEIsRUFBNkJFLFlBQTdCO0FBQ0EsU0FBS0gsVUFBTCxHQUFrQkEsVUFBbEI7QUFDQSxTQUFLRSxpQkFBTCxHQUF5QkEsaUJBQXpCO0FBQ0EsU0FBS0MsWUFBTCxHQUFvQkEsWUFBcEI7O0FBQ0EsU0FBS0Msa0JBQUwsR0FBMEIsTUFBTTtBQUM1QixVQUFJLEtBQUtDLGNBQVQsRUFBeUI7QUFDckIsYUFBS0EsY0FBTCxDQUFvQkMsSUFBcEI7QUFDQSxhQUFLRCxjQUFMLEdBQXNCRSxTQUF0QjtBQUNIO0FBQ0osS0FMRDtBQU1IO0FBQ0Q7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDSUMsRUFBQUEsS0FBSyxDQUFDQyxJQUFELEVBQU87QUFDUixXQUFPLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDcEMsWUFBTUMsT0FBTyxHQUFHcEIsSUFBSSxDQUFDcUIsSUFBTCxDQUFVbkIsV0FBVyxDQUFDb0Isa0JBQXRCLEVBQTBDLGNBQTFDLEVBQTBELE1BQTFELEVBQWtFLFVBQWxFLENBQWhCO0FBQ0EsWUFBTUMsSUFBSSxHQUFHLENBQUMsT0FBRCxFQUFVLGVBQVYsRUFBMkIsY0FBM0IsRUFBNEMsU0FBUSxLQUFLZCxpQkFBa0IsRUFBM0UsRUFBOEUsaUJBQTlFLEVBQWlHLEtBQUtGLFVBQXRHLENBQWI7QUFDQSxXQUFLSyxjQUFMLEdBQXNCZCxlQUFlLENBQUMwQixLQUFoQixDQUFzQkosT0FBdEIsRUFBK0JHLElBQS9CLEVBQXFDLEtBQUtiLFlBQTFDLENBQXRCO0FBQ0EsV0FBS0UsY0FBTCxDQUFvQmEsTUFBcEIsQ0FBMkJDLEVBQTNCLENBQThCLE1BQTlCLEVBQXNDdkIsTUFBTSxDQUFDd0IsSUFBN0M7QUFDQSxXQUFLZixjQUFMLENBQW9CYyxFQUFwQixDQUF1QixPQUF2QixFQUFpQ0UsR0FBRCxJQUFTO0FBQ3JDQyxRQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY0YsR0FBZDtBQUNBVCxRQUFBQSxNQUFNLENBQUNTLEdBQUQsQ0FBTjtBQUNILE9BSEQ7QUFJQSxXQUFLaEIsY0FBTCxDQUFvQmMsRUFBcEIsQ0FBdUIsTUFBdkIsRUFBK0J2QixNQUFNLENBQUN3QixJQUF0QztBQUNBLFdBQUtJLE9BQUwsQ0FBYSxLQUFLbkIsY0FBTCxDQUFvQm9CLE1BQWpDLEVBQXlDLEtBQUtwQixjQUFMLENBQW9CcUIsS0FBN0Q7QUFDQWYsTUFBQUEsT0FBTztBQUNWLEtBWk0sQ0FBUDtBQWFIOztBQUNEZ0IsRUFBQUEsSUFBSSxHQUFHO0FBQ0gsV0FBTyxLQUFLQyxpQkFBTCxHQUF5QkMsSUFBekIsQ0FBOEIsS0FBS3pCLGtCQUFuQyxFQUF1RDBCLEtBQXZELENBQTZELEtBQUsxQixrQkFBbEUsQ0FBUDtBQUNIOztBQXBDcUU7O0FBc0MxRWYsT0FBTyxDQUFDUSxhQUFSLEdBQXdCQSxhQUF4QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjaGlsZF9wcm9jZXNzXzEgPSByZXF1aXJlKFwiY2hpbGRfcHJvY2Vzc1wiKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCB2c2NvZGVfZGVidWdhZGFwdGVyX3Rlc3RzdXBwb3J0XzEgPSByZXF1aXJlKFwidnNjb2RlLWRlYnVnYWRhcHRlci10ZXN0c3VwcG9ydFwiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vY2xpZW50L2NvbW1vbi9jb25zdGFudHNcIik7XHJcbmNvbnN0IG1pc2NfMSA9IHJlcXVpcmUoXCIuLi8uLi9jbGllbnQvY29tbW9uL3V0aWxzL21pc2NcIik7XHJcbmNsYXNzIERlYnVnQ2xpZW50RXggZXh0ZW5kcyB2c2NvZGVfZGVidWdhZGFwdGVyX3Rlc3RzdXBwb3J0XzEuRGVidWdDbGllbnQge1xyXG4gICAgY29uc3RydWN0b3IoZXhlY3V0YWJsZSwgZGVidWdUeXBlLCBjb3ZlcmFnZURpcmVjdG9yeSwgc3Bhd25PcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoJ25vZGUnLCAnJywgZGVidWdUeXBlLCBzcGF3bk9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0YWJsZSA9IGV4ZWN1dGFibGU7XHJcbiAgICAgICAgdGhpcy5jb3ZlcmFnZURpcmVjdG9yeSA9IGNvdmVyYWdlRGlyZWN0b3J5O1xyXG4gICAgICAgIHRoaXMuc3Bhd25PcHRpb25zID0gc3Bhd25PcHRpb25zO1xyXG4gICAgICAgIHRoaXMuc3RvcEFkYXB0ZXJQcm9jZXNzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hZGFwdGVyUHJvY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyUHJvY2Vzcy5raWxsKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXJQcm9jZXNzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnRzIGEgbmV3IGRlYnVnIGFkYXB0ZXIgYW5kIHNldHMgdXAgY29tbXVuaWNhdGlvbiB2aWEgc3RkaW4vc3Rkb3V0LlxyXG4gICAgICogSWYgYSBwb3J0IG51bWJlciBpcyBzcGVjaWZpZWQgdGhlIGFkYXB0ZXIgaXMgbm90IGxhdW5jaGVkIGJ1dCBhIGNvbm5lY3Rpb24gdG9cclxuICAgICAqIGEgZGVidWcgYWRhcHRlciBydW5uaW5nIGluIHNlcnZlciBtb2RlIGlzIGVzdGFibGlzaGVkLiBUaGlzIGlzIHVzZWZ1bCBmb3IgZGVidWdnaW5nXHJcbiAgICAgKiB0aGUgYWRhcHRlciB3aGlsZSBydW5uaW5nIHRlc3RzLiBGb3IgdGhpcyByZWFzb24gYWxsIHRpbWVvdXRzIGFyZSBkaXNhYmxlZCBpbiBzZXJ2ZXIgbW9kZS5cclxuICAgICAqL1xyXG4gICAgc3RhcnQocG9ydCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJ1bnRpbWUgPSBwYXRoLmpvaW4oY29uc3RhbnRzXzEuRVhURU5TSU9OX1JPT1RfRElSLCAnbm9kZV9tb2R1bGVzJywgJy5iaW4nLCAnaXN0YW5idWwnKTtcclxuICAgICAgICAgICAgY29uc3QgYXJncyA9IFsnY292ZXInLCAnLS1yZXBvcnQ9anNvbicsICctLXByaW50PW5vbmUnLCBgLS1kaXI9JHt0aGlzLmNvdmVyYWdlRGlyZWN0b3J5fWAsICctLWhhbmRsZS1zaWdpbnQnLCB0aGlzLmV4ZWN1dGFibGVdO1xyXG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJQcm9jZXNzID0gY2hpbGRfcHJvY2Vzc18xLnNwYXduKHJ1bnRpbWUsIGFyZ3MsIHRoaXMuc3Bhd25PcHRpb25zKTtcclxuICAgICAgICAgICAgdGhpcy5hZGFwdGVyUHJvY2Vzcy5zdGRlcnIub24oJ2RhdGEnLCBtaXNjXzEubm9vcCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlclByb2Nlc3Mub24oJ2Vycm9yJywgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXJQcm9jZXNzLm9uKCdleGl0JywgbWlzY18xLm5vb3ApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3QodGhpcy5hZGFwdGVyUHJvY2Vzcy5zdGRvdXQsIHRoaXMuYWRhcHRlclByb2Nlc3Muc3RkaW4pO1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdG9wKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3RSZXF1ZXN0KCkudGhlbih0aGlzLnN0b3BBZGFwdGVyUHJvY2VzcykuY2F0Y2godGhpcy5zdG9wQWRhcHRlclByb2Nlc3MpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuRGVidWdDbGllbnRFeCA9IERlYnVnQ2xpZW50RXg7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnQ2xpZW50LmpzLm1hcCJdfQ==