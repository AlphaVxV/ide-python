"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const chai_1 = require("chai");

const vscode_1 = require("vscode");

const constants_1 = require("../../client/common/constants");

const initialize_1 = require("../initialize"); // NOTE:
// We need this to be run first, as this ensures the extension activates.
// Sometimes it can take more than 25 seconds to complete (as the extension looks for interpeters, and the like).
// So lets wait for a max of 1 minute for the extension to activate (note, subsequent load times are faster).


suite('Activate Extension', () => {
  suiteSetup(function () {
    return __awaiter(this, void 0, void 0, function* () {
      // tslint:disable-next-line:no-invalid-this
      this.timeout(60000);
      yield initialize_1.initialize();
    });
  });
  test('Python extension has activated', () => __awaiter(void 0, void 0, void 0, function* () {
    chai_1.expect(vscode_1.extensions.getExtension(constants_1.PVSC_EXTENSION_ID).isActive).to.equal(true, 'Extension has not been activated');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFhRmlyc3RUZXN0LnRlc3QuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImNoYWlfMSIsInJlcXVpcmUiLCJ2c2NvZGVfMSIsImNvbnN0YW50c18xIiwiaW5pdGlhbGl6ZV8xIiwic3VpdGUiLCJzdWl0ZVNldHVwIiwidGltZW91dCIsImluaXRpYWxpemUiLCJ0ZXN0IiwiZXhwZWN0IiwiZXh0ZW5zaW9ucyIsImdldEV4dGVuc2lvbiIsIlBWU0NfRVhURU5TSU9OX0lEIiwiaXNBY3RpdmUiLCJ0byIsImVxdWFsIl0sIm1hcHBpbmdzIjoiQUFBQSxhLENBQ0E7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDOUYsYUFBU0YsSUFBVCxDQUFjSSxNQUFkLEVBQXNCO0FBQUVBLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjVCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFyQixHQUFzQyxJQUFJTixDQUFKLENBQU0sVUFBVUcsT0FBVixFQUFtQjtBQUFFQSxRQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFQO0FBQXdCLE9BQW5ELEVBQXFETyxJQUFyRCxDQUEwRFIsU0FBMUQsRUFBcUVLLFFBQXJFLENBQXRDO0FBQXVIOztBQUMvSUgsSUFBQUEsSUFBSSxDQUFDLENBQUNOLFNBQVMsR0FBR0EsU0FBUyxDQUFDYSxLQUFWLENBQWdCaEIsT0FBaEIsRUFBeUJDLFVBQVUsSUFBSSxFQUF2QyxDQUFiLEVBQXlEUyxJQUF6RCxFQUFELENBQUo7QUFDSCxHQUxNLENBQVA7QUFNSCxDQVBEOztBQVFBTyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQUVYLEVBQUFBLEtBQUssRUFBRTtBQUFULENBQTdDOztBQUNBLE1BQU1ZLE1BQU0sR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBdEI7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUF4Qjs7QUFDQSxNQUFNRSxXQUFXLEdBQUdGLE9BQU8sQ0FBQywrQkFBRCxDQUEzQjs7QUFDQSxNQUFNRyxZQUFZLEdBQUdILE9BQU8sQ0FBQyxlQUFELENBQTVCLEMsQ0FDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FJLEtBQUssQ0FBQyxvQkFBRCxFQUF1QixNQUFNO0FBQzlCQyxFQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNuQixXQUFPM0IsU0FBUyxDQUFDLElBQUQsRUFBTyxLQUFLLENBQVosRUFBZSxLQUFLLENBQXBCLEVBQXVCLGFBQWE7QUFDaEQ7QUFDQSxXQUFLNEIsT0FBTCxDQUFhLEtBQWI7QUFDQSxZQUFNSCxZQUFZLENBQUNJLFVBQWIsRUFBTjtBQUNILEtBSmUsQ0FBaEI7QUFLSCxHQU5TLENBQVY7QUFPQUMsRUFBQUEsSUFBSSxDQUFDLGdDQUFELEVBQW1DLE1BQU05QixTQUFTLFNBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ3RGcUIsSUFBQUEsTUFBTSxDQUFDVSxNQUFQLENBQWNSLFFBQVEsQ0FBQ1MsVUFBVCxDQUFvQkMsWUFBcEIsQ0FBaUNULFdBQVcsQ0FBQ1UsaUJBQTdDLEVBQWdFQyxRQUE5RSxFQUF3RkMsRUFBeEYsQ0FBMkZDLEtBQTNGLENBQWlHLElBQWpHLEVBQXVHLGtDQUF2RztBQUNILEdBRnFELENBQWxELENBQUo7QUFHSCxDQVhJLENBQUwiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjaGFpXzEgPSByZXF1aXJlKFwiY2hhaVwiKTtcclxuY29uc3QgdnNjb2RlXzEgPSByZXF1aXJlKFwidnNjb2RlXCIpO1xyXG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jbGllbnQvY29tbW9uL2NvbnN0YW50c1wiKTtcclxuY29uc3QgaW5pdGlhbGl6ZV8xID0gcmVxdWlyZShcIi4uL2luaXRpYWxpemVcIik7XHJcbi8vIE5PVEU6XHJcbi8vIFdlIG5lZWQgdGhpcyB0byBiZSBydW4gZmlyc3QsIGFzIHRoaXMgZW5zdXJlcyB0aGUgZXh0ZW5zaW9uIGFjdGl2YXRlcy5cclxuLy8gU29tZXRpbWVzIGl0IGNhbiB0YWtlIG1vcmUgdGhhbiAyNSBzZWNvbmRzIHRvIGNvbXBsZXRlIChhcyB0aGUgZXh0ZW5zaW9uIGxvb2tzIGZvciBpbnRlcnBldGVycywgYW5kIHRoZSBsaWtlKS5cclxuLy8gU28gbGV0cyB3YWl0IGZvciBhIG1heCBvZiAxIG1pbnV0ZSBmb3IgdGhlIGV4dGVuc2lvbiB0byBhY3RpdmF0ZSAobm90ZSwgc3Vic2VxdWVudCBsb2FkIHRpbWVzIGFyZSBmYXN0ZXIpLlxyXG5zdWl0ZSgnQWN0aXZhdGUgRXh0ZW5zaW9uJywgKCkgPT4ge1xyXG4gICAgc3VpdGVTZXR1cChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWludmFsaWQtdGhpc1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVvdXQoNjAwMDApO1xyXG4gICAgICAgICAgICB5aWVsZCBpbml0aWFsaXplXzEuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICB0ZXN0KCdQeXRob24gZXh0ZW5zaW9uIGhhcyBhY3RpdmF0ZWQnLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY2hhaV8xLmV4cGVjdCh2c2NvZGVfMS5leHRlbnNpb25zLmdldEV4dGVuc2lvbihjb25zdGFudHNfMS5QVlNDX0VYVEVOU0lPTl9JRCkuaXNBY3RpdmUpLnRvLmVxdWFsKHRydWUsICdFeHRlbnNpb24gaGFzIG5vdCBiZWVuIGFjdGl2YXRlZCcpO1xyXG4gICAgfSkpO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWFGaXJzdFRlc3QudGVzdC5qcy5tYXAiXX0=