// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-any no-require-imports no-var-requires

if (Reflect.metadata === undefined) {
  require('reflect-metadata');
} // Custom module loader so we skip .css files that break non webpack wrapped compiles
// tslint:disable-next-line:no-var-requires no-require-imports


const Module = require('module'); // tslint:disable-next-line:no-function-expression


(function () {
  const origRequire = Module.prototype.require;

  const _require = (context, filepath) => {
    return origRequire.call(context, filepath);
  };

  Module.prototype.require = function (filepath) {
    if (filepath.endsWith('.css')) {
      return '';
    } // tslint:disable-next-line:no-invalid-this


    return _require(this, filepath);
  };
})();

const glob = require("glob");

const Mocha = require("mocha");

const path = require("path");

const ciConstants_1 = require("./ciConstants");

const reactHelpers_1 = require("./datascience/reactHelpers");

const vscodeMoscks = require("./vscode-mock");

process.env.VSC_PYTHON_CI_TEST = '1';

function runTests(testOptions) {
  // nteract/transforms-full expects to run in the browser so we have to fake
  // parts of the browser here.
  reactHelpers_1.setUpDomEnvironment();
  vscodeMoscks.initialize();
  const grep = testOptions ? testOptions.grep : undefined;
  const timeout = testOptions ? testOptions.timeout : undefined;
  const filePattern = testOptions ? testOptions.filePattern : '**/**.unit.test.js';
  const options = {
    ui: 'tdd',
    useColors: true,
    timeout,
    grep
  };
  let temp_mocha;

  if (ciConstants_1.MOCHA_REPORTER_JUNIT === true) {
    temp_mocha = new Mocha({
      grep: undefined,
      ui: 'tdd',
      timeout,
      reporter: ciConstants_1.MOCHA_CI_REPORTER_ID,
      reporterOptions: {
        useColors: false,
        mochaFile: ciConstants_1.MOCHA_CI_REPORTFILE,
        bail: false
      },
      slow: undefined
    });
  } else {
    // we are running on the command line or debugger...
    temp_mocha = new Mocha(options);
  }

  const mocha = temp_mocha;

  require('source-map-support').install();

  const testsRoot = __dirname;
  glob(filePattern, {
    cwd: testsRoot
  }, (error, files) => {
    if (error) {
      return reportErrors(error);
    }

    try {
      files.forEach(file => mocha.addFile(path.join(testsRoot, file)));
      mocha.run(failures => {
        if (failures === 0) {
          return;
        }

        reportErrors(undefined, failures);
      });
    } catch (error) {
      reportErrors(error);
    }
  });
}

exports.runTests = runTests;

function reportErrors(error, failures) {
  let failed = false;

  if (error) {
    console.error(error);
    failed = true;
  }

  if (failures && failures >= 0) {
    console.error(`${failures} failed tests ðŸ‘Ž.`);
    failed = true;
  }

  if (failed) {
    process.exit(1);
  }
}

function extractParams(defaultTimeout) {
  // When running from debugger, allow custom args.
  const args = process.argv0.length > 2 ? process.argv.slice(2) : [];
  const timeoutArgIndex = args.findIndex(arg => arg.startsWith('timeout='));
  const grepArgIndex = args.findIndex(arg => arg.startsWith('grep='));
  const timeout = timeoutArgIndex >= 0 ? parseInt(args[timeoutArgIndex].split('=')[1].trim(), 10) : defaultTimeout;
  let grep = grepArgIndex >= 0 ? args[grepArgIndex].split('=')[1].trim() : undefined;
  grep = grep && grep.length > 0 ? grep : undefined;
  return {
    grep: grep,
    timeout: timeout
  };
}

exports.extractParams = extractParams;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vblVpVGVzdHMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSZWZsZWN0IiwibWV0YWRhdGEiLCJ1bmRlZmluZWQiLCJyZXF1aXJlIiwiTW9kdWxlIiwib3JpZ1JlcXVpcmUiLCJwcm90b3R5cGUiLCJfcmVxdWlyZSIsImNvbnRleHQiLCJmaWxlcGF0aCIsImNhbGwiLCJlbmRzV2l0aCIsImdsb2IiLCJNb2NoYSIsInBhdGgiLCJjaUNvbnN0YW50c18xIiwicmVhY3RIZWxwZXJzXzEiLCJ2c2NvZGVNb3Nja3MiLCJwcm9jZXNzIiwiZW52IiwiVlNDX1BZVEhPTl9DSV9URVNUIiwicnVuVGVzdHMiLCJ0ZXN0T3B0aW9ucyIsInNldFVwRG9tRW52aXJvbm1lbnQiLCJpbml0aWFsaXplIiwiZ3JlcCIsInRpbWVvdXQiLCJmaWxlUGF0dGVybiIsIm9wdGlvbnMiLCJ1aSIsInVzZUNvbG9ycyIsInRlbXBfbW9jaGEiLCJNT0NIQV9SRVBPUlRFUl9KVU5JVCIsInJlcG9ydGVyIiwiTU9DSEFfQ0lfUkVQT1JURVJfSUQiLCJyZXBvcnRlck9wdGlvbnMiLCJtb2NoYUZpbGUiLCJNT0NIQV9DSV9SRVBPUlRGSUxFIiwiYmFpbCIsInNsb3ciLCJtb2NoYSIsImluc3RhbGwiLCJ0ZXN0c1Jvb3QiLCJfX2Rpcm5hbWUiLCJjd2QiLCJlcnJvciIsImZpbGVzIiwicmVwb3J0RXJyb3JzIiwiZm9yRWFjaCIsImZpbGUiLCJhZGRGaWxlIiwiam9pbiIsInJ1biIsImZhaWx1cmVzIiwiZmFpbGVkIiwiY29uc29sZSIsImV4aXQiLCJleHRyYWN0UGFyYW1zIiwiZGVmYXVsdFRpbWVvdXQiLCJhcmdzIiwiYXJndjAiLCJsZW5ndGgiLCJhcmd2Iiwic2xpY2UiLCJ0aW1lb3V0QXJnSW5kZXgiLCJmaW5kSW5kZXgiLCJhcmciLCJzdGFydHNXaXRoIiwiZ3JlcEFyZ0luZGV4IiwicGFyc2VJbnQiLCJzcGxpdCIsInRyaW0i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SUFBSSxDQUFDb0MsTUFBTCxHQUFjLENBQXRCLEdBQTBCcEMsSUFBMUIsR0FBaUN2QixTQUF4QztBQUNBLFNBQU87QUFBRXVCLElBQUFBLElBQUksRUFBRUEsSUFBUjtBQUFjQyxJQUFBQSxPQUFPLEVBQUVBO0FBQXZCLEdBQVA7QUFDSDs7QUFDRDVCLE9BQU8sQ0FBQzJELGFBQVIsR0FBd0JBLGFBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIHRzbGludDpkaXNhYmxlOm5vLWFueSBuby1yZXF1aXJlLWltcG9ydHMgbm8tdmFyLXJlcXVpcmVzXHJcbmlmIChSZWZsZWN0Lm1ldGFkYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgIHJlcXVpcmUoJ3JlZmxlY3QtbWV0YWRhdGEnKTtcclxufVxyXG4vLyBDdXN0b20gbW9kdWxlIGxvYWRlciBzbyB3ZSBza2lwIC5jc3MgZmlsZXMgdGhhdCBicmVhayBub24gd2VicGFjayB3cmFwcGVkIGNvbXBpbGVzXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby12YXItcmVxdWlyZXMgbm8tcmVxdWlyZS1pbXBvcnRzXHJcbmNvbnN0IE1vZHVsZSA9IHJlcXVpcmUoJ21vZHVsZScpO1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZnVuY3Rpb24tZXhwcmVzc2lvblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3Qgb3JpZ1JlcXVpcmUgPSBNb2R1bGUucHJvdG90eXBlLnJlcXVpcmU7XHJcbiAgICBjb25zdCBfcmVxdWlyZSA9IChjb250ZXh0LCBmaWxlcGF0aCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBvcmlnUmVxdWlyZS5jYWxsKGNvbnRleHQsIGZpbGVwYXRoKTtcclxuICAgIH07XHJcbiAgICBNb2R1bGUucHJvdG90eXBlLnJlcXVpcmUgPSBmdW5jdGlvbiAoZmlsZXBhdGgpIHtcclxuICAgICAgICBpZiAoZmlsZXBhdGguZW5kc1dpdGgoJy5jc3MnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1pbnZhbGlkLXRoaXNcclxuICAgICAgICByZXR1cm4gX3JlcXVpcmUodGhpcywgZmlsZXBhdGgpO1xyXG4gICAgfTtcclxufSkoKTtcclxuY29uc3QgZ2xvYiA9IHJlcXVpcmUoXCJnbG9iXCIpO1xyXG5jb25zdCBNb2NoYSA9IHJlcXVpcmUoXCJtb2NoYVwiKTtcclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xyXG5jb25zdCBjaUNvbnN0YW50c18xID0gcmVxdWlyZShcIi4vY2lDb25zdGFudHNcIik7XHJcbmNvbnN0IHJlYWN0SGVscGVyc18xID0gcmVxdWlyZShcIi4vZGF0YXNjaWVuY2UvcmVhY3RIZWxwZXJzXCIpO1xyXG5jb25zdCB2c2NvZGVNb3Nja3MgPSByZXF1aXJlKFwiLi92c2NvZGUtbW9ja1wiKTtcclxucHJvY2Vzcy5lbnYuVlNDX1BZVEhPTl9DSV9URVNUID0gJzEnO1xyXG5mdW5jdGlvbiBydW5UZXN0cyh0ZXN0T3B0aW9ucykge1xyXG4gICAgLy8gbnRlcmFjdC90cmFuc2Zvcm1zLWZ1bGwgZXhwZWN0cyB0byBydW4gaW4gdGhlIGJyb3dzZXIgc28gd2UgaGF2ZSB0byBmYWtlXHJcbiAgICAvLyBwYXJ0cyBvZiB0aGUgYnJvd3NlciBoZXJlLlxyXG4gICAgcmVhY3RIZWxwZXJzXzEuc2V0VXBEb21FbnZpcm9ubWVudCgpO1xyXG4gICAgdnNjb2RlTW9zY2tzLmluaXRpYWxpemUoKTtcclxuICAgIGNvbnN0IGdyZXAgPSB0ZXN0T3B0aW9ucyA/IHRlc3RPcHRpb25zLmdyZXAgOiB1bmRlZmluZWQ7XHJcbiAgICBjb25zdCB0aW1lb3V0ID0gdGVzdE9wdGlvbnMgPyB0ZXN0T3B0aW9ucy50aW1lb3V0IDogdW5kZWZpbmVkO1xyXG4gICAgY29uc3QgZmlsZVBhdHRlcm4gPSB0ZXN0T3B0aW9ucyA/IHRlc3RPcHRpb25zLmZpbGVQYXR0ZXJuIDogJyoqLyoqLnVuaXQudGVzdC5qcyc7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgIHVpOiAndGRkJyxcclxuICAgICAgICB1c2VDb2xvcnM6IHRydWUsXHJcbiAgICAgICAgdGltZW91dCxcclxuICAgICAgICBncmVwXHJcbiAgICB9O1xyXG4gICAgbGV0IHRlbXBfbW9jaGE7XHJcbiAgICBpZiAoY2lDb25zdGFudHNfMS5NT0NIQV9SRVBPUlRFUl9KVU5JVCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHRlbXBfbW9jaGEgPSBuZXcgTW9jaGEoe1xyXG4gICAgICAgICAgICBncmVwOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHVpOiAndGRkJyxcclxuICAgICAgICAgICAgdGltZW91dCxcclxuICAgICAgICAgICAgcmVwb3J0ZXI6IGNpQ29uc3RhbnRzXzEuTU9DSEFfQ0lfUkVQT1JURVJfSUQsXHJcbiAgICAgICAgICAgIHJlcG9ydGVyT3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgdXNlQ29sb3JzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIG1vY2hhRmlsZTogY2lDb25zdGFudHNfMS5NT0NIQV9DSV9SRVBPUlRGSUxFLFxyXG4gICAgICAgICAgICAgICAgYmFpbDogZmFsc2VcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2xvdzogdW5kZWZpbmVkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyB3ZSBhcmUgcnVubmluZyBvbiB0aGUgY29tbWFuZCBsaW5lIG9yIGRlYnVnZ2VyLi4uXHJcbiAgICAgICAgdGVtcF9tb2NoYSA9IG5ldyBNb2NoYShvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGNvbnN0IG1vY2hhID0gdGVtcF9tb2NoYTtcclxuICAgIHJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcclxuICAgIGNvbnN0IHRlc3RzUm9vdCA9IF9fZGlybmFtZTtcclxuICAgIGdsb2IoZmlsZVBhdHRlcm4sIHsgY3dkOiB0ZXN0c1Jvb3QgfSwgKGVycm9yLCBmaWxlcykgPT4ge1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVwb3J0RXJyb3JzKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IG1vY2hhLmFkZEZpbGUocGF0aC5qb2luKHRlc3RzUm9vdCwgZmlsZSkpKTtcclxuICAgICAgICAgICAgbW9jaGEucnVuKGZhaWx1cmVzID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChmYWlsdXJlcyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlcG9ydEVycm9ycyh1bmRlZmluZWQsIGZhaWx1cmVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZXBvcnRFcnJvcnMoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMucnVuVGVzdHMgPSBydW5UZXN0cztcclxuZnVuY3Rpb24gcmVwb3J0RXJyb3JzKGVycm9yLCBmYWlsdXJlcykge1xyXG4gICAgbGV0IGZhaWxlZCA9IGZhbHNlO1xyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgZmFpbGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChmYWlsdXJlcyAmJiBmYWlsdXJlcyA+PSAwKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihgJHtmYWlsdXJlc30gZmFpbGVkIHRlc3RzIPCfkY4uYCk7XHJcbiAgICAgICAgZmFpbGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChmYWlsZWQpIHtcclxuICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdFBhcmFtcyhkZWZhdWx0VGltZW91dCkge1xyXG4gICAgLy8gV2hlbiBydW5uaW5nIGZyb20gZGVidWdnZXIsIGFsbG93IGN1c3RvbSBhcmdzLlxyXG4gICAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndjAubGVuZ3RoID4gMiA/IHByb2Nlc3MuYXJndi5zbGljZSgyKSA6IFtdO1xyXG4gICAgY29uc3QgdGltZW91dEFyZ0luZGV4ID0gYXJncy5maW5kSW5kZXgoYXJnID0+IGFyZy5zdGFydHNXaXRoKCd0aW1lb3V0PScpKTtcclxuICAgIGNvbnN0IGdyZXBBcmdJbmRleCA9IGFyZ3MuZmluZEluZGV4KGFyZyA9PiBhcmcuc3RhcnRzV2l0aCgnZ3JlcD0nKSk7XHJcbiAgICBjb25zdCB0aW1lb3V0ID0gdGltZW91dEFyZ0luZGV4ID49IDAgPyBwYXJzZUludChhcmdzW3RpbWVvdXRBcmdJbmRleF0uc3BsaXQoJz0nKVsxXS50cmltKCksIDEwKSA6IGRlZmF1bHRUaW1lb3V0O1xyXG4gICAgbGV0IGdyZXAgPSBncmVwQXJnSW5kZXggPj0gMCA/IGFyZ3NbZ3JlcEFyZ0luZGV4XS5zcGxpdCgnPScpWzFdLnRyaW0oKSA6IHVuZGVmaW5lZDtcclxuICAgIGdyZXAgPSBncmVwICYmIGdyZXAubGVuZ3RoID4gMCA/IGdyZXAgOiB1bmRlZmluZWQ7XHJcbiAgICByZXR1cm4geyBncmVwOiBncmVwLCB0aW1lb3V0OiB0aW1lb3V0IH07XHJcbn1cclxuZXhwb3J0cy5leHRyYWN0UGFyYW1zID0gZXh0cmFjdFBhcmFtcztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9uVWlUZXN0cy5qcy5tYXAiXX0=