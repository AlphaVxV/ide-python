// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-object-literal-type-assertion

const chai_1 = require("chai");

const baseLinter_1 = require("../../client/linters/baseLinter");

const mypy_1 = require("../../client/linters/mypy"); // This following is a real-world example. See gh=2380.
// tslint:disable-next-line:no-multiline-string


const output = `
provider.pyi:10: error: Incompatible types in assignment (expression has type "str", variable has type "int")
provider.pyi:11: error: Name 'not_declared_var' is not defined
`;
suite('Linting - MyPy', () => {
  test('regex', () => __awaiter(void 0, void 0, void 0, function* () {
    const lines = output.split('\n');
    const tests = [[lines[1], {
      code: undefined,
      message: 'Incompatible types in assignment (expression has type "str", variable has type "int")',
      column: 0,
      line: 10,
      type: 'error',
      provider: 'mypy'
    }], [lines[2], {
      code: undefined,
      message: 'Name \'not_declared_var\' is not defined',
      column: 0,
      line: 11,
      type: 'error',
      provider: 'mypy'
    }]];

    for (const [line, expected] of tests) {
      const msg = baseLinter_1.parseLine(line, mypy_1.REGEX, 'mypy');
      chai_1.expect(msg).to.deep.equal(expected);
    }
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm15cHkudW5pdC50ZXN0LmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJjaGFpXzEiLCJyZXF1aXJlIiwiYmFzZUxpbnRlcl8xIiwibXlweV8xIiwib3V0cHV0Iiwic3VpdGUiLCJ0ZXN0IiwibGluZXMiLCJzcGxpdCIsInRlc3RzIiwiY29kZSIsInVuZGVmaW5lZCIsIm1lc3NhZ2UiLCJjb2x1bW4iLCJsaW5lIiwidHlwZSIsInByb3ZpZGVyIiwiZXhwZWN0ZWQiLCJtc2ciLCJwYXJzZUxpbmUiLCJSRUdFWCIsImV4cGVjdCIsInRvIiwiZGVlcCIsImVxdWFsIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFB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Q29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbi8vIHRzbGludDpkaXNhYmxlOm5vLW9iamVjdC1saXRlcmFsLXR5cGUtYXNzZXJ0aW9uXHJcbmNvbnN0IGNoYWlfMSA9IHJlcXVpcmUoXCJjaGFpXCIpO1xyXG5jb25zdCBiYXNlTGludGVyXzEgPSByZXF1aXJlKFwiLi4vLi4vY2xpZW50L2xpbnRlcnMvYmFzZUxpbnRlclwiKTtcclxuY29uc3QgbXlweV8xID0gcmVxdWlyZShcIi4uLy4uL2NsaWVudC9saW50ZXJzL215cHlcIik7XHJcbi8vIFRoaXMgZm9sbG93aW5nIGlzIGEgcmVhbC13b3JsZCBleGFtcGxlLiBTZWUgZ2g9MjM4MC5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLW11bHRpbGluZS1zdHJpbmdcclxuY29uc3Qgb3V0cHV0ID0gYFxyXG5wcm92aWRlci5weWk6MTA6IGVycm9yOiBJbmNvbXBhdGlibGUgdHlwZXMgaW4gYXNzaWdubWVudCAoZXhwcmVzc2lvbiBoYXMgdHlwZSBcInN0clwiLCB2YXJpYWJsZSBoYXMgdHlwZSBcImludFwiKVxyXG5wcm92aWRlci5weWk6MTE6IGVycm9yOiBOYW1lICdub3RfZGVjbGFyZWRfdmFyJyBpcyBub3QgZGVmaW5lZFxyXG5gO1xyXG5zdWl0ZSgnTGludGluZyAtIE15UHknLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCdyZWdleCcsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCBsaW5lcyA9IG91dHB1dC5zcGxpdCgnXFxuJyk7XHJcbiAgICAgICAgY29uc3QgdGVzdHMgPSBbXHJcbiAgICAgICAgICAgIFtsaW5lc1sxXSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW5jb21wYXRpYmxlIHR5cGVzIGluIGFzc2lnbm1lbnQgKGV4cHJlc3Npb24gaGFzIHR5cGUgXCJzdHJcIiwgdmFyaWFibGUgaGFzIHR5cGUgXCJpbnRcIiknLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbjogMCxcclxuICAgICAgICAgICAgICAgICAgICBsaW5lOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyOiAnbXlweSdcclxuICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICBbbGluZXNbMl0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ05hbWUgXFwnbm90X2RlY2xhcmVkX3ZhclxcJyBpcyBub3QgZGVmaW5lZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IDExLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6ICdteXB5J1xyXG4gICAgICAgICAgICAgICAgfV1cclxuICAgICAgICBdO1xyXG4gICAgICAgIGZvciAoY29uc3QgW2xpbmUsIGV4cGVjdGVkXSBvZiB0ZXN0cykge1xyXG4gICAgICAgICAgICBjb25zdCBtc2cgPSBiYXNlTGludGVyXzEucGFyc2VMaW5lKGxpbmUsIG15cHlfMS5SRUdFWCwgJ215cHknKTtcclxuICAgICAgICAgICAgY2hhaV8xLmV4cGVjdChtc2cpLnRvLmRlZXAuZXF1YWwoZXhwZWN0ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH0pKTtcclxufSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW15cHkudW5pdC50ZXN0LmpzLm1hcCJdfQ==