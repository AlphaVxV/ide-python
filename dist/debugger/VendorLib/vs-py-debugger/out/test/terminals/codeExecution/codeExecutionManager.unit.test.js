"use strict"; // Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-multiline-string no-trailing-whitespace

const chai_1 = require("chai");

const TypeMoq = require("typemoq");

const vscode_1 = require("vscode");

const constants_1 = require("../../../client/common/constants");

const codeExecutionManager_1 = require("../../../client/terminals/codeExecution/codeExecutionManager");

const types_1 = require("../../../client/terminals/types"); // tslint:disable-next-line:max-func-body-length


suite('Terminal - Code Execution Manager', () => {
  let executionManager;
  let workspace;
  let commandManager;
  let disposables = [];
  let serviceContainer;
  let documentManager;
  setup(() => {
    workspace = TypeMoq.Mock.ofType();
    workspace.setup(c => c.onDidChangeWorkspaceFolders(TypeMoq.It.isAny(), TypeMoq.It.isAny(), TypeMoq.It.isAny())).returns(() => {
      return {
        dispose: () => void 0
      };
    });
    documentManager = TypeMoq.Mock.ofType();
    commandManager = TypeMoq.Mock.ofType();
    serviceContainer = TypeMoq.Mock.ofType();
    executionManager = new codeExecutionManager_1.CodeExecutionManager(commandManager.object, documentManager.object, disposables, serviceContainer.object);
  });
  teardown(() => {
    disposables.forEach(disposable => {
      if (disposable) {
        disposable.dispose();
      }
    });
    disposables = [];
  });
  test('Ensure commands are registered', () => __awaiter(void 0, void 0, void 0, function* () {
    executionManager.registerCommands();
    commandManager.verify(c => c.registerCommand(TypeMoq.It.isValue(constants_1.Commands.Exec_In_Terminal), TypeMoq.It.isAny()), TypeMoq.Times.once());
    commandManager.verify(c => c.registerCommand(TypeMoq.It.isValue(constants_1.Commands.Exec_Selection_In_Terminal), TypeMoq.It.isAny()), TypeMoq.Times.once());
    commandManager.verify(c => c.registerCommand(TypeMoq.It.isValue(constants_1.Commands.Exec_Selection_In_Django_Shell), TypeMoq.It.isAny()), TypeMoq.Times.once());
  }));
  test('Ensure executeFileInterTerminal will do nothing if no file is avialble', () => __awaiter(void 0, void 0, void 0, function* () {
    let commandHandler; // tslint:disable-next-line:no-any

    commandManager.setup(c => c.registerCommand).returns(() => {
      // tslint:disable-next-line:no-any
      return (command, callback, _thisArg) => {
        if (command === constants_1.Commands.Exec_In_Terminal) {
          commandHandler = callback;
        }

        return {
          dispose: () => void 0
        };
      };
    });
    executionManager.registerCommands();
    chai_1.expect(commandHandler).not.to.be.an('undefined', 'Command handler not initialized');
    const helper = TypeMoq.Mock.ofType();
    serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionHelper))).returns(() => helper.object);
    yield commandHandler();
    helper.verify(h => __awaiter(this, void 0, void 0, function* () {
      return h.getFileToExecute();
    }), TypeMoq.Times.once());
  }));
  test('Ensure executeFileInterTerminal will use provided file', () => __awaiter(void 0, void 0, void 0, function* () {
    let commandHandler; // tslint:disable-next-line:no-any

    commandManager.setup(c => c.registerCommand).returns(() => {
      // tslint:disable-next-line:no-any
      return (command, callback, _thisArg) => {
        if (command === constants_1.Commands.Exec_In_Terminal) {
          commandHandler = callback;
        }

        return {
          dispose: () => void 0
        };
      };
    });
    executionManager.registerCommands();
    chai_1.expect(commandHandler).not.to.be.an('undefined', 'Command handler not initialized');
    const helper = TypeMoq.Mock.ofType();
    serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionHelper))).returns(() => helper.object);
    const executionService = TypeMoq.Mock.ofType();
    serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionService), TypeMoq.It.isValue('standard'))).returns(() => executionService.object);
    const fileToExecute = vscode_1.Uri.file('x');
    yield commandHandler(fileToExecute);
    helper.verify(h => __awaiter(this, void 0, void 0, function* () {
      return h.getFileToExecute();
    }), TypeMoq.Times.never());
    executionService.verify(e => __awaiter(this, void 0, void 0, function* () {
      return e.executeFile(TypeMoq.It.isValue(fileToExecute));
    }), TypeMoq.Times.once());
  }));
  test('Ensure executeFileInterTerminal will use active file', () => __awaiter(void 0, void 0, void 0, function* () {
    let commandHandler; // tslint:disable-next-line:no-any

    commandManager.setup(c => c.registerCommand).returns(() => {
      // tslint:disable-next-line:no-any
      return (command, callback, _thisArg) => {
        if (command === constants_1.Commands.Exec_In_Terminal) {
          commandHandler = callback;
        }

        return {
          dispose: () => void 0
        };
      };
    });
    executionManager.registerCommands();
    chai_1.expect(commandHandler).not.to.be.an('undefined', 'Command handler not initialized');
    const fileToExecute = vscode_1.Uri.file('x');
    const helper = TypeMoq.Mock.ofType();
    serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionHelper))).returns(() => helper.object);
    helper.setup(h => __awaiter(this, void 0, void 0, function* () {
      return h.getFileToExecute();
    })).returns(() => Promise.resolve(fileToExecute));
    const executionService = TypeMoq.Mock.ofType();
    serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionService), TypeMoq.It.isValue('standard'))).returns(() => executionService.object);
    yield commandHandler(fileToExecute);
    executionService.verify(e => __awaiter(this, void 0, void 0, function* () {
      return e.executeFile(TypeMoq.It.isValue(fileToExecute));
    }), TypeMoq.Times.once());
  }));

  function testExecutionOfSelectionWithoutAnyActiveDocument(commandId, executionSericeId) {
    return __awaiter(this, void 0, void 0, function* () {
      let commandHandler; // tslint:disable-next-line:no-any

      commandManager.setup(c => c.registerCommand).returns(() => {
        // tslint:disable-next-line:no-any
        return (command, callback, _thisArg) => {
          if (command === commandId) {
            commandHandler = callback;
          }

          return {
            dispose: () => void 0
          };
        };
      });
      executionManager.registerCommands();
      chai_1.expect(commandHandler).not.to.be.an('undefined', 'Command handler not initialized');
      const helper = TypeMoq.Mock.ofType();
      serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionHelper))).returns(() => helper.object);
      const executionService = TypeMoq.Mock.ofType();
      serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionService), TypeMoq.It.isValue(executionSericeId))).returns(() => executionService.object);
      documentManager.setup(d => d.activeTextEditor).returns(() => undefined);
      yield commandHandler();
      executionService.verify(e => __awaiter(this, void 0, void 0, function* () {
        return e.execute(TypeMoq.It.isAny());
      }), TypeMoq.Times.never());
    });
  }

  test('Ensure executeSelectionInTerminal will do nothing if theres no active document', () => __awaiter(void 0, void 0, void 0, function* () {
    yield testExecutionOfSelectionWithoutAnyActiveDocument(constants_1.Commands.Exec_Selection_In_Terminal, 'standard');
  }));
  test('Ensure executeSelectionInDjangoShell will do nothing if theres no active document', () => __awaiter(void 0, void 0, void 0, function* () {
    yield testExecutionOfSelectionWithoutAnyActiveDocument(constants_1.Commands.Exec_Selection_In_Django_Shell, 'djangoShell');
  }));

  function testExecutionOfSlectionWithoutAnythingSelected(commandId, executionServiceId) {
    return __awaiter(this, void 0, void 0, function* () {
      let commandHandler; // tslint:disable-next-line:no-any

      commandManager.setup(c => c.registerCommand).returns(() => {
        // tslint:disable-next-line:no-any
        return (command, callback, _thisArg) => {
          if (command === commandId) {
            commandHandler = callback;
          }

          return {
            dispose: () => void 0
          };
        };
      });
      executionManager.registerCommands();
      chai_1.expect(commandHandler).not.to.be.an('undefined', 'Command handler not initialized');
      const helper = TypeMoq.Mock.ofType();
      serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionHelper))).returns(() => helper.object);
      helper.setup(h => h.getSelectedTextToExecute).returns(() => () => Promise.resolve(''));
      const executionService = TypeMoq.Mock.ofType();
      serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionService), TypeMoq.It.isValue(executionServiceId))).returns(() => executionService.object); // tslint:disable-next-line:no-any

      documentManager.setup(d => d.activeTextEditor).returns(() => {
        return {};
      });
      yield commandHandler();
      executionService.verify(e => __awaiter(this, void 0, void 0, function* () {
        return e.execute(TypeMoq.It.isAny());
      }), TypeMoq.Times.never());
    });
  }

  test('Ensure executeSelectionInTerminal will do nothing if no text is selected', () => __awaiter(void 0, void 0, void 0, function* () {
    yield testExecutionOfSlectionWithoutAnythingSelected(constants_1.Commands.Exec_Selection_In_Terminal, 'standard');
  }));
  test('Ensure executeSelectionInDjangoShell will do nothing if no text is selected', () => __awaiter(void 0, void 0, void 0, function* () {
    yield testExecutionOfSlectionWithoutAnythingSelected(constants_1.Commands.Exec_Selection_In_Django_Shell, 'djangoShell');
  }));

  function testExecutionOfSelectionIsSentToTerminal(commandId, executionServiceId) {
    return __awaiter(this, void 0, void 0, function* () {
      let commandHandler; // tslint:disable-next-line:no-any

      commandManager.setup(c => c.registerCommand).returns(() => {
        // tslint:disable-next-line:no-any
        return (command, callback, _thisArg) => {
          if (command === commandId) {
            commandHandler = callback;
          }

          return {
            dispose: () => void 0
          };
        };
      });
      executionManager.registerCommands();
      chai_1.expect(commandHandler).not.to.be.an('undefined', 'Command handler not initialized');
      const textSelected = 'abcd';
      const activeDocumentUri = vscode_1.Uri.file('abc');
      const helper = TypeMoq.Mock.ofType();
      serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionHelper))).returns(() => helper.object);
      helper.setup(h => h.getSelectedTextToExecute).returns(() => () => Promise.resolve(textSelected));
      helper.setup(h => h.normalizeLines).returns(() => () => Promise.resolve(textSelected)).verifiable(TypeMoq.Times.once());
      const executionService = TypeMoq.Mock.ofType();
      serviceContainer.setup(s => s.get(TypeMoq.It.isValue(types_1.ICodeExecutionService), TypeMoq.It.isValue(executionServiceId))).returns(() => executionService.object);
      const document = TypeMoq.Mock.ofType();
      document.setup(d => d.uri).returns(() => activeDocumentUri);
      const activeEditor = TypeMoq.Mock.ofType();
      activeEditor.setup(e => e.document).returns(() => document.object);
      documentManager.setup(d => d.activeTextEditor).returns(() => activeEditor.object);
      yield commandHandler();
      executionService.verify(e => __awaiter(this, void 0, void 0, function* () {
        return e.execute(TypeMoq.It.isValue(textSelected), TypeMoq.It.isValue(activeDocumentUri));
      }), TypeMoq.Times.once());
      helper.verifyAll();
    });
  }

  test('Ensure executeSelectionInTerminal will normalize selected text and send it to the terminal', () => __awaiter(void 0, void 0, void 0, function* () {
    yield testExecutionOfSelectionIsSentToTerminal(constants_1.Commands.Exec_Selection_In_Terminal, 'standard');
  }));
  test('Ensure executeSelectionInDjangoShell will normalize selected text and send it to the terminal', () => __awaiter(void 0, void 0, void 0, function* () {
    yield testExecutionOfSelectionIsSentToTerminal(constants_1.Commands.Exec_Selection_In_Django_Shell, 'djangoShell');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvZGVFeGVjdXRpb25NYW5hZ2VyLnVuaXQudGVzdC5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiY2hhaV8xIiwicmVxdWlyZSIsIlR5cGVNb3EiLCJ2c2NvZGVfMSIsImNvbnN0YW50c18xIiwiY29kZUV4ZWN1dGlvbk1hbmFnZXJfMSIsInR5cGVzXzEiLCJzdWl0ZSIsImV4ZWN1dGlvbk1hbmFnZXIiLCJ3b3Jrc3BhY2UiLCJjb21tYW5kTWFuYWdlciIsImRpc3Bvc2FibGVzIiwic2VydmljZUNvbnRhaW5lciIsImRvY3VtZW50TWFuYWdlciIsInNldHVwIiwiTW9jayIsIm9mVHlwZSIsImMiLCJvbkRpZENoYW5nZVdvcmtzcGFjZUZvbGRlcnMiLCJJdCIsImlzQW55IiwicmV0dXJucyIsImRpc3Bvc2UiLCJDb2RlRXhlY3V0aW9uTWFuYWdlciIsIm9iamVjdCIsInRlYXJkb3duIiwiZm9yRWFjaCIsImRpc3Bvc2FibGUiLCJ0ZXN0IiwicmVnaXN0ZXJDb21tYW5kcyIsInZlcmlmeSIsInJlZ2lzdGVyQ29tbWFuZCIsImlzVmFsdWUiLCJDb21tYW5kcyIsIkV4ZWNfSW5fVGVybWluYWwiLCJUaW1lcyIsIm9uY2UiLCJFeGVjX1NlbGVjdGlvbl9Jbl9UZXJtaW5hbCIsIkV4ZWNfU2VsZWN0aW9uX0luX0RqYW5nb19TaGVsbCIsImNvbW1hbmRIYW5kbGVyIiwiY29tbWFuZCIsImNhbGxiYWNrIiwiX3RoaXNBcmciLCJleHBlY3QiLCJub3QiLCJ0byIsImJlIiwiYW4iLCJoZWxwZXIiLCJzIiwiZ2V0IiwiSUNvZGVFeGVjdXRpb25IZWxwZXIiLCJoIiwiZ2V0RmlsZVRvRXhlY3V0ZSIsImV4ZWN1dGlvblNlcnZpY2UiLCJJQ29kZUV4ZWN1dGlvblNlcnZpY2UiLCJmaWxlVG9FeGVjdXRlIiwiVXJpIiwiZmlsZSIsIm5ldmVyIiwiZXhlY3V0ZUZpbGUiLCJ0ZXN0RXhlY3V0aW9uT2ZTZWxlY3Rpb25XaXRob3V0QW55QWN0aXZlRG9jdW1lbnQiLCJjb21tYW5kSWQiLCJleGVjdXRpb25TZXJpY2VJZCIsImQiLCJhY3RpdmVUZXh0RWRpdG9yIiwidW5kZWZpbmVkIiwiZXhlY3V0ZSIsInRlc3RFeGVjdXRpb25PZlNsZWN0aW9uV2l0aG91dEFueXRoaW5nU2VsZWN0ZWQiLCJleGVjdXRpb25TZXJ2aWNlSWQiLCJnZXRTZWxlY3RlZFRleHRUb0V4ZWN1dGUiLCJ0ZXN0RXhlY3V0aW9uT2ZTZWxlY3Rpb25Jc1NlbnRUb1Rlcm1pbmFsIiwidGV4dFNlbGVjdGVkIiwiYWN0aXZlRG9jdW1lbnRVcmkiLCJub3JtYWxpemVMaW5lcyIsInZlcmlmaWFibGUiLCJkb2N1bWVudCIsInVyaSIsImFjdGl2ZUVkaXRvciIsInZlcmlmeUFsbCJdLCJtYXBwaW5ncyI6IkFBQUEsYSxDQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFB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QixDQUFWLEVBQTRDdEUsT0FBTyxDQUFDaUIsRUFBUixDQUFXYSxPQUFYLENBQW1CeUMsaUJBQW5CLENBQTVDLENBQVA7QUFBNEYsT0FBbEksQ0FBeEMsRUFBNkt2RSxPQUFPLENBQUNpQyxLQUFSLENBQWNDLElBQWQsRUFBN0s7QUFDQVksTUFBQUEsTUFBTSxDQUFDK0IsU0FBUDtBQUNILEtBOUJlLENBQWhCO0FBK0JIOztBQUNEbkQsRUFBQUEsSUFBSSxDQUFDLDRGQUFELEVBQStGLE1BQU1qRCxTQUFTLFNBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ2xKLFVBQU00Rix3Q0FBd0MsQ0FBQ25FLFdBQVcsQ0FBQzZCLFFBQVosQ0FBcUJJLDBCQUF0QixFQUFrRCxVQUFsRCxDQUE5QztBQUNILEdBRmlILENBQTlHLENBQUo7QUFHQVQsRUFBQUEsSUFBSSxDQUFDLCtGQUFELEVBQWtHLE1BQU1qRCxTQUFTLFNBQU8sS0FBSyxDQUFaLEVBQWUsS0FBSyxDQUFwQixFQUF1QixhQUFhO0FBQ3JKLFVBQU00Rix3Q0FBd0MsQ0FBQ25FLFdBQVcsQ0FBQzZCLFFBQVosQ0FBcUJLLDhCQUF0QixFQUFzRCxhQUF0RCxDQUE5QztBQUNILEdBRm9ILENBQWpILENBQUo7QUFHSCxDQXZNSSxDQUFMIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZShyZXN1bHQudmFsdWUpOyB9KS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLy8gdHNsaW50OmRpc2FibGU6bm8tbXVsdGlsaW5lLXN0cmluZyBuby10cmFpbGluZy13aGl0ZXNwYWNlXHJcbmNvbnN0IGNoYWlfMSA9IHJlcXVpcmUoXCJjaGFpXCIpO1xyXG5jb25zdCBUeXBlTW9xID0gcmVxdWlyZShcInR5cGVtb3FcIik7XHJcbmNvbnN0IHZzY29kZV8xID0gcmVxdWlyZShcInZzY29kZVwiKTtcclxuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L2NvbW1vbi9jb25zdGFudHNcIik7XHJcbmNvbnN0IGNvZGVFeGVjdXRpb25NYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vY2xpZW50L3Rlcm1pbmFscy9jb2RlRXhlY3V0aW9uL2NvZGVFeGVjdXRpb25NYW5hZ2VyXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uL2NsaWVudC90ZXJtaW5hbHMvdHlwZXNcIik7XHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtZnVuYy1ib2R5LWxlbmd0aFxyXG5zdWl0ZSgnVGVybWluYWwgLSBDb2RlIEV4ZWN1dGlvbiBNYW5hZ2VyJywgKCkgPT4ge1xyXG4gICAgbGV0IGV4ZWN1dGlvbk1hbmFnZXI7XHJcbiAgICBsZXQgd29ya3NwYWNlO1xyXG4gICAgbGV0IGNvbW1hbmRNYW5hZ2VyO1xyXG4gICAgbGV0IGRpc3Bvc2FibGVzID0gW107XHJcbiAgICBsZXQgc2VydmljZUNvbnRhaW5lcjtcclxuICAgIGxldCBkb2N1bWVudE1hbmFnZXI7XHJcbiAgICBzZXR1cCgoKSA9PiB7XHJcbiAgICAgICAgd29ya3NwYWNlID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIHdvcmtzcGFjZS5zZXR1cChjID0+IGMub25EaWRDaGFuZ2VXb3Jrc3BhY2VGb2xkZXJzKFR5cGVNb3EuSXQuaXNBbnkoKSwgVHlwZU1vcS5JdC5pc0FueSgpLCBUeXBlTW9xLkl0LmlzQW55KCkpKS5yZXR1cm5zKCgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHZvaWQgMFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRvY3VtZW50TWFuYWdlciA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBjb21tYW5kTWFuYWdlciA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBzZXJ2aWNlQ29udGFpbmVyID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgY29kZUV4ZWN1dGlvbk1hbmFnZXJfMS5Db2RlRXhlY3V0aW9uTWFuYWdlcihjb21tYW5kTWFuYWdlci5vYmplY3QsIGRvY3VtZW50TWFuYWdlci5vYmplY3QsIGRpc3Bvc2FibGVzLCBzZXJ2aWNlQ29udGFpbmVyLm9iamVjdCk7XHJcbiAgICB9KTtcclxuICAgIHRlYXJkb3duKCgpID0+IHtcclxuICAgICAgICBkaXNwb3NhYmxlcy5mb3JFYWNoKGRpc3Bvc2FibGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZGlzcG9zYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBkaXNwb3NhYmxlcyA9IFtdO1xyXG4gICAgfSk7XHJcbiAgICB0ZXN0KCdFbnN1cmUgY29tbWFuZHMgYXJlIHJlZ2lzdGVyZWQnLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3RlckNvbW1hbmRzKCk7XHJcbiAgICAgICAgY29tbWFuZE1hbmFnZXIudmVyaWZ5KGMgPT4gYy5yZWdpc3RlckNvbW1hbmQoVHlwZU1vcS5JdC5pc1ZhbHVlKGNvbnN0YW50c18xLkNvbW1hbmRzLkV4ZWNfSW5fVGVybWluYWwpLCBUeXBlTW9xLkl0LmlzQW55KCkpLCBUeXBlTW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgY29tbWFuZE1hbmFnZXIudmVyaWZ5KGMgPT4gYy5yZWdpc3RlckNvbW1hbmQoVHlwZU1vcS5JdC5pc1ZhbHVlKGNvbnN0YW50c18xLkNvbW1hbmRzLkV4ZWNfU2VsZWN0aW9uX0luX1Rlcm1pbmFsKSwgVHlwZU1vcS5JdC5pc0FueSgpKSwgVHlwZU1vcS5UaW1lcy5vbmNlKCkpO1xyXG4gICAgICAgIGNvbW1hbmRNYW5hZ2VyLnZlcmlmeShjID0+IGMucmVnaXN0ZXJDb21tYW5kKFR5cGVNb3EuSXQuaXNWYWx1ZShjb25zdGFudHNfMS5Db21tYW5kcy5FeGVjX1NlbGVjdGlvbl9Jbl9EamFuZ29fU2hlbGwpLCBUeXBlTW9xLkl0LmlzQW55KCkpLCBUeXBlTW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdFbnN1cmUgZXhlY3V0ZUZpbGVJbnRlclRlcm1pbmFsIHdpbGwgZG8gbm90aGluZyBpZiBubyBmaWxlIGlzIGF2aWFsYmxlJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGxldCBjb21tYW5kSGFuZGxlcjtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgY29tbWFuZE1hbmFnZXIuc2V0dXAoYyA9PiBjLnJlZ2lzdGVyQ29tbWFuZCkucmV0dXJucygoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcclxuICAgICAgICAgICAgcmV0dXJuIChjb21tYW5kLCBjYWxsYmFjaywgX3RoaXNBcmcpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjb21tYW5kID09PSBjb25zdGFudHNfMS5Db21tYW5kcy5FeGVjX0luX1Rlcm1pbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZEhhbmRsZXIgPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IHZvaWQgMCB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXJDb21tYW5kcygpO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QoY29tbWFuZEhhbmRsZXIpLm5vdC50by5iZS5hbigndW5kZWZpbmVkJywgJ0NvbW1hbmQgaGFuZGxlciBub3QgaW5pdGlhbGl6ZWQnKTtcclxuICAgICAgICBjb25zdCBoZWxwZXIgPSBUeXBlTW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgc2VydmljZUNvbnRhaW5lci5zZXR1cChzID0+IHMuZ2V0KFR5cGVNb3EuSXQuaXNWYWx1ZSh0eXBlc18xLklDb2RlRXhlY3V0aW9uSGVscGVyKSkpLnJldHVybnMoKCkgPT4gaGVscGVyLm9iamVjdCk7XHJcbiAgICAgICAgeWllbGQgY29tbWFuZEhhbmRsZXIoKTtcclxuICAgICAgICBoZWxwZXIudmVyaWZ5KChoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7IHJldHVybiBoLmdldEZpbGVUb0V4ZWN1dGUoKTsgfSksIFR5cGVNb3EuVGltZXMub25jZSgpKTtcclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ0Vuc3VyZSBleGVjdXRlRmlsZUludGVyVGVybWluYWwgd2lsbCB1c2UgcHJvdmlkZWQgZmlsZScsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBsZXQgY29tbWFuZEhhbmRsZXI7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgIGNvbW1hbmRNYW5hZ2VyLnNldHVwKGMgPT4gYy5yZWdpc3RlckNvbW1hbmQpLnJldHVybnMoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgICAgIHJldHVybiAoY29tbWFuZCwgY2FsbGJhY2ssIF90aGlzQXJnKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gY29uc3RhbnRzXzEuQ29tbWFuZHMuRXhlY19Jbl9UZXJtaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRIYW5kbGVyID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB2b2lkIDAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyQ29tbWFuZHMoKTtcclxuICAgICAgICBjaGFpXzEuZXhwZWN0KGNvbW1hbmRIYW5kbGVyKS5ub3QudG8uYmUuYW4oJ3VuZGVmaW5lZCcsICdDb21tYW5kIGhhbmRsZXIgbm90IGluaXRpYWxpemVkJyk7XHJcbiAgICAgICAgY29uc3QgaGVscGVyID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIHNlcnZpY2VDb250YWluZXIuc2V0dXAocyA9PiBzLmdldChUeXBlTW9xLkl0LmlzVmFsdWUodHlwZXNfMS5JQ29kZUV4ZWN1dGlvbkhlbHBlcikpKS5yZXR1cm5zKCgpID0+IGhlbHBlci5vYmplY3QpO1xyXG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvblNlcnZpY2UgPSBUeXBlTW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgc2VydmljZUNvbnRhaW5lci5zZXR1cChzID0+IHMuZ2V0KFR5cGVNb3EuSXQuaXNWYWx1ZSh0eXBlc18xLklDb2RlRXhlY3V0aW9uU2VydmljZSksIFR5cGVNb3EuSXQuaXNWYWx1ZSgnc3RhbmRhcmQnKSkpLnJldHVybnMoKCkgPT4gZXhlY3V0aW9uU2VydmljZS5vYmplY3QpO1xyXG4gICAgICAgIGNvbnN0IGZpbGVUb0V4ZWN1dGUgPSB2c2NvZGVfMS5VcmkuZmlsZSgneCcpO1xyXG4gICAgICAgIHlpZWxkIGNvbW1hbmRIYW5kbGVyKGZpbGVUb0V4ZWN1dGUpO1xyXG4gICAgICAgIGhlbHBlci52ZXJpZnkoKGgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsgcmV0dXJuIGguZ2V0RmlsZVRvRXhlY3V0ZSgpOyB9KSwgVHlwZU1vcS5UaW1lcy5uZXZlcigpKTtcclxuICAgICAgICBleGVjdXRpb25TZXJ2aWNlLnZlcmlmeSgoZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gZS5leGVjdXRlRmlsZShUeXBlTW9xLkl0LmlzVmFsdWUoZmlsZVRvRXhlY3V0ZSkpOyB9KSwgVHlwZU1vcS5UaW1lcy5vbmNlKCkpO1xyXG4gICAgfSkpO1xyXG4gICAgdGVzdCgnRW5zdXJlIGV4ZWN1dGVGaWxlSW50ZXJUZXJtaW5hbCB3aWxsIHVzZSBhY3RpdmUgZmlsZScsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBsZXQgY29tbWFuZEhhbmRsZXI7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgIGNvbW1hbmRNYW5hZ2VyLnNldHVwKGMgPT4gYy5yZWdpc3RlckNvbW1hbmQpLnJldHVybnMoKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgICAgIHJldHVybiAoY29tbWFuZCwgY2FsbGJhY2ssIF90aGlzQXJnKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gY29uc3RhbnRzXzEuQ29tbWFuZHMuRXhlY19Jbl9UZXJtaW5hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmRIYW5kbGVyID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB2b2lkIDAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyQ29tbWFuZHMoKTtcclxuICAgICAgICBjaGFpXzEuZXhwZWN0KGNvbW1hbmRIYW5kbGVyKS5ub3QudG8uYmUuYW4oJ3VuZGVmaW5lZCcsICdDb21tYW5kIGhhbmRsZXIgbm90IGluaXRpYWxpemVkJyk7XHJcbiAgICAgICAgY29uc3QgZmlsZVRvRXhlY3V0ZSA9IHZzY29kZV8xLlVyaS5maWxlKCd4Jyk7XHJcbiAgICAgICAgY29uc3QgaGVscGVyID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIHNlcnZpY2VDb250YWluZXIuc2V0dXAocyA9PiBzLmdldChUeXBlTW9xLkl0LmlzVmFsdWUodHlwZXNfMS5JQ29kZUV4ZWN1dGlvbkhlbHBlcikpKS5yZXR1cm5zKCgpID0+IGhlbHBlci5vYmplY3QpO1xyXG4gICAgICAgIGhlbHBlci5zZXR1cCgoaCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gaC5nZXRGaWxlVG9FeGVjdXRlKCk7IH0pKS5yZXR1cm5zKCgpID0+IFByb21pc2UucmVzb2x2ZShmaWxlVG9FeGVjdXRlKSk7XHJcbiAgICAgICAgY29uc3QgZXhlY3V0aW9uU2VydmljZSA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBzZXJ2aWNlQ29udGFpbmVyLnNldHVwKHMgPT4gcy5nZXQoVHlwZU1vcS5JdC5pc1ZhbHVlKHR5cGVzXzEuSUNvZGVFeGVjdXRpb25TZXJ2aWNlKSwgVHlwZU1vcS5JdC5pc1ZhbHVlKCdzdGFuZGFyZCcpKSkucmV0dXJucygoKSA9PiBleGVjdXRpb25TZXJ2aWNlLm9iamVjdCk7XHJcbiAgICAgICAgeWllbGQgY29tbWFuZEhhbmRsZXIoZmlsZVRvRXhlY3V0ZSk7XHJcbiAgICAgICAgZXhlY3V0aW9uU2VydmljZS52ZXJpZnkoKGUpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsgcmV0dXJuIGUuZXhlY3V0ZUZpbGUoVHlwZU1vcS5JdC5pc1ZhbHVlKGZpbGVUb0V4ZWN1dGUpKTsgfSksIFR5cGVNb3EuVGltZXMub25jZSgpKTtcclxuICAgIH0pKTtcclxuICAgIGZ1bmN0aW9uIHRlc3RFeGVjdXRpb25PZlNlbGVjdGlvbldpdGhvdXRBbnlBY3RpdmVEb2N1bWVudChjb21tYW5kSWQsIGV4ZWN1dGlvblNlcmljZUlkKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgbGV0IGNvbW1hbmRIYW5kbGVyO1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYW5hZ2VyLnNldHVwKGMgPT4gYy5yZWdpc3RlckNvbW1hbmQpLnJldHVybnMoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjb21tYW5kLCBjYWxsYmFjaywgX3RoaXNBcmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gY29tbWFuZElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRIYW5kbGVyID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IHZvaWQgMCB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXJDb21tYW5kcygpO1xyXG4gICAgICAgICAgICBjaGFpXzEuZXhwZWN0KGNvbW1hbmRIYW5kbGVyKS5ub3QudG8uYmUuYW4oJ3VuZGVmaW5lZCcsICdDb21tYW5kIGhhbmRsZXIgbm90IGluaXRpYWxpemVkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlbHBlciA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICAgICAgc2VydmljZUNvbnRhaW5lci5zZXR1cChzID0+IHMuZ2V0KFR5cGVNb3EuSXQuaXNWYWx1ZSh0eXBlc18xLklDb2RlRXhlY3V0aW9uSGVscGVyKSkpLnJldHVybnMoKCkgPT4gaGVscGVyLm9iamVjdCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4ZWN1dGlvblNlcnZpY2UgPSBUeXBlTW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgICAgIHNlcnZpY2VDb250YWluZXIuc2V0dXAocyA9PiBzLmdldChUeXBlTW9xLkl0LmlzVmFsdWUodHlwZXNfMS5JQ29kZUV4ZWN1dGlvblNlcnZpY2UpLCBUeXBlTW9xLkl0LmlzVmFsdWUoZXhlY3V0aW9uU2VyaWNlSWQpKSkucmV0dXJucygoKSA9PiBleGVjdXRpb25TZXJ2aWNlLm9iamVjdCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50TWFuYWdlci5zZXR1cChkID0+IGQuYWN0aXZlVGV4dEVkaXRvcikucmV0dXJucygoKSA9PiB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICB5aWVsZCBjb21tYW5kSGFuZGxlcigpO1xyXG4gICAgICAgICAgICBleGVjdXRpb25TZXJ2aWNlLnZlcmlmeSgoZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gZS5leGVjdXRlKFR5cGVNb3EuSXQuaXNBbnkoKSk7IH0pLCBUeXBlTW9xLlRpbWVzLm5ldmVyKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGVzdCgnRW5zdXJlIGV4ZWN1dGVTZWxlY3Rpb25JblRlcm1pbmFsIHdpbGwgZG8gbm90aGluZyBpZiB0aGVyZXMgbm8gYWN0aXZlIGRvY3VtZW50JywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIHlpZWxkIHRlc3RFeGVjdXRpb25PZlNlbGVjdGlvbldpdGhvdXRBbnlBY3RpdmVEb2N1bWVudChjb25zdGFudHNfMS5Db21tYW5kcy5FeGVjX1NlbGVjdGlvbl9Jbl9UZXJtaW5hbCwgJ3N0YW5kYXJkJyk7XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdFbnN1cmUgZXhlY3V0ZVNlbGVjdGlvbkluRGphbmdvU2hlbGwgd2lsbCBkbyBub3RoaW5nIGlmIHRoZXJlcyBubyBhY3RpdmUgZG9jdW1lbnQnLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgeWllbGQgdGVzdEV4ZWN1dGlvbk9mU2VsZWN0aW9uV2l0aG91dEFueUFjdGl2ZURvY3VtZW50KGNvbnN0YW50c18xLkNvbW1hbmRzLkV4ZWNfU2VsZWN0aW9uX0luX0RqYW5nb19TaGVsbCwgJ2RqYW5nb1NoZWxsJyk7XHJcbiAgICB9KSk7XHJcbiAgICBmdW5jdGlvbiB0ZXN0RXhlY3V0aW9uT2ZTbGVjdGlvbldpdGhvdXRBbnl0aGluZ1NlbGVjdGVkKGNvbW1hbmRJZCwgZXhlY3V0aW9uU2VydmljZUlkKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgbGV0IGNvbW1hbmRIYW5kbGVyO1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgICAgIGNvbW1hbmRNYW5hZ2VyLnNldHVwKGMgPT4gYy5yZWdpc3RlckNvbW1hbmQpLnJldHVybnMoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChjb21tYW5kLCBjYWxsYmFjaywgX3RoaXNBcmcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWFuZCA9PT0gY29tbWFuZElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRIYW5kbGVyID0gY2FsbGJhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRpc3Bvc2U6ICgpID0+IHZvaWQgMCB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXJDb21tYW5kcygpO1xyXG4gICAgICAgICAgICBjaGFpXzEuZXhwZWN0KGNvbW1hbmRIYW5kbGVyKS5ub3QudG8uYmUuYW4oJ3VuZGVmaW5lZCcsICdDb21tYW5kIGhhbmRsZXIgbm90IGluaXRpYWxpemVkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhlbHBlciA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICAgICAgc2VydmljZUNvbnRhaW5lci5zZXR1cChzID0+IHMuZ2V0KFR5cGVNb3EuSXQuaXNWYWx1ZSh0eXBlc18xLklDb2RlRXhlY3V0aW9uSGVscGVyKSkpLnJldHVybnMoKCkgPT4gaGVscGVyLm9iamVjdCk7XHJcbiAgICAgICAgICAgIGhlbHBlci5zZXR1cChoID0+IGguZ2V0U2VsZWN0ZWRUZXh0VG9FeGVjdXRlKS5yZXR1cm5zKCgpID0+ICgpID0+IFByb21pc2UucmVzb2x2ZSgnJykpO1xyXG4gICAgICAgICAgICBjb25zdCBleGVjdXRpb25TZXJ2aWNlID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgICAgICBzZXJ2aWNlQ29udGFpbmVyLnNldHVwKHMgPT4gcy5nZXQoVHlwZU1vcS5JdC5pc1ZhbHVlKHR5cGVzXzEuSUNvZGVFeGVjdXRpb25TZXJ2aWNlKSwgVHlwZU1vcS5JdC5pc1ZhbHVlKGV4ZWN1dGlvblNlcnZpY2VJZCkpKS5yZXR1cm5zKCgpID0+IGV4ZWN1dGlvblNlcnZpY2Uub2JqZWN0KTtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxyXG4gICAgICAgICAgICBkb2N1bWVudE1hbmFnZXIuc2V0dXAoZCA9PiBkLmFjdGl2ZVRleHRFZGl0b3IpLnJldHVybnMoKCkgPT4geyByZXR1cm4ge307IH0pO1xyXG4gICAgICAgICAgICB5aWVsZCBjb21tYW5kSGFuZGxlcigpO1xyXG4gICAgICAgICAgICBleGVjdXRpb25TZXJ2aWNlLnZlcmlmeSgoZSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkgeyByZXR1cm4gZS5leGVjdXRlKFR5cGVNb3EuSXQuaXNBbnkoKSk7IH0pLCBUeXBlTW9xLlRpbWVzLm5ldmVyKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGVzdCgnRW5zdXJlIGV4ZWN1dGVTZWxlY3Rpb25JblRlcm1pbmFsIHdpbGwgZG8gbm90aGluZyBpZiBubyB0ZXh0IGlzIHNlbGVjdGVkJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIHlpZWxkIHRlc3RFeGVjdXRpb25PZlNsZWN0aW9uV2l0aG91dEFueXRoaW5nU2VsZWN0ZWQoY29uc3RhbnRzXzEuQ29tbWFuZHMuRXhlY19TZWxlY3Rpb25fSW5fVGVybWluYWwsICdzdGFuZGFyZCcpO1xyXG4gICAgfSkpO1xyXG4gICAgdGVzdCgnRW5zdXJlIGV4ZWN1dGVTZWxlY3Rpb25JbkRqYW5nb1NoZWxsIHdpbGwgZG8gbm90aGluZyBpZiBubyB0ZXh0IGlzIHNlbGVjdGVkJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIHlpZWxkIHRlc3RFeGVjdXRpb25PZlNsZWN0aW9uV2l0aG91dEFueXRoaW5nU2VsZWN0ZWQoY29uc3RhbnRzXzEuQ29tbWFuZHMuRXhlY19TZWxlY3Rpb25fSW5fRGphbmdvX1NoZWxsLCAnZGphbmdvU2hlbGwnKTtcclxuICAgIH0pKTtcclxuICAgIGZ1bmN0aW9uIHRlc3RFeGVjdXRpb25PZlNlbGVjdGlvbklzU2VudFRvVGVybWluYWwoY29tbWFuZElkLCBleGVjdXRpb25TZXJ2aWNlSWQpIHtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBsZXQgY29tbWFuZEhhbmRsZXI7XHJcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcclxuICAgICAgICAgICAgY29tbWFuZE1hbmFnZXIuc2V0dXAoYyA9PiBjLnJlZ2lzdGVyQ29tbWFuZCkucmV0dXJucygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNvbW1hbmQsIGNhbGxiYWNrLCBfdGhpc0FyZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tYW5kID09PSBjb21tYW5kSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZEhhbmRsZXIgPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgZGlzcG9zZTogKCkgPT4gdm9pZCAwIH07XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3RlckNvbW1hbmRzKCk7XHJcbiAgICAgICAgICAgIGNoYWlfMS5leHBlY3QoY29tbWFuZEhhbmRsZXIpLm5vdC50by5iZS5hbigndW5kZWZpbmVkJywgJ0NvbW1hbmQgaGFuZGxlciBub3QgaW5pdGlhbGl6ZWQnKTtcclxuICAgICAgICAgICAgY29uc3QgdGV4dFNlbGVjdGVkID0gJ2FiY2QnO1xyXG4gICAgICAgICAgICBjb25zdCBhY3RpdmVEb2N1bWVudFVyaSA9IHZzY29kZV8xLlVyaS5maWxlKCdhYmMnKTtcclxuICAgICAgICAgICAgY29uc3QgaGVscGVyID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgICAgICBzZXJ2aWNlQ29udGFpbmVyLnNldHVwKHMgPT4gcy5nZXQoVHlwZU1vcS5JdC5pc1ZhbHVlKHR5cGVzXzEuSUNvZGVFeGVjdXRpb25IZWxwZXIpKSkucmV0dXJucygoKSA9PiBoZWxwZXIub2JqZWN0KTtcclxuICAgICAgICAgICAgaGVscGVyLnNldHVwKGggPT4gaC5nZXRTZWxlY3RlZFRleHRUb0V4ZWN1dGUpLnJldHVybnMoKCkgPT4gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRleHRTZWxlY3RlZCkpO1xyXG4gICAgICAgICAgICBoZWxwZXIuc2V0dXAoaCA9PiBoLm5vcm1hbGl6ZUxpbmVzKS5yZXR1cm5zKCgpID0+ICgpID0+IFByb21pc2UucmVzb2x2ZSh0ZXh0U2VsZWN0ZWQpKS52ZXJpZmlhYmxlKFR5cGVNb3EuVGltZXMub25jZSgpKTtcclxuICAgICAgICAgICAgY29uc3QgZXhlY3V0aW9uU2VydmljZSA9IFR5cGVNb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICAgICAgc2VydmljZUNvbnRhaW5lci5zZXR1cChzID0+IHMuZ2V0KFR5cGVNb3EuSXQuaXNWYWx1ZSh0eXBlc18xLklDb2RlRXhlY3V0aW9uU2VydmljZSksIFR5cGVNb3EuSXQuaXNWYWx1ZShleGVjdXRpb25TZXJ2aWNlSWQpKSkucmV0dXJucygoKSA9PiBleGVjdXRpb25TZXJ2aWNlLm9iamVjdCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50ID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5zZXR1cChkID0+IGQudXJpKS5yZXR1cm5zKCgpID0+IGFjdGl2ZURvY3VtZW50VXJpKTtcclxuICAgICAgICAgICAgY29uc3QgYWN0aXZlRWRpdG9yID0gVHlwZU1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgICAgICBhY3RpdmVFZGl0b3Iuc2V0dXAoZSA9PiBlLmRvY3VtZW50KS5yZXR1cm5zKCgpID0+IGRvY3VtZW50Lm9iamVjdCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50TWFuYWdlci5zZXR1cChkID0+IGQuYWN0aXZlVGV4dEVkaXRvcikucmV0dXJucygoKSA9PiBhY3RpdmVFZGl0b3Iub2JqZWN0KTtcclxuICAgICAgICAgICAgeWllbGQgY29tbWFuZEhhbmRsZXIoKTtcclxuICAgICAgICAgICAgZXhlY3V0aW9uU2VydmljZS52ZXJpZnkoKGUpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHsgcmV0dXJuIGUuZXhlY3V0ZShUeXBlTW9xLkl0LmlzVmFsdWUodGV4dFNlbGVjdGVkKSwgVHlwZU1vcS5JdC5pc1ZhbHVlKGFjdGl2ZURvY3VtZW50VXJpKSk7IH0pLCBUeXBlTW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgICAgIGhlbHBlci52ZXJpZnlBbGwoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHRlc3QoJ0Vuc3VyZSBleGVjdXRlU2VsZWN0aW9uSW5UZXJtaW5hbCB3aWxsIG5vcm1hbGl6ZSBzZWxlY3RlZCB0ZXh0IGFuZCBzZW5kIGl0IHRvIHRoZSB0ZXJtaW5hbCcsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICB5aWVsZCB0ZXN0RXhlY3V0aW9uT2ZTZWxlY3Rpb25Jc1NlbnRUb1Rlcm1pbmFsKGNvbnN0YW50c18xLkNvbW1hbmRzLkV4ZWNfU2VsZWN0aW9uX0luX1Rlcm1pbmFsLCAnc3RhbmRhcmQnKTtcclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ0Vuc3VyZSBleGVjdXRlU2VsZWN0aW9uSW5EamFuZ29TaGVsbCB3aWxsIG5vcm1hbGl6ZSBzZWxlY3RlZCB0ZXh0IGFuZCBzZW5kIGl0IHRvIHRoZSB0ZXJtaW5hbCcsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICB5aWVsZCB0ZXN0RXhlY3V0aW9uT2ZTZWxlY3Rpb25Jc1NlbnRUb1Rlcm1pbmFsKGNvbnN0YW50c18xLkNvbW1hbmRzLkV4ZWNfU2VsZWN0aW9uX0luX0RqYW5nb19TaGVsbCwgJ2RqYW5nb1NoZWxsJyk7XHJcbiAgICB9KSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2RlRXhlY3V0aW9uTWFuYWdlci51bml0LnRlc3QuanMubWFwIl19