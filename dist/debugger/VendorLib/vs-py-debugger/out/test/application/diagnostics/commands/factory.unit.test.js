// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const chai_1 = require("chai");

const typemoq = require("typemoq");

const factory_1 = require("../../../../client/application/diagnostics/commands/factory");

const ignore_1 = require("../../../../client/application/diagnostics/commands/ignore");

const launchBrowser_1 = require("../../../../client/application/diagnostics/commands/launchBrowser");

const types_1 = require("../../../../client/application/diagnostics/types");

suite('Application Diagnostics - Commands Factory', () => {
  let commandFactory;
  setup(() => {
    const serviceContainer = typemoq.Mock.ofType();
    commandFactory = new factory_1.DiagnosticsCommandFactory(serviceContainer.object);
  });
  test('Test creation of Ignore Command', () => __awaiter(void 0, void 0, void 0, function* () {
    const diagnostic = typemoq.Mock.ofType();
    const command = commandFactory.createCommand(diagnostic.object, {
      type: 'ignore',
      options: types_1.DiagnosticScope.Global
    });
    chai_1.expect(command).to.be.instanceOf(ignore_1.IgnoreDiagnosticCommand);
  }));
  test('Test creation of Launch Browser Command', () => __awaiter(void 0, void 0, void 0, function* () {
    const diagnostic = typemoq.Mock.ofType();
    const command = commandFactory.createCommand(diagnostic.object, {
      type: 'launch',
      options: 'x'
    });
    chai_1.expect(command).to.be.instanceOf(launchBrowser_1.LaunchBrowserCommand);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhY3RvcnkudW5pdC50ZXN0LmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJjaGFpXzEiLCJyZXF1aXJlIiwidHlwZW1vcSIsImZhY3RvcnlfMSIsImlnbm9yZV8xIiwibGF1bmNoQnJvd3Nlcl8xIiwidHlwZXNfMSIsInN1aXRlIiwiY29tbWFuZEZhY3RvcnkiLCJzZXR1cCIsInNlcnZpY2VDb250YWluZXIiLCJNb2NrIiwib2ZUeXBlIiwiRGlhZ25vc3RpY3NDb21tYW5kRmFjdG9yeSIsIm9iamVjdCIsInRlc3QiLCJkaWFnbm9zdGljIiwiY29tbWFuZCIsImNyZWF0ZUNvbW1hbmQiLCJ0eXBlIiwib3B0aW9ucyIsIkRpYWdub3N0aWNTY29wZSIsIkdsb2JhbCIsImV4cGVjdCIsInRvIiwiYmUiLCJpbnN0YW5jZU9mIiwiSWdub3JlRGlhZ25vc3RpY0NvbW1hbmQiLCJMYXVuY2hCcm93c2VyQ29tbWFuZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBLElBQUlBLFNBQVMsR0FBSSxVQUFRLFNBQUtBLFNBQWQsSUFBNEIsVUFBVUMsT0FBVixFQUFtQkMsVUFBbkIsRUFBK0JDLENBQS9CLEVBQWtDQyxTQUFsQyxFQUE2QztBQUNyRixTQUFPLEtBQUtELENBQUMsS0FBS0EsQ0FBQyxHQUFHRSxPQUFULENBQU4sRUFBeUIsVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDdkQsYUFBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFD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VUFBTXFDLFVBQVUsR0FBR2QsT0FBTyxDQUFDUyxJQUFSLENBQWFDLE1BQWIsRUFBbkI7QUFDQSxVQUFNSyxPQUFPLEdBQUdULGNBQWMsQ0FBQ1UsYUFBZixDQUE2QkYsVUFBVSxDQUFDRixNQUF4QyxFQUFnRDtBQUFFSyxNQUFBQSxJQUFJLEVBQUUsUUFBUjtBQUFrQkMsTUFBQUEsT0FBTyxFQUFFO0FBQTNCLEtBQWhELENBQWhCO0FBQ0FwQixJQUFBQSxNQUFNLENBQUN1QixNQUFQLENBQWNOLE9BQWQsRUFBdUJPLEVBQXZCLENBQTBCQyxFQUExQixDQUE2QkMsVUFBN0IsQ0FBd0NyQixlQUFlLENBQUN1QixvQkFBeEQ7QUFDSCxHQUo4RCxDQUEzRCxDQUFKO0FBS0gsQ0FoQkksQ0FBTCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjaGFpXzEgPSByZXF1aXJlKFwiY2hhaVwiKTtcclxuY29uc3QgdHlwZW1vcSA9IHJlcXVpcmUoXCJ0eXBlbW9xXCIpO1xyXG5jb25zdCBmYWN0b3J5XzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vY2xpZW50L2FwcGxpY2F0aW9uL2RpYWdub3N0aWNzL2NvbW1hbmRzL2ZhY3RvcnlcIik7XHJcbmNvbnN0IGlnbm9yZV8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NsaWVudC9hcHBsaWNhdGlvbi9kaWFnbm9zdGljcy9jb21tYW5kcy9pZ25vcmVcIik7XHJcbmNvbnN0IGxhdW5jaEJyb3dzZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvYXBwbGljYXRpb24vZGlhZ25vc3RpY3MvY29tbWFuZHMvbGF1bmNoQnJvd3NlclwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvYXBwbGljYXRpb24vZGlhZ25vc3RpY3MvdHlwZXNcIik7XHJcbnN1aXRlKCdBcHBsaWNhdGlvbiBEaWFnbm9zdGljcyAtIENvbW1hbmRzIEZhY3RvcnknLCAoKSA9PiB7XHJcbiAgICBsZXQgY29tbWFuZEZhY3Rvcnk7XHJcbiAgICBzZXR1cCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2VydmljZUNvbnRhaW5lciA9IHR5cGVtb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBjb21tYW5kRmFjdG9yeSA9IG5ldyBmYWN0b3J5XzEuRGlhZ25vc3RpY3NDb21tYW5kRmFjdG9yeShzZXJ2aWNlQ29udGFpbmVyLm9iamVjdCk7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoJ1Rlc3QgY3JlYXRpb24gb2YgSWdub3JlIENvbW1hbmQnLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgZGlhZ25vc3RpYyA9IHR5cGVtb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBjb25zdCBjb21tYW5kID0gY29tbWFuZEZhY3RvcnkuY3JlYXRlQ29tbWFuZChkaWFnbm9zdGljLm9iamVjdCwgeyB0eXBlOiAnaWdub3JlJywgb3B0aW9uczogdHlwZXNfMS5EaWFnbm9zdGljU2NvcGUuR2xvYmFsIH0pO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QoY29tbWFuZCkudG8uYmUuaW5zdGFuY2VPZihpZ25vcmVfMS5JZ25vcmVEaWFnbm9zdGljQ29tbWFuZCk7XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdUZXN0IGNyZWF0aW9uIG9mIExhdW5jaCBCcm93c2VyIENvbW1hbmQnLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgZGlhZ25vc3RpYyA9IHR5cGVtb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBjb25zdCBjb21tYW5kID0gY29tbWFuZEZhY3RvcnkuY3JlYXRlQ29tbWFuZChkaWFnbm9zdGljLm9iamVjdCwgeyB0eXBlOiAnbGF1bmNoJywgb3B0aW9uczogJ3gnIH0pO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QoY29tbWFuZCkudG8uYmUuaW5zdGFuY2VPZihsYXVuY2hCcm93c2VyXzEuTGF1bmNoQnJvd3NlckNvbW1hbmQpO1xyXG4gICAgfSkpO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmFjdG9yeS51bml0LnRlc3QuanMubWFwIl19