// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
}); // tslint:disable:no-invalid-template-strings max-func-body-length

const chai_1 = require("chai");

const path = require("path");

const typemoq = require("typemoq");

const invalidPythonPathInDebugger_1 = require("../../../../client/application/diagnostics/checks/invalidPythonPathInDebugger");

const types_1 = require("../../../../client/application/diagnostics/commands/types");

const constants_1 = require("../../../../client/application/diagnostics/constants");

const promptHandler_1 = require("../../../../client/application/diagnostics/promptHandler");

const types_2 = require("../../../../client/application/diagnostics/types");

const types_3 = require("../../../../client/common/types");

const contracts_1 = require("../../../../client/interpreter/contracts");

suite('Application Diagnostics - Checks Python Path in debugger', () => {
  let diagnosticService;
  let messageHandler;
  let commandFactory;
  let configService;
  let helper;
  setup(() => {
    const serviceContainer = typemoq.Mock.ofType();
    messageHandler = typemoq.Mock.ofType();
    serviceContainer.setup(s => s.get(typemoq.It.isValue(types_2.IDiagnosticHandlerService), typemoq.It.isValue(promptHandler_1.DiagnosticCommandPromptHandlerServiceId))).returns(() => messageHandler.object);
    commandFactory = typemoq.Mock.ofType();
    serviceContainer.setup(s => s.get(typemoq.It.isValue(types_1.IDiagnosticsCommandFactory))).returns(() => commandFactory.object);
    configService = typemoq.Mock.ofType();
    serviceContainer.setup(s => s.get(typemoq.It.isValue(types_3.IConfigurationService))).returns(() => configService.object);
    helper = typemoq.Mock.ofType();
    serviceContainer.setup(s => s.get(typemoq.It.isValue(contracts_1.IInterpreterHelper))).returns(() => helper.object);
    diagnosticService = new invalidPythonPathInDebugger_1.InvalidPythonPathInDebuggerService(serviceContainer.object);
  });
  test('Can handle InvalidPythonPathInDebugger diagnostics', () => __awaiter(void 0, void 0, void 0, function* () {
    const diagnostic = typemoq.Mock.ofType();
    diagnostic.setup(d => d.code).returns(() => constants_1.DiagnosticCodes.InvalidPythonPathInDebuggerDiagnostic).verifiable(typemoq.Times.atLeastOnce());
    const canHandle = yield diagnosticService.canHandle(diagnostic.object);
    chai_1.expect(canHandle).to.be.equal(true, 'Invalid value');
    diagnostic.verifyAll();
  }));
  test('Can not handle non-InvalidPythonPathInDebugger diagnostics', () => __awaiter(void 0, void 0, void 0, function* () {
    const diagnostic = typemoq.Mock.ofType();
    diagnostic.setup(d => d.code).returns(() => 'Something Else').verifiable(typemoq.Times.atLeastOnce());
    const canHandle = yield diagnosticService.canHandle(diagnostic.object);
    chai_1.expect(canHandle).to.be.equal(false, 'Invalid value');
    diagnostic.verifyAll();
  }));
  test('Should return empty diagnostics', () => __awaiter(void 0, void 0, void 0, function* () {
    const diagnostics = yield diagnosticService.diagnose();
    chai_1.expect(diagnostics).to.be.deep.equal([]);
  }));
  test('Should display one option to with a command', () => __awaiter(void 0, void 0, void 0, function* () {
    const diagnostic = typemoq.Mock.ofType();
    diagnostic.setup(d => d.code).returns(() => constants_1.DiagnosticCodes.InvalidEnvironmentPathVariableDiagnostic).verifiable(typemoq.Times.atLeastOnce());
    const interpreterSelectionCommand = typemoq.Mock.ofType();
    commandFactory.setup(f => f.createCommand(typemoq.It.isAny(), typemoq.It.isObjectWith({
      type: 'executeVSCCommand'
    }))).returns(() => interpreterSelectionCommand.object).verifiable(typemoq.Times.once());
    messageHandler.setup(m => m.handle(typemoq.It.isAny(), typemoq.It.isAny())).verifiable(typemoq.Times.once());
    yield diagnosticService.handle([diagnostic.object]);
    diagnostic.verifyAll();
    commandFactory.verifyAll();
    messageHandler.verifyAll();
  }));
  test('Ensure we get python path from config when path = ${config:python.pythonPath}', () => __awaiter(void 0, void 0, void 0, function* () {
    const pythonPath = '${config:python.pythonPath}';
    const settings = typemoq.Mock.ofType();
    settings.setup(s => s.pythonPath).returns(() => 'p').verifiable(typemoq.Times.once());
    configService.setup(c => c.getSettings(typemoq.It.isAny())).returns(() => settings.object).verifiable(typemoq.Times.once());
    helper.setup(h => h.getInterpreterInformation(typemoq.It.isValue('p'))).returns(() => Promise.resolve({})).verifiable(typemoq.Times.once());
    const valid = yield diagnosticService.validatePythonPath(pythonPath);
    settings.verifyAll();
    configService.verifyAll();
    helper.verifyAll();
    chai_1.expect(valid).to.be.equal(true, 'not valid');
  }));
  test('Ensure we get python path from config when path = undefined', () => __awaiter(void 0, void 0, void 0, function* () {
    const pythonPath = undefined;
    const settings = typemoq.Mock.ofType();
    settings.setup(s => s.pythonPath).returns(() => 'p').verifiable(typemoq.Times.once());
    configService.setup(c => c.getSettings(typemoq.It.isAny())).returns(() => settings.object).verifiable(typemoq.Times.once());
    helper.setup(h => h.getInterpreterInformation(typemoq.It.isValue('p'))).returns(() => Promise.resolve({})).verifiable(typemoq.Times.once());
    const valid = yield diagnosticService.validatePythonPath(pythonPath);
    settings.verifyAll();
    configService.verifyAll();
    helper.verifyAll();
    chai_1.expect(valid).to.be.equal(true, 'not valid');
  }));
  test('Ensure we do get python path from config when path is provided', () => __awaiter(void 0, void 0, void 0, function* () {
    const pythonPath = path.join('a', 'b');
    const settings = typemoq.Mock.ofType();
    configService.setup(c => c.getSettings(typemoq.It.isAny())).returns(() => settings.object).verifiable(typemoq.Times.never());
    helper.setup(h => h.getInterpreterInformation(typemoq.It.isValue(pythonPath))).returns(() => Promise.resolve({})).verifiable(typemoq.Times.once());
    const valid = yield diagnosticService.validatePythonPath(pythonPath);
    configService.verifyAll();
    helper.verifyAll();
    chai_1.expect(valid).to.be.equal(true, 'not valid');
  }));
  test('Ensure diagnosics are handled when path is invalid', () => __awaiter(void 0, void 0, void 0, function* () {
    const pythonPath = path.join('a', 'b');
    let handleInvoked = false;

    diagnosticService.handle = () => {
      handleInvoked = true;
      return Promise.resolve();
    };

    helper.setup(h => h.getInterpreterInformation(typemoq.It.isValue(pythonPath))).returns(() => Promise.resolve(undefined)).verifiable(typemoq.Times.once());
    const valid = yield diagnosticService.validatePythonPath(pythonPath);
    helper.verifyAll();
    chai_1.expect(valid).to.be.equal(false, 'should be invalid');
    chai_1.expect(handleInvoked).to.be.equal(true, 'should be invoked');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludmFsaWRQeXRob25QYXRoSW5EZWJ1Z2dlci51bml0LnRlc3QuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImNoYWlfMSIsInJlcXVpcmUiLCJwYXRoIiwidHlwZW1vcSIsImludmFsaWRQeXRob25QYXRoSW5EZWJ1Z2dlcl8xIiwidHlwZXNfMSIsImNvbnN0YW50c18xIiwicHJvbXB0SGFuZGxlcl8xIiwidHlwZXNfMiIsInR5cGVzXzMiLCJjb250cmFjdHNfMSIsInN1aXRlIiwiZGlhZ25vc3RpY1NlcnZpY2UiLCJtZXNzYWdlSGFuZGxlciIsImNvbW1hbmRGYWN0b3J5IiwiY29uZmlnU2VydmljZSIsImhlbHBlciIsInNldHVwIiwic2VydmljZUNvbnRhaW5lciIsIk1vY2siLCJvZlR5cGUiLCJzIiwiZ2V0IiwiSXQiLCJpc1ZhbHVlIiwiSURpYWdub3N0aWNIYW5kbGVyU2VydmljZSIsIkRpYWdub3N0aWNDb21tYW5kUHJvbXB0SGFuZGxlclNlcnZpY2VJZCIsInJldHVybnMiLCJvYmplY3QiLCJJRGlhZ25vc3RpY3NDb21tYW5kRmFjdG9yeSIsIklDb25maWd1cmF0aW9uU2VydmljZSIsIklJbnRlcnByZXRlckhlbHBlciIsIkludmFsaWRQeXRob25QYXRoSW5EZWJ1Z2dlclNlcnZpY2UiLCJ0ZXN0IiwiZGlhZ25vc3RpYyIsImQiLCJjb2RlIiwiRGlhZ25vc3RpY0NvZGVzIiwiSW52YWxpZFB5dGhvblBhdGhJbkRlYnVnZ2VyRGlhZ25vc3RpYyIsInZlcmlmaWFibGUiLCJUaW1lcyIsImF0TGVhc3RPbmNlIiwiY2FuSGFuZGxlIiwiZXhwZWN0IiwidG8iLCJiZSIsImVxdWFsIiwidmVyaWZ5QWxsIiwiZGlhZ25vc3RpY3MiLCJkaWFnbm9zZSIsImRlZXAiLCJJbnZhbGlkRW52aXJvbm1lbnRQYXRoVmFyaWFibGVEaWFnbm9zdGljIiwiaW50ZXJwcmV0ZXJTZWxlY3Rpb25Db21tYW5kIiwiZiIsImNyZWF0ZUNvbW1hbmQiLCJpc0FueSIsImlzT2JqZWN0V2l0aCIsInR5cGUiLCJvbmNlIiwibSIsImhhbmRsZSIsInB5dGhvblBhdGgiLCJzZXR0aW5ncyIsImMiLCJnZXRTZXR0aW5ncyIsImgiLCJnZXRJbnRlcnByZXRlckluZm9ybWF0aW9uIiwidmFsaWQiLCJ2YWxpZGF0ZVB5dGhvblBhdGgiLCJ1bmRlZmluZWQiLCJqb2luIiwibmV2ZXIiLCJoYW5kbGVJbnZva2VkIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FBZUYsS0FBZixDQUFELENBQUo7QUFBOEIsT0FBcEMsQ0FBcUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDM0YsYUFBU0MsUUFBVCxDQUFrQkosS0FBbEIsRUFBeUI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDLE9BQUQsQ0FBVCxDQUFtQkssS0FBbkIsQ0FBRCxDQUFKO0FBQWtDLE9BQXhDLENBQXlDLE9BQU9H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QUNvQixFQUFSLENBQVdDLE9BQVgsQ0FBbUJxQyxVQUFuQixDQUE1QixDQURoQixFQUVLbEMsT0FGTCxDQUVhLE1BQU0zQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JvRixTQUFoQixDQUZuQixFQUdLOUIsVUFITCxDQUdnQnBDLE9BQU8sQ0FBQ3FDLEtBQVIsQ0FBY2tCLElBQWQsRUFIaEI7QUFJQSxVQUFNUyxLQUFLLEdBQUcsTUFBTXZELGlCQUFpQixDQUFDd0Qsa0JBQWxCLENBQXFDUCxVQUFyQyxDQUFwQjtBQUNBN0MsSUFBQUEsTUFBTSxDQUFDK0IsU0FBUDtBQUNBL0MsSUFBQUEsTUFBTSxDQUFDMkMsTUFBUCxDQUFjd0IsS0FBZCxFQUFxQnZCLEVBQXJCLENBQXdCQyxFQUF4QixDQUEyQkMsS0FBM0IsQ0FBaUMsS0FBakMsRUFBd0MsbUJBQXhDO0FBQ0E5QyxJQUFBQSxNQUFNLENBQUMyQyxNQUFQLENBQWM2QixhQUFkLEVBQTZCNUIsRUFBN0IsQ0FBZ0NDLEVBQWhDLENBQW1DQyxLQUFuQyxDQUF5QyxJQUF6QyxFQUErQyxtQkFBL0M7QUFDSCxHQVp5RSxDQUF0RSxDQUFKO0FBYUgsQ0FuSUksQ0FBTCIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1pbnZhbGlkLXRlbXBsYXRlLXN0cmluZ3MgbWF4LWZ1bmMtYm9keS1sZW5ndGhcclxuY29uc3QgY2hhaV8xID0gcmVxdWlyZShcImNoYWlcIik7XHJcbmNvbnN0IHBhdGggPSByZXF1aXJlKFwicGF0aFwiKTtcclxuY29uc3QgdHlwZW1vcSA9IHJlcXVpcmUoXCJ0eXBlbW9xXCIpO1xyXG5jb25zdCBpbnZhbGlkUHl0aG9uUGF0aEluRGVidWdnZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvYXBwbGljYXRpb24vZGlhZ25vc3RpY3MvY2hlY2tzL2ludmFsaWRQeXRob25QYXRoSW5EZWJ1Z2dlclwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvYXBwbGljYXRpb24vZGlhZ25vc3RpY3MvY29tbWFuZHMvdHlwZXNcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NsaWVudC9hcHBsaWNhdGlvbi9kaWFnbm9zdGljcy9jb25zdGFudHNcIik7XHJcbmNvbnN0IHByb21wdEhhbmRsZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvYXBwbGljYXRpb24vZGlhZ25vc3RpY3MvcHJvbXB0SGFuZGxlclwiKTtcclxuY29uc3QgdHlwZXNfMiA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvYXBwbGljYXRpb24vZGlhZ25vc3RpY3MvdHlwZXNcIik7XHJcbmNvbnN0IHR5cGVzXzMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vY2xpZW50L2NvbW1vbi90eXBlc1wiKTtcclxuY29uc3QgY29udHJhY3RzXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vY2xpZW50L2ludGVycHJldGVyL2NvbnRyYWN0c1wiKTtcclxuc3VpdGUoJ0FwcGxpY2F0aW9uIERpYWdub3N0aWNzIC0gQ2hlY2tzIFB5dGhvbiBQYXRoIGluIGRlYnVnZ2VyJywgKCkgPT4ge1xyXG4gICAgbGV0IGRpYWdub3N0aWNTZXJ2aWNlO1xyXG4gICAgbGV0IG1lc3NhZ2VIYW5kbGVyO1xyXG4gICAgbGV0IGNvbW1hbmRGYWN0b3J5O1xyXG4gICAgbGV0IGNvbmZpZ1NlcnZpY2U7XHJcbiAgICBsZXQgaGVscGVyO1xyXG4gICAgc2V0dXAoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlcnZpY2VDb250YWluZXIgPSB0eXBlbW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgbWVzc2FnZUhhbmRsZXIgPSB0eXBlbW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgc2VydmljZUNvbnRhaW5lci5zZXR1cChzID0+IHMuZ2V0KHR5cGVtb3EuSXQuaXNWYWx1ZSh0eXBlc18yLklEaWFnbm9zdGljSGFuZGxlclNlcnZpY2UpLCB0eXBlbW9xLkl0LmlzVmFsdWUocHJvbXB0SGFuZGxlcl8xLkRpYWdub3N0aWNDb21tYW5kUHJvbXB0SGFuZGxlclNlcnZpY2VJZCkpKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiBtZXNzYWdlSGFuZGxlci5vYmplY3QpO1xyXG4gICAgICAgIGNvbW1hbmRGYWN0b3J5ID0gdHlwZW1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIHNlcnZpY2VDb250YWluZXIuc2V0dXAocyA9PiBzLmdldCh0eXBlbW9xLkl0LmlzVmFsdWUodHlwZXNfMS5JRGlhZ25vc3RpY3NDb21tYW5kRmFjdG9yeSkpKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiBjb21tYW5kRmFjdG9yeS5vYmplY3QpO1xyXG4gICAgICAgIGNvbmZpZ1NlcnZpY2UgPSB0eXBlbW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgc2VydmljZUNvbnRhaW5lci5zZXR1cChzID0+IHMuZ2V0KHR5cGVtb3EuSXQuaXNWYWx1ZSh0eXBlc18zLklDb25maWd1cmF0aW9uU2VydmljZSkpKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiBjb25maWdTZXJ2aWNlLm9iamVjdCk7XHJcbiAgICAgICAgaGVscGVyID0gdHlwZW1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIHNlcnZpY2VDb250YWluZXIuc2V0dXAocyA9PiBzLmdldCh0eXBlbW9xLkl0LmlzVmFsdWUoY29udHJhY3RzXzEuSUludGVycHJldGVySGVscGVyKSkpXHJcbiAgICAgICAgICAgIC5yZXR1cm5zKCgpID0+IGhlbHBlci5vYmplY3QpO1xyXG4gICAgICAgIGRpYWdub3N0aWNTZXJ2aWNlID0gbmV3IGludmFsaWRQeXRob25QYXRoSW5EZWJ1Z2dlcl8xLkludmFsaWRQeXRob25QYXRoSW5EZWJ1Z2dlclNlcnZpY2Uoc2VydmljZUNvbnRhaW5lci5vYmplY3QpO1xyXG4gICAgfSk7XHJcbiAgICB0ZXN0KCdDYW4gaGFuZGxlIEludmFsaWRQeXRob25QYXRoSW5EZWJ1Z2dlciBkaWFnbm9zdGljcycsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCBkaWFnbm9zdGljID0gdHlwZW1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIGRpYWdub3N0aWMuc2V0dXAoZCA9PiBkLmNvZGUpXHJcbiAgICAgICAgICAgIC5yZXR1cm5zKCgpID0+IGNvbnN0YW50c18xLkRpYWdub3N0aWNDb2Rlcy5JbnZhbGlkUHl0aG9uUGF0aEluRGVidWdnZXJEaWFnbm9zdGljKVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZSh0eXBlbW9xLlRpbWVzLmF0TGVhc3RPbmNlKCkpO1xyXG4gICAgICAgIGNvbnN0IGNhbkhhbmRsZSA9IHlpZWxkIGRpYWdub3N0aWNTZXJ2aWNlLmNhbkhhbmRsZShkaWFnbm9zdGljLm9iamVjdCk7XHJcbiAgICAgICAgY2hhaV8xLmV4cGVjdChjYW5IYW5kbGUpLnRvLmJlLmVxdWFsKHRydWUsICdJbnZhbGlkIHZhbHVlJyk7XHJcbiAgICAgICAgZGlhZ25vc3RpYy52ZXJpZnlBbGwoKTtcclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ0NhbiBub3QgaGFuZGxlIG5vbi1JbnZhbGlkUHl0aG9uUGF0aEluRGVidWdnZXIgZGlhZ25vc3RpY3MnLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgZGlhZ25vc3RpYyA9IHR5cGVtb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBkaWFnbm9zdGljLnNldHVwKGQgPT4gZC5jb2RlKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiAnU29tZXRoaW5nIEVsc2UnKVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZSh0eXBlbW9xLlRpbWVzLmF0TGVhc3RPbmNlKCkpO1xyXG4gICAgICAgIGNvbnN0IGNhbkhhbmRsZSA9IHlpZWxkIGRpYWdub3N0aWNTZXJ2aWNlLmNhbkhhbmRsZShkaWFnbm9zdGljLm9iamVjdCk7XHJcbiAgICAgICAgY2hhaV8xLmV4cGVjdChjYW5IYW5kbGUpLnRvLmJlLmVxdWFsKGZhbHNlLCAnSW52YWxpZCB2YWx1ZScpO1xyXG4gICAgICAgIGRpYWdub3N0aWMudmVyaWZ5QWxsKCk7XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdTaG91bGQgcmV0dXJuIGVtcHR5IGRpYWdub3N0aWNzJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IGRpYWdub3N0aWNzID0geWllbGQgZGlhZ25vc3RpY1NlcnZpY2UuZGlhZ25vc2UoKTtcclxuICAgICAgICBjaGFpXzEuZXhwZWN0KGRpYWdub3N0aWNzKS50by5iZS5kZWVwLmVxdWFsKFtdKTtcclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ1Nob3VsZCBkaXNwbGF5IG9uZSBvcHRpb24gdG8gd2l0aCBhIGNvbW1hbmQnLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgZGlhZ25vc3RpYyA9IHR5cGVtb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBkaWFnbm9zdGljLnNldHVwKGQgPT4gZC5jb2RlKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiBjb25zdGFudHNfMS5EaWFnbm9zdGljQ29kZXMuSW52YWxpZEVudmlyb25tZW50UGF0aFZhcmlhYmxlRGlhZ25vc3RpYylcclxuICAgICAgICAgICAgLnZlcmlmaWFibGUodHlwZW1vcS5UaW1lcy5hdExlYXN0T25jZSgpKTtcclxuICAgICAgICBjb25zdCBpbnRlcnByZXRlclNlbGVjdGlvbkNvbW1hbmQgPSB0eXBlbW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgY29tbWFuZEZhY3Rvcnkuc2V0dXAoZiA9PiBmLmNyZWF0ZUNvbW1hbmQodHlwZW1vcS5JdC5pc0FueSgpLCB0eXBlbW9xLkl0LmlzT2JqZWN0V2l0aCh7IHR5cGU6ICdleGVjdXRlVlNDQ29tbWFuZCcgfSkpKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiBpbnRlcnByZXRlclNlbGVjdGlvbkNvbW1hbmQub2JqZWN0KVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZSh0eXBlbW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgbWVzc2FnZUhhbmRsZXIuc2V0dXAobSA9PiBtLmhhbmRsZSh0eXBlbW9xLkl0LmlzQW55KCksIHR5cGVtb3EuSXQuaXNBbnkoKSkpXHJcbiAgICAgICAgICAgIC52ZXJpZmlhYmxlKHR5cGVtb3EuVGltZXMub25jZSgpKTtcclxuICAgICAgICB5aWVsZCBkaWFnbm9zdGljU2VydmljZS5oYW5kbGUoW2RpYWdub3N0aWMub2JqZWN0XSk7XHJcbiAgICAgICAgZGlhZ25vc3RpYy52ZXJpZnlBbGwoKTtcclxuICAgICAgICBjb21tYW5kRmFjdG9yeS52ZXJpZnlBbGwoKTtcclxuICAgICAgICBtZXNzYWdlSGFuZGxlci52ZXJpZnlBbGwoKTtcclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ0Vuc3VyZSB3ZSBnZXQgcHl0aG9uIHBhdGggZnJvbSBjb25maWcgd2hlbiBwYXRoID0gJHtjb25maWc6cHl0aG9uLnB5dGhvblBhdGh9JywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IHB5dGhvblBhdGggPSAnJHtjb25maWc6cHl0aG9uLnB5dGhvblBhdGh9JztcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHR5cGVtb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBzZXR0aW5nc1xyXG4gICAgICAgICAgICAuc2V0dXAocyA9PiBzLnB5dGhvblBhdGgpXHJcbiAgICAgICAgICAgIC5yZXR1cm5zKCgpID0+ICdwJylcclxuICAgICAgICAgICAgLnZlcmlmaWFibGUodHlwZW1vcS5UaW1lcy5vbmNlKCkpO1xyXG4gICAgICAgIGNvbmZpZ1NlcnZpY2VcclxuICAgICAgICAgICAgLnNldHVwKGMgPT4gYy5nZXRTZXR0aW5ncyh0eXBlbW9xLkl0LmlzQW55KCkpKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiBzZXR0aW5ncy5vYmplY3QpXHJcbiAgICAgICAgICAgIC52ZXJpZmlhYmxlKHR5cGVtb3EuVGltZXMub25jZSgpKTtcclxuICAgICAgICBoZWxwZXJcclxuICAgICAgICAgICAgLnNldHVwKGggPT4gaC5nZXRJbnRlcnByZXRlckluZm9ybWF0aW9uKHR5cGVtb3EuSXQuaXNWYWx1ZSgncCcpKSlcclxuICAgICAgICAgICAgLnJldHVybnMoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSlcclxuICAgICAgICAgICAgLnZlcmlmaWFibGUodHlwZW1vcS5UaW1lcy5vbmNlKCkpO1xyXG4gICAgICAgIGNvbnN0IHZhbGlkID0geWllbGQgZGlhZ25vc3RpY1NlcnZpY2UudmFsaWRhdGVQeXRob25QYXRoKHB5dGhvblBhdGgpO1xyXG4gICAgICAgIHNldHRpbmdzLnZlcmlmeUFsbCgpO1xyXG4gICAgICAgIGNvbmZpZ1NlcnZpY2UudmVyaWZ5QWxsKCk7XHJcbiAgICAgICAgaGVscGVyLnZlcmlmeUFsbCgpO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QodmFsaWQpLnRvLmJlLmVxdWFsKHRydWUsICdub3QgdmFsaWQnKTtcclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ0Vuc3VyZSB3ZSBnZXQgcHl0aG9uIHBhdGggZnJvbSBjb25maWcgd2hlbiBwYXRoID0gdW5kZWZpbmVkJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IHB5dGhvblBhdGggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSB0eXBlbW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgc2V0dGluZ3NcclxuICAgICAgICAgICAgLnNldHVwKHMgPT4gcy5weXRob25QYXRoKVxyXG4gICAgICAgICAgICAucmV0dXJucygoKSA9PiAncCcpXHJcbiAgICAgICAgICAgIC52ZXJpZmlhYmxlKHR5cGVtb3EuVGltZXMub25jZSgpKTtcclxuICAgICAgICBjb25maWdTZXJ2aWNlXHJcbiAgICAgICAgICAgIC5zZXR1cChjID0+IGMuZ2V0U2V0dGluZ3ModHlwZW1vcS5JdC5pc0FueSgpKSlcclxuICAgICAgICAgICAgLnJldHVybnMoKCkgPT4gc2V0dGluZ3Mub2JqZWN0KVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZSh0eXBlbW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgaGVscGVyXHJcbiAgICAgICAgICAgIC5zZXR1cChoID0+IGguZ2V0SW50ZXJwcmV0ZXJJbmZvcm1hdGlvbih0eXBlbW9xLkl0LmlzVmFsdWUoJ3AnKSkpXHJcbiAgICAgICAgICAgIC5yZXR1cm5zKCgpID0+IFByb21pc2UucmVzb2x2ZSh7fSkpXHJcbiAgICAgICAgICAgIC52ZXJpZmlhYmxlKHR5cGVtb3EuVGltZXMub25jZSgpKTtcclxuICAgICAgICBjb25zdCB2YWxpZCA9IHlpZWxkIGRpYWdub3N0aWNTZXJ2aWNlLnZhbGlkYXRlUHl0aG9uUGF0aChweXRob25QYXRoKTtcclxuICAgICAgICBzZXR0aW5ncy52ZXJpZnlBbGwoKTtcclxuICAgICAgICBjb25maWdTZXJ2aWNlLnZlcmlmeUFsbCgpO1xyXG4gICAgICAgIGhlbHBlci52ZXJpZnlBbGwoKTtcclxuICAgICAgICBjaGFpXzEuZXhwZWN0KHZhbGlkKS50by5iZS5lcXVhbCh0cnVlLCAnbm90IHZhbGlkJyk7XHJcbiAgICB9KSk7XHJcbiAgICB0ZXN0KCdFbnN1cmUgd2UgZG8gZ2V0IHB5dGhvbiBwYXRoIGZyb20gY29uZmlnIHdoZW4gcGF0aCBpcyBwcm92aWRlZCcsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCBweXRob25QYXRoID0gcGF0aC5qb2luKCdhJywgJ2InKTtcclxuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IHR5cGVtb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBjb25maWdTZXJ2aWNlXHJcbiAgICAgICAgICAgIC5zZXR1cChjID0+IGMuZ2V0U2V0dGluZ3ModHlwZW1vcS5JdC5pc0FueSgpKSlcclxuICAgICAgICAgICAgLnJldHVybnMoKCkgPT4gc2V0dGluZ3Mub2JqZWN0KVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZSh0eXBlbW9xLlRpbWVzLm5ldmVyKCkpO1xyXG4gICAgICAgIGhlbHBlclxyXG4gICAgICAgICAgICAuc2V0dXAoaCA9PiBoLmdldEludGVycHJldGVySW5mb3JtYXRpb24odHlwZW1vcS5JdC5pc1ZhbHVlKHB5dGhvblBhdGgpKSlcclxuICAgICAgICAgICAgLnJldHVybnMoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSlcclxuICAgICAgICAgICAgLnZlcmlmaWFibGUodHlwZW1vcS5UaW1lcy5vbmNlKCkpO1xyXG4gICAgICAgIGNvbnN0IHZhbGlkID0geWllbGQgZGlhZ25vc3RpY1NlcnZpY2UudmFsaWRhdGVQeXRob25QYXRoKHB5dGhvblBhdGgpO1xyXG4gICAgICAgIGNvbmZpZ1NlcnZpY2UudmVyaWZ5QWxsKCk7XHJcbiAgICAgICAgaGVscGVyLnZlcmlmeUFsbCgpO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QodmFsaWQpLnRvLmJlLmVxdWFsKHRydWUsICdub3QgdmFsaWQnKTtcclxuICAgIH0pKTtcclxuICAgIHRlc3QoJ0Vuc3VyZSBkaWFnbm9zaWNzIGFyZSBoYW5kbGVkIHdoZW4gcGF0aCBpcyBpbnZhbGlkJywgKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIGNvbnN0IHB5dGhvblBhdGggPSBwYXRoLmpvaW4oJ2EnLCAnYicpO1xyXG4gICAgICAgIGxldCBoYW5kbGVJbnZva2VkID0gZmFsc2U7XHJcbiAgICAgICAgZGlhZ25vc3RpY1NlcnZpY2UuaGFuZGxlID0gKCkgPT4geyBoYW5kbGVJbnZva2VkID0gdHJ1ZTsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOyB9O1xyXG4gICAgICAgIGhlbHBlclxyXG4gICAgICAgICAgICAuc2V0dXAoaCA9PiBoLmdldEludGVycHJldGVySW5mb3JtYXRpb24odHlwZW1vcS5JdC5pc1ZhbHVlKHB5dGhvblBhdGgpKSlcclxuICAgICAgICAgICAgLnJldHVybnMoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCkpXHJcbiAgICAgICAgICAgIC52ZXJpZmlhYmxlKHR5cGVtb3EuVGltZXMub25jZSgpKTtcclxuICAgICAgICBjb25zdCB2YWxpZCA9IHlpZWxkIGRpYWdub3N0aWNTZXJ2aWNlLnZhbGlkYXRlUHl0aG9uUGF0aChweXRob25QYXRoKTtcclxuICAgICAgICBoZWxwZXIudmVyaWZ5QWxsKCk7XHJcbiAgICAgICAgY2hhaV8xLmV4cGVjdCh2YWxpZCkudG8uYmUuZXF1YWwoZmFsc2UsICdzaG91bGQgYmUgaW52YWxpZCcpO1xyXG4gICAgICAgIGNoYWlfMS5leHBlY3QoaGFuZGxlSW52b2tlZCkudG8uYmUuZXF1YWwodHJ1ZSwgJ3Nob3VsZCBiZSBpbnZva2VkJyk7XHJcbiAgICB9KSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnZhbGlkUHl0aG9uUGF0aEluRGVidWdnZXIudW5pdC50ZXN0LmpzLm1hcCJdfQ==