// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const typemoq = require("typemoq");

const launchBrowser_1 = require("../../../../client/application/diagnostics/commands/launchBrowser");

const types_1 = require("../../../../client/common/types");

suite('Application Diagnostics - Commands Launch Browser', () => {
  let cmd;
  let serviceContainer;
  let diagnostic;
  const url = 'xyz://abc';
  setup(() => {
    serviceContainer = typemoq.Mock.ofType();
    diagnostic = typemoq.Mock.ofType();
    cmd = new launchBrowser_1.LaunchBrowserCommand(diagnostic.object, serviceContainer.object, url);
  });
  test('Invoking Command should launch the browser', () => __awaiter(void 0, void 0, void 0, function* () {
    const browser = typemoq.Mock.ofType();
    serviceContainer.setup(s => s.get(typemoq.It.isValue(types_1.IBrowserService))).returns(() => browser.object).verifiable(typemoq.Times.once());
    browser.setup(s => s.launch(typemoq.It.isValue(url))).verifiable(typemoq.Times.once());
    yield cmd.invoke();
    serviceContainer.verifyAll();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhdW5jaEJyb3dzZXIudW5pdC50ZXN0LmpzIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ0eXBlbW9xIiwicmVxdWlyZSIsImxhdW5jaEJyb3dzZXJfMSIsInR5cGVzXzEiLCJzdWl0ZSIsImNtZCIsInNlcnZpY2VDb250YWluZXIiLCJkaWFnbm9zdGljIiwidXJsIiwic2V0dXAiLCJNb2NrIiwib2ZUeXBlIiwiTGF1bmNoQnJvd3NlckNvbW1hbmQiLCJvYmplY3QiLCJ0ZXN0IiwiYnJvd3NlciIsInMiLCJnZXQiLCJJdCIsImlzVmFsdWUiLCJJQnJvd3NlclNlcnZpY2UiLCJyZXR1cm5zIiwidmVyaWZpYWJsZSIsIlRpbWVzIiwib25jZSIsImxhdW5jaCIsImludm9rZSIsInZlcmlmeUFsbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBLElBQUlBLFNBQVMsR0FBSSxVQUFRLFNBQUtBLFNBQWQsSUFBNEIsVUFBVUMsT0FBVixFQUFtQkMsVUFBbkIsRUFBK0JDLENBQS9CLEVBQWtDQyxTQUFsQyxFQUE2QztBQUNyRixTQUFPLEtBQUtELENBQUMsS0FBS0EsQ0FBQyxHQUFHRSxPQUFULENBQU4sRUFBeUIsVUFBVUMsT0FBVixFQUFtQkMsTUFBbkIsRUFBMkI7QUFDdkQsYUFBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFBRSxVQUFJO0FBQUVDLFFBQUFBLElBQUksQ0FBQ04sU0FBUyxDQUFDTyxJQUFWLENBQWVGLEtBQWYsQ0FBRCxDQUFKO0FBQThCLE9BQXBDLENBQXFDLE9BQU9HLENBQVAsRUFBVTtBQUFF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RUFBTjtBQUNBcEIsSUFBQUEsZ0JBQWdCLENBQUNxQixTQUFqQjtBQUNILEdBVGlFLENBQTlELENBQUo7QUFVSCxDQXBCSSxDQUFMIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHR5cGVtb3EgPSByZXF1aXJlKFwidHlwZW1vcVwiKTtcclxuY29uc3QgbGF1bmNoQnJvd3Nlcl8xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NsaWVudC9hcHBsaWNhdGlvbi9kaWFnbm9zdGljcy9jb21tYW5kcy9sYXVuY2hCcm93c2VyXCIpO1xyXG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL2NsaWVudC9jb21tb24vdHlwZXNcIik7XHJcbnN1aXRlKCdBcHBsaWNhdGlvbiBEaWFnbm9zdGljcyAtIENvbW1hbmRzIExhdW5jaCBCcm93c2VyJywgKCkgPT4ge1xyXG4gICAgbGV0IGNtZDtcclxuICAgIGxldCBzZXJ2aWNlQ29udGFpbmVyO1xyXG4gICAgbGV0IGRpYWdub3N0aWM7XHJcbiAgICBjb25zdCB1cmwgPSAneHl6Oi8vYWJjJztcclxuICAgIHNldHVwKCgpID0+IHtcclxuICAgICAgICBzZXJ2aWNlQ29udGFpbmVyID0gdHlwZW1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIGRpYWdub3N0aWMgPSB0eXBlbW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgY21kID0gbmV3IGxhdW5jaEJyb3dzZXJfMS5MYXVuY2hCcm93c2VyQ29tbWFuZChkaWFnbm9zdGljLm9iamVjdCwgc2VydmljZUNvbnRhaW5lci5vYmplY3QsIHVybCk7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoJ0ludm9raW5nIENvbW1hbmQgc2hvdWxkIGxhdW5jaCB0aGUgYnJvd3NlcicsICgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCBicm93c2VyID0gdHlwZW1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIHNlcnZpY2VDb250YWluZXIuc2V0dXAocyA9PiBzLmdldCh0eXBlbW9xLkl0LmlzVmFsdWUodHlwZXNfMS5JQnJvd3NlclNlcnZpY2UpKSlcclxuICAgICAgICAgICAgLnJldHVybnMoKCkgPT4gYnJvd3Nlci5vYmplY3QpXHJcbiAgICAgICAgICAgIC52ZXJpZmlhYmxlKHR5cGVtb3EuVGltZXMub25jZSgpKTtcclxuICAgICAgICBicm93c2VyLnNldHVwKHMgPT4gcy5sYXVuY2godHlwZW1vcS5JdC5pc1ZhbHVlKHVybCkpKVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZSh0eXBlbW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgeWllbGQgY21kLmludm9rZSgpO1xyXG4gICAgICAgIHNlcnZpY2VDb250YWluZXIudmVyaWZ5QWxsKCk7XHJcbiAgICB9KSk7XHJcbn0pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYXVuY2hCcm93c2VyLnVuaXQudGVzdC5qcy5tYXAiXX0=