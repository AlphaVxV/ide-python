// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const typemoq = require("typemoq");

const ignore_1 = require("../../../../client/application/diagnostics/commands/ignore");

const types_1 = require("../../../../client/application/diagnostics/types");

suite('Application Diagnostics - Commands Ignore', () => {
  let ignoreCommand;
  let serviceContainer;
  let diagnostic;
  setup(() => {
    serviceContainer = typemoq.Mock.ofType();
    diagnostic = typemoq.Mock.ofType();
    ignoreCommand = new ignore_1.IgnoreDiagnosticCommand(diagnostic.object, serviceContainer.object, types_1.DiagnosticScope.Global);
  });
  test('Invoking Command should invoke the filter Service', () => __awaiter(void 0, void 0, void 0, function* () {
    const filterService = typemoq.Mock.ofType();
    serviceContainer.setup(s => s.get(typemoq.It.isValue(types_1.IDiagnosticFilterService))).returns(() => filterService.object).verifiable(typemoq.Times.once());
    diagnostic.setup(d => d.code).returns(() => 'xyz').verifiable(typemoq.Times.once());
    filterService.setup(s => s.ignoreDiagnostic(typemoq.It.isValue('xyz'), typemoq.It.isValue(types_1.DiagnosticScope.Global))).verifiable(typemoq.Times.once());
    yield ignoreCommand.invoke();
    serviceContainer.verifyAll();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlnbm9yZS51bml0LnRlc3QuanMiXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInR5cGVtb3EiLCJyZXF1aXJlIiwiaWdub3JlXzEiLCJ0eXBlc18xIiwic3VpdGUiLCJpZ25vcmVDb21tYW5kIiwic2VydmljZUNvbnRhaW5lciIsImRpYWdub3N0aWMiLCJzZXR1cCIsIk1vY2siLCJvZlR5cGUiLCJJZ25vcmVEaWFnbm9zdGljQ29tbWFuZCIsIm9iamVjdCIsIkRpYWdub3N0aWNTY29wZSIsIkdsb2JhbCIsInRlc3QiLCJmaWx0ZXJTZXJ2aWNlIiwicyIsImdldCIsIkl0IiwiaXNWYWx1ZSIsIklEaWFnbm9zdGljRmlsdGVyU2VydmljZSIsInJldHVybnMiLCJ2ZXJpZmlhYmxlIiwiVGltZXMiLCJvbmNlIiwiZCIsImNvZGUiLCJpZ25vcmVEaWFnbm9zdGljIiwiaW52b2tlIiwidmVyaWZ5QWxsIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBQ0EsSUFBSUEsU0FBUyxHQUFJLFVBQVEsU0FBS0EsU0FBZCxJQUE0QixVQUFVQyxPQUFWLEVBQW1CQyxVQUFuQixFQUErQkMsQ0FBL0IsRUFBa0NDLFNBQWxDLEVBQTZDO0FBQ3JGLFNBQU8sS0FBS0QsQ0FBQyxLQUFLQSxDQUFDLEdBQUdFLE9BQVQsQ0FBTixFQUF5QixVQUFVQyxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUN2RCxhQUFTQyxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUNPLElBQVYsQ0FB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O0FBRUFULElBQUFBLGFBQWEsQ0FBQ1IsS0FBZCxDQUFvQlMsQ0FBQyxJQUFJQSxDQUFDLENBQUNXLGdCQUFGLENBQW1CNUIsT0FBTyxDQUFDbUIsRUFBUixDQUFXQyxPQUFYLENBQW1CLEtBQW5CLENBQW5CLEVBQThDcEIsT0FBTyxDQUFDbUIsRUFBUixDQUFXQyxPQUFYLENBQW1CakIsT0FBTyxDQUFDVSxlQUFSLENBQXdCQyxNQUEzQyxDQUE5QyxDQUF6QixFQUNLUyxVQURMLENBQ2dCdkIsT0FBTyxDQUFDd0IsS0FBUixDQUFjQyxJQUFkLEVBRGhCO0FBRUEsVUFBTXBCLGFBQWEsQ0FBQ3dCLE1BQWQsRUFBTjtBQUNBdkIsSUFBQUEsZ0JBQWdCLENBQUN3QixTQUFqQjtBQUNILEdBWHdFLENBQXJFLENBQUo7QUFZSCxDQXJCSSxDQUFMIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IHR5cGVtb3EgPSByZXF1aXJlKFwidHlwZW1vcVwiKTtcclxuY29uc3QgaWdub3JlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vY2xpZW50L2FwcGxpY2F0aW9uL2RpYWdub3N0aWNzL2NvbW1hbmRzL2lnbm9yZVwiKTtcclxuY29uc3QgdHlwZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9jbGllbnQvYXBwbGljYXRpb24vZGlhZ25vc3RpY3MvdHlwZXNcIik7XHJcbnN1aXRlKCdBcHBsaWNhdGlvbiBEaWFnbm9zdGljcyAtIENvbW1hbmRzIElnbm9yZScsICgpID0+IHtcclxuICAgIGxldCBpZ25vcmVDb21tYW5kO1xyXG4gICAgbGV0IHNlcnZpY2VDb250YWluZXI7XHJcbiAgICBsZXQgZGlhZ25vc3RpYztcclxuICAgIHNldHVwKCgpID0+IHtcclxuICAgICAgICBzZXJ2aWNlQ29udGFpbmVyID0gdHlwZW1vcS5Nb2NrLm9mVHlwZSgpO1xyXG4gICAgICAgIGRpYWdub3N0aWMgPSB0eXBlbW9xLk1vY2sub2ZUeXBlKCk7XHJcbiAgICAgICAgaWdub3JlQ29tbWFuZCA9IG5ldyBpZ25vcmVfMS5JZ25vcmVEaWFnbm9zdGljQ29tbWFuZChkaWFnbm9zdGljLm9iamVjdCwgc2VydmljZUNvbnRhaW5lci5vYmplY3QsIHR5cGVzXzEuRGlhZ25vc3RpY1Njb3BlLkdsb2JhbCk7XHJcbiAgICB9KTtcclxuICAgIHRlc3QoJ0ludm9raW5nIENvbW1hbmQgc2hvdWxkIGludm9rZSB0aGUgZmlsdGVyIFNlcnZpY2UnLCAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyU2VydmljZSA9IHR5cGVtb3EuTW9jay5vZlR5cGUoKTtcclxuICAgICAgICBzZXJ2aWNlQ29udGFpbmVyLnNldHVwKHMgPT4gcy5nZXQodHlwZW1vcS5JdC5pc1ZhbHVlKHR5cGVzXzEuSURpYWdub3N0aWNGaWx0ZXJTZXJ2aWNlKSkpXHJcbiAgICAgICAgICAgIC5yZXR1cm5zKCgpID0+IGZpbHRlclNlcnZpY2Uub2JqZWN0KVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZSh0eXBlbW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgZGlhZ25vc3RpYy5zZXR1cChkID0+IGQuY29kZSkucmV0dXJucygoKSA9PiAneHl6JylcclxuICAgICAgICAgICAgLnZlcmlmaWFibGUodHlwZW1vcS5UaW1lcy5vbmNlKCkpO1xyXG4gICAgICAgIGZpbHRlclNlcnZpY2Uuc2V0dXAocyA9PiBzLmlnbm9yZURpYWdub3N0aWModHlwZW1vcS5JdC5pc1ZhbHVlKCd4eXonKSwgdHlwZW1vcS5JdC5pc1ZhbHVlKHR5cGVzXzEuRGlhZ25vc3RpY1Njb3BlLkdsb2JhbCkpKVxyXG4gICAgICAgICAgICAudmVyaWZpYWJsZSh0eXBlbW9xLlRpbWVzLm9uY2UoKSk7XHJcbiAgICAgICAgeWllbGQgaWdub3JlQ29tbWFuZC5pbnZva2UoKTtcclxuICAgICAgICBzZXJ2aWNlQ29udGFpbmVyLnZlcmlmeUFsbCgpO1xyXG4gICAgfSkpO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWdub3JlLnVuaXQudGVzdC5qcy5tYXAiXX0=