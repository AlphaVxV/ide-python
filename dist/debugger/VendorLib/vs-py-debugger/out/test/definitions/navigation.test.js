// Licensed under the MIT License.
'use strict';

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const assert = require("assert");

const path = require("path");

const vscode = require("vscode");

const constants_1 = require("../../client/common/constants");

const initialize_1 = require("../initialize");

const decoratorsPath = path.join(__dirname, '..', '..', '..', 'src', 'test', 'pythonFiles', 'definition', 'navigation');
const fileDefinitions = path.join(decoratorsPath, 'definitions.py');
const fileUsages = path.join(decoratorsPath, 'usages.py'); // tslint:disable-next-line:max-func-body-length

suite('Definition Navigation', () => {
  suiteSetup(initialize_1.initialize);
  setup(initialize_1.initializeTest);
  suiteTeardown(initialize_1.closeActiveWindows);
  teardown(initialize_1.closeActiveWindows);

  const assertFile = (expectedLocation, location) => {
    const relLocation = vscode.workspace.asRelativePath(location);
    const expectedRelLocation = vscode.workspace.asRelativePath(expectedLocation);
    assert.equal(expectedRelLocation, relLocation, 'Position is in wrong file');
  };

  const formatPosition = position => {
    return `${position.line},${position.character}`;
  };

  const assertRange = (expectedRange, range) => {
    assert.equal(formatPosition(expectedRange.start), formatPosition(range.start), 'Start position is incorrect');
    assert.equal(formatPosition(expectedRange.end), formatPosition(range.end), 'End position is incorrect');
  };

  const buildTest = (startFile, startPosition, expectedFiles, expectedRanges) => {
    return () => __awaiter(void 0, void 0, void 0, function* () {
      const textDocument = yield vscode.workspace.openTextDocument(startFile);
      yield vscode.window.showTextDocument(textDocument);
      assert(vscode.window.activeTextEditor, 'No active editor');
      const locations = yield vscode.commands.executeCommand('vscode.executeDefinitionProvider', textDocument.uri, startPosition);
      assert.equal(expectedFiles.length, locations.length, 'Wrong number of results');

      for (let i = 0; i < locations.length; i += 1) {
        assertFile(expectedFiles[i], locations[i].uri);
        assertRange(expectedRanges[i], locations[i].range);
      }
    });
  };

  test('From own definition', buildTest(fileDefinitions, new vscode.Position(2, 6), [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(2, 4, 2, 16)] : [new vscode.Range(2, 0, 11, 17)]));
  test('Nested function', buildTest(fileDefinitions, new vscode.Position(11, 16), [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(6, 8, 6, 15)] : [new vscode.Range(6, 4, 10, 16)]));
  test('Decorator usage', buildTest(fileDefinitions, new vscode.Position(13, 1), [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(2, 4, 2, 16)] : [new vscode.Range(2, 0, 11, 17)]));
  test('Function decorated by stdlib', buildTest(fileDefinitions, new vscode.Position(29, 6), [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(21, 4, 21, 22)] : [new vscode.Range(21, 0, 27, 17)]));
  test('Function decorated by local decorator', buildTest(fileDefinitions, new vscode.Position(30, 6), [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(14, 4, 14, 9)] : [new vscode.Range(14, 0, 18, 7)]));
  test('Module imported decorator usage', buildTest(fileUsages, new vscode.Position(3, 15), [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(2, 4, 2, 16)] : [new vscode.Range(2, 0, 11, 17)]));
  test('Module imported function decorated by stdlib', buildTest(fileUsages, new vscode.Position(11, 19), [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(21, 4, 21, 22)] : [new vscode.Range(21, 0, 27, 17)]));
  test('Module imported function decorated by local decorator', buildTest(fileUsages, new vscode.Position(12, 19), [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(14, 4, 14, 9)] : [new vscode.Range(14, 0, 18, 7)]));
  test('Specifically imported decorator usage', buildTest(fileUsages, new vscode.Position(7, 1), constants_1.isLanguageServerTest() ? [fileDefinitions] : [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(2, 4, 2, 16)] : [new vscode.Range(2, 0, 11, 17)]));
  test('Specifically imported function decorated by stdlib', buildTest(fileUsages, new vscode.Position(14, 6), constants_1.isLanguageServerTest() ? [fileDefinitions] : [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(21, 4, 21, 22)] : [new vscode.Range(21, 0, 27, 17)]));
  test('Specifically imported function decorated by local decorator', buildTest(fileUsages, new vscode.Position(15, 6), constants_1.isLanguageServerTest() ? [fileDefinitions] : [fileDefinitions], constants_1.isLanguageServerTest() ? [new vscode.Range(14, 4, 14, 9)] : [new vscode.Range(14, 0, 18, 7)]));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5hdmlnYXRpb24udGVzdC5qcyJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiYXNzZXJ0IiwicmVxdWlyZSIsInBhdGgiLCJ2c2NvZGUiLCJjb25zdGFudHNfMSIsImluaXRpYWxpemVfMSIsImRlY29yYXRvcnNQYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsImZpbGVEZWZpbml0aW9ucyIsImZpbGVVc2FnZXMiLCJzdWl0ZSIsInN1aXRlU2V0dXAiLCJpbml0aWFsaXplIiwic2V0dXAiLCJpbml0aWFsaXplVGVzdCIsInN1aXRlVGVhcmRvd24iLCJjbG9zZUFjdGl2ZVdpbmRvd3MiLCJ0ZWFyZG93biIsImFzc2VydEZpbGUiLCJleHBlY3RlZExvY2F0aW9uIiwibG9jYXRpb24iLCJyZWxMb2NhdGlvbiIsIndvcmtzcGFjZSIsImFzUmVsYXRpdmVQYXRoIiwiZXhwZWN0ZWRSZWxMb2NhdGlvbiIsImVxdWFsIiwiZm9ybWF0UG9zaXRpb24iLCJwb3NpdGlvbiIsImxpbmUiLCJjaGFyYWN0ZXIiLCJhc3NlcnRSYW5nZSIsImV4cGVjdGVkUmFuZ2UiLCJyYW5nZSIsInN0YXJ0IiwiZW5kIiwiYnVpbGRUZXN0Iiwic3RhcnRGaWxlIiwic3RhcnRQb3NpdGlvbiIsImV4cGVjdGVkRmlsZXMiLCJleHBlY3RlZFJhbmdlcyIsInRleHREb2N1bWVudCIsIm9wZW5UZXh0RG9jdW1lbnQiLCJ3aW5kb3ciLCJzaG93VGV4dERvY3VtZW50IiwiYWN0aXZlVGV4dEVkaXRvciIsImxvY2F0aW9ucyIsImNvbW1hbmRzIiwiZXhlY3V0ZUNvbW1hbmQiLCJ1cmkiLCJsZW5ndGgiLCJpIiwidGVzdCIsIlBvc2l0aW9uIiwiaXNMYW5ndWFnZVNlcnZlclRlc3QiLCJSYW5nZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQSxJQUFJQSxTQUFTLEdBQUksVUFBUSxTQUFLQSxTQUFkLElBQTRCLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCQyxDQUEvQixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDckYsU0FBTyxLQUFLRCxDQUFDLEtBQUtBLENBQUMsR0FBR0UsT0FBVCxDQUFOLEVBQXlCLFVBQVVDLE9BQVYsRUFBbUJDLE1BQW5CLEVBQTJCO0FBQ3ZELGFBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQUUsVUFBSTtBQUFFQyxRQUFBQSxJQUFJLENBQUNOLFNBQVMsQ0FBQ08sSUFBVixDQUFlRixLQUFmLENBQUQsQ0FBSjtBQUE4QixPQUFwQyxDQUFxQyxPQUFPRyxDQUFQLEVBQVU7QUFBRUwsUUFBQUEsTUFBTSxDQUFDSyxDQUFELENBQU47QUFBWTtBQUFFOztBQUMzRixhQUFTQyxRQUFULENBQWtCSixLQUFsQixFQUF5QjtBQUFFLFVBQUk7QUFBRUMsUUFBQUEsSUFBSSxDQUFDTixTQUFTLENBQUMsT0FBRCxDQUFULENBQW1CSyxLQUFuQixDQUFELENBQUo7QUFBa0MsT0FBeEMsQ0FBeUMsT0FBT0csQ0FBUCxFQUFVO0FBQUVMLFFBQUFBLE1BQU0sQ0FBQ0ssQ0FBRCxDQUFOO0FBQVk7QUFBRTs7QUFDOUYsYUFBU0YsSUFBVCxDQUFjSSxNQUFkLEVBQXNCO0FBQUVBLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjVCxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFyQixHQUFzQyxJQUFJTixDQUFKLENBQU0sVUFBVUcsT0FBVixFQUFtQjtBQUFFQSxRQUFBQSxPQUFPLENBQUNRLE1BQU0sQ0FBQ0wsS0FBUixDQUFQO0FBQXdCLE9BQW5ELEVBQXFETyxJQUFyRCxDQUEwRFIsU0FBMUQsRUFBcUVLLFFBQXJFLENBQXRDO0FBQXVIOztBQUMv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d0IsQ0FBeEIsQ0FBYixFQUF5Q2pELFdBQVcsQ0FBQ2tELG9CQUFaLEtBQXFDLENBQUM3QyxlQUFELENBQXJDLEdBQXlELENBQUNBLGVBQUQsQ0FBbEcsRUFBcUhMLFdBQVcsQ0FBQ2tELG9CQUFaLEtBQzVMLENBQUMsSUFBSW5ELE1BQU0sQ0FBQ29ELEtBQVgsQ0FBaUIsRUFBakIsRUFBcUIsQ0FBckIsRUFBd0IsRUFBeEIsRUFBNEIsQ0FBNUIsQ0FBRCxDQUQ0TCxHQUU1TCxDQUFDLElBQUlwRCxNQUFNLENBQUNvRCxLQUFYLENBQWlCLEVBQWpCLEVBQXFCLENBQXJCLEVBQXdCLEVBQXhCLEVBQTRCLENBQTVCLENBQUQsQ0FGdUUsQ0FBekUsQ0FBSjtBQUdILENBL0NJLENBQUwiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZShcInBhdGhcIik7XHJcbmNvbnN0IHZzY29kZSA9IHJlcXVpcmUoXCJ2c2NvZGVcIik7XHJcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uLy4uL2NsaWVudC9jb21tb24vY29uc3RhbnRzXCIpO1xyXG5jb25zdCBpbml0aWFsaXplXzEgPSByZXF1aXJlKFwiLi4vaW5pdGlhbGl6ZVwiKTtcclxuY29uc3QgZGVjb3JhdG9yc1BhdGggPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLi4nLCAnc3JjJywgJ3Rlc3QnLCAncHl0aG9uRmlsZXMnLCAnZGVmaW5pdGlvbicsICduYXZpZ2F0aW9uJyk7XHJcbmNvbnN0IGZpbGVEZWZpbml0aW9ucyA9IHBhdGguam9pbihkZWNvcmF0b3JzUGF0aCwgJ2RlZmluaXRpb25zLnB5Jyk7XHJcbmNvbnN0IGZpbGVVc2FnZXMgPSBwYXRoLmpvaW4oZGVjb3JhdG9yc1BhdGgsICd1c2FnZXMucHknKTtcclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1mdW5jLWJvZHktbGVuZ3RoXHJcbnN1aXRlKCdEZWZpbml0aW9uIE5hdmlnYXRpb24nLCAoKSA9PiB7XHJcbiAgICBzdWl0ZVNldHVwKGluaXRpYWxpemVfMS5pbml0aWFsaXplKTtcclxuICAgIHNldHVwKGluaXRpYWxpemVfMS5pbml0aWFsaXplVGVzdCk7XHJcbiAgICBzdWl0ZVRlYXJkb3duKGluaXRpYWxpemVfMS5jbG9zZUFjdGl2ZVdpbmRvd3MpO1xyXG4gICAgdGVhcmRvd24oaW5pdGlhbGl6ZV8xLmNsb3NlQWN0aXZlV2luZG93cyk7XHJcbiAgICBjb25zdCBhc3NlcnRGaWxlID0gKGV4cGVjdGVkTG9jYXRpb24sIGxvY2F0aW9uKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmVsTG9jYXRpb24gPSB2c2NvZGUud29ya3NwYWNlLmFzUmVsYXRpdmVQYXRoKGxvY2F0aW9uKTtcclxuICAgICAgICBjb25zdCBleHBlY3RlZFJlbExvY2F0aW9uID0gdnNjb2RlLndvcmtzcGFjZS5hc1JlbGF0aXZlUGF0aChleHBlY3RlZExvY2F0aW9uKTtcclxuICAgICAgICBhc3NlcnQuZXF1YWwoZXhwZWN0ZWRSZWxMb2NhdGlvbiwgcmVsTG9jYXRpb24sICdQb3NpdGlvbiBpcyBpbiB3cm9uZyBmaWxlJyk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZm9ybWF0UG9zaXRpb24gPSAocG9zaXRpb24pID0+IHtcclxuICAgICAgICByZXR1cm4gYCR7cG9zaXRpb24ubGluZX0sJHtwb3NpdGlvbi5jaGFyYWN0ZXJ9YDtcclxuICAgIH07XHJcbiAgICBjb25zdCBhc3NlcnRSYW5nZSA9IChleHBlY3RlZFJhbmdlLCByYW5nZSkgPT4ge1xyXG4gICAgICAgIGFzc2VydC5lcXVhbChmb3JtYXRQb3NpdGlvbihleHBlY3RlZFJhbmdlLnN0YXJ0KSwgZm9ybWF0UG9zaXRpb24ocmFuZ2Uuc3RhcnQpLCAnU3RhcnQgcG9zaXRpb24gaXMgaW5jb3JyZWN0Jyk7XHJcbiAgICAgICAgYXNzZXJ0LmVxdWFsKGZvcm1hdFBvc2l0aW9uKGV4cGVjdGVkUmFuZ2UuZW5kKSwgZm9ybWF0UG9zaXRpb24ocmFuZ2UuZW5kKSwgJ0VuZCBwb3NpdGlvbiBpcyBpbmNvcnJlY3QnKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBidWlsZFRlc3QgPSAoc3RhcnRGaWxlLCBzdGFydFBvc2l0aW9uLCBleHBlY3RlZEZpbGVzLCBleHBlY3RlZFJhbmdlcykgPT4ge1xyXG4gICAgICAgIHJldHVybiAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHREb2N1bWVudCA9IHlpZWxkIHZzY29kZS53b3Jrc3BhY2Uub3BlblRleHREb2N1bWVudChzdGFydEZpbGUpO1xyXG4gICAgICAgICAgICB5aWVsZCB2c2NvZGUud2luZG93LnNob3dUZXh0RG9jdW1lbnQodGV4dERvY3VtZW50KTtcclxuICAgICAgICAgICAgYXNzZXJ0KHZzY29kZS53aW5kb3cuYWN0aXZlVGV4dEVkaXRvciwgJ05vIGFjdGl2ZSBlZGl0b3InKTtcclxuICAgICAgICAgICAgY29uc3QgbG9jYXRpb25zID0geWllbGQgdnNjb2RlLmNvbW1hbmRzLmV4ZWN1dGVDb21tYW5kKCd2c2NvZGUuZXhlY3V0ZURlZmluaXRpb25Qcm92aWRlcicsIHRleHREb2N1bWVudC51cmksIHN0YXJ0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICBhc3NlcnQuZXF1YWwoZXhwZWN0ZWRGaWxlcy5sZW5ndGgsIGxvY2F0aW9ucy5sZW5ndGgsICdXcm9uZyBudW1iZXIgb2YgcmVzdWx0cycpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2F0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgYXNzZXJ0RmlsZShleHBlY3RlZEZpbGVzW2ldLCBsb2NhdGlvbnNbaV0udXJpKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydFJhbmdlKGV4cGVjdGVkUmFuZ2VzW2ldLCBsb2NhdGlvbnNbaV0ucmFuZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdGVzdCgnRnJvbSBvd24gZGVmaW5pdGlvbicsIGJ1aWxkVGVzdChmaWxlRGVmaW5pdGlvbnMsIG5ldyB2c2NvZGUuUG9zaXRpb24oMiwgNiksIFtmaWxlRGVmaW5pdGlvbnNdLCBjb25zdGFudHNfMS5pc0xhbmd1YWdlU2VydmVyVGVzdCgpID8gW25ldyB2c2NvZGUuUmFuZ2UoMiwgNCwgMiwgMTYpXSA6IFtuZXcgdnNjb2RlLlJhbmdlKDIsIDAsIDExLCAxNyldKSk7XHJcbiAgICB0ZXN0KCdOZXN0ZWQgZnVuY3Rpb24nLCBidWlsZFRlc3QoZmlsZURlZmluaXRpb25zLCBuZXcgdnNjb2RlLlBvc2l0aW9uKDExLCAxNiksIFtmaWxlRGVmaW5pdGlvbnNdLCBjb25zdGFudHNfMS5pc0xhbmd1YWdlU2VydmVyVGVzdCgpID8gW25ldyB2c2NvZGUuUmFuZ2UoNiwgOCwgNiwgMTUpXSA6IFtuZXcgdnNjb2RlLlJhbmdlKDYsIDQsIDEwLCAxNildKSk7XHJcbiAgICB0ZXN0KCdEZWNvcmF0b3IgdXNhZ2UnLCBidWlsZFRlc3QoZmlsZURlZmluaXRpb25zLCBuZXcgdnNjb2RlLlBvc2l0aW9uKDEzLCAxKSwgW2ZpbGVEZWZpbml0aW9uc10sIGNvbnN0YW50c18xLmlzTGFuZ3VhZ2VTZXJ2ZXJUZXN0KCkgPyBbbmV3IHZzY29kZS5SYW5nZSgyLCA0LCAyLCAxNildIDogW25ldyB2c2NvZGUuUmFuZ2UoMiwgMCwgMTEsIDE3KV0pKTtcclxuICAgIHRlc3QoJ0Z1bmN0aW9uIGRlY29yYXRlZCBieSBzdGRsaWInLCBidWlsZFRlc3QoZmlsZURlZmluaXRpb25zLCBuZXcgdnNjb2RlLlBvc2l0aW9uKDI5LCA2KSwgW2ZpbGVEZWZpbml0aW9uc10sIGNvbnN0YW50c18xLmlzTGFuZ3VhZ2VTZXJ2ZXJUZXN0KCkgPyBbbmV3IHZzY29kZS5SYW5nZSgyMSwgNCwgMjEsIDIyKV0gOiBbbmV3IHZzY29kZS5SYW5nZSgyMSwgMCwgMjcsIDE3KV0pKTtcclxuICAgIHRlc3QoJ0Z1bmN0aW9uIGRlY29yYXRlZCBieSBsb2NhbCBkZWNvcmF0b3InLCBidWlsZFRlc3QoZmlsZURlZmluaXRpb25zLCBuZXcgdnNjb2RlLlBvc2l0aW9uKDMwLCA2KSwgW2ZpbGVEZWZpbml0aW9uc10sIGNvbnN0YW50c18xLmlzTGFuZ3VhZ2VTZXJ2ZXJUZXN0KCkgPyBbbmV3IHZzY29kZS5SYW5nZSgxNCwgNCwgMTQsIDkpXSA6IFtuZXcgdnNjb2RlLlJhbmdlKDE0LCAwLCAxOCwgNyldKSk7XHJcbiAgICB0ZXN0KCdNb2R1bGUgaW1wb3J0ZWQgZGVjb3JhdG9yIHVzYWdlJywgYnVpbGRUZXN0KGZpbGVVc2FnZXMsIG5ldyB2c2NvZGUuUG9zaXRpb24oMywgMTUpLCBbZmlsZURlZmluaXRpb25zXSwgY29uc3RhbnRzXzEuaXNMYW5ndWFnZVNlcnZlclRlc3QoKSA/IFtuZXcgdnNjb2RlLlJhbmdlKDIsIDQsIDIsIDE2KV0gOiBbbmV3IHZzY29kZS5SYW5nZSgyLCAwLCAxMSwgMTcpXSkpO1xyXG4gICAgdGVzdCgnTW9kdWxlIGltcG9ydGVkIGZ1bmN0aW9uIGRlY29yYXRlZCBieSBzdGRsaWInLCBidWlsZFRlc3QoZmlsZVVzYWdlcywgbmV3IHZzY29kZS5Qb3NpdGlvbigxMSwgMTkpLCBbZmlsZURlZmluaXRpb25zXSwgY29uc3RhbnRzXzEuaXNMYW5ndWFnZVNlcnZlclRlc3QoKSA/IFtuZXcgdnNjb2RlLlJhbmdlKDIxLCA0LCAyMSwgMjIpXSA6IFtuZXcgdnNjb2RlLlJhbmdlKDIxLCAwLCAyNywgMTcpXSkpO1xyXG4gICAgdGVzdCgnTW9kdWxlIGltcG9ydGVkIGZ1bmN0aW9uIGRlY29yYXRlZCBieSBsb2NhbCBkZWNvcmF0b3InLCBidWlsZFRlc3QoZmlsZVVzYWdlcywgbmV3IHZzY29kZS5Qb3NpdGlvbigxMiwgMTkpLCBbZmlsZURlZmluaXRpb25zXSwgY29uc3RhbnRzXzEuaXNMYW5ndWFnZVNlcnZlclRlc3QoKSA/IFtuZXcgdnNjb2RlLlJhbmdlKDE0LCA0LCAxNCwgOSldIDogW25ldyB2c2NvZGUuUmFuZ2UoMTQsIDAsIDE4LCA3KV0pKTtcclxuICAgIHRlc3QoJ1NwZWNpZmljYWxseSBpbXBvcnRlZCBkZWNvcmF0b3IgdXNhZ2UnLCBidWlsZFRlc3QoZmlsZVVzYWdlcywgbmV3IHZzY29kZS5Qb3NpdGlvbig3LCAxKSwgY29uc3RhbnRzXzEuaXNMYW5ndWFnZVNlcnZlclRlc3QoKSA/IFtmaWxlRGVmaW5pdGlvbnNdIDogW2ZpbGVEZWZpbml0aW9uc10sIGNvbnN0YW50c18xLmlzTGFuZ3VhZ2VTZXJ2ZXJUZXN0KClcclxuICAgICAgICA/IFtuZXcgdnNjb2RlLlJhbmdlKDIsIDQsIDIsIDE2KV1cclxuICAgICAgICA6IFtuZXcgdnNjb2RlLlJhbmdlKDIsIDAsIDExLCAxNyldKSk7XHJcbiAgICB0ZXN0KCdTcGVjaWZpY2FsbHkgaW1wb3J0ZWQgZnVuY3Rpb24gZGVjb3JhdGVkIGJ5IHN0ZGxpYicsIGJ1aWxkVGVzdChmaWxlVXNhZ2VzLCBuZXcgdnNjb2RlLlBvc2l0aW9uKDE0LCA2KSwgY29uc3RhbnRzXzEuaXNMYW5ndWFnZVNlcnZlclRlc3QoKSA/IFtmaWxlRGVmaW5pdGlvbnNdIDogW2ZpbGVEZWZpbml0aW9uc10sIGNvbnN0YW50c18xLmlzTGFuZ3VhZ2VTZXJ2ZXJUZXN0KClcclxuICAgICAgICA/IFtuZXcgdnNjb2RlLlJhbmdlKDIxLCA0LCAyMSwgMjIpXVxyXG4gICAgICAgIDogW25ldyB2c2NvZGUuUmFuZ2UoMjEsIDAsIDI3LCAxNyldKSk7XHJcbiAgICB0ZXN0KCdTcGVjaWZpY2FsbHkgaW1wb3J0ZWQgZnVuY3Rpb24gZGVjb3JhdGVkIGJ5IGxvY2FsIGRlY29yYXRvcicsIGJ1aWxkVGVzdChmaWxlVXNhZ2VzLCBuZXcgdnNjb2RlLlBvc2l0aW9uKDE1LCA2KSwgY29uc3RhbnRzXzEuaXNMYW5ndWFnZVNlcnZlclRlc3QoKSA/IFtmaWxlRGVmaW5pdGlvbnNdIDogW2ZpbGVEZWZpbml0aW9uc10sIGNvbnN0YW50c18xLmlzTGFuZ3VhZ2VTZXJ2ZXJUZXN0KClcclxuICAgICAgICA/IFtuZXcgdnNjb2RlLlJhbmdlKDE0LCA0LCAxNCwgOSldXHJcbiAgICAgICAgOiBbbmV3IHZzY29kZS5SYW5nZSgxNCwgMCwgMTgsIDcpXSkpO1xyXG59KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmF2aWdhdGlvbi50ZXN0LmpzLm1hcCJdfQ==